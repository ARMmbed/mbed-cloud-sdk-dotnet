/* 
 * <auto-generated>
 * Enrollment API
 *
 * Mbed Cloud Connect Enrollment Service allows users to claim the ownership of a device which is not yet assigned to an account. A device without an assigned account can be a device purchased from the open market (OEM dealer) or a device trasferred from an account to another. More information in [Device overship: First-to-claim](https://cloud.mbed.com/docs/current/connecting/device-ownership.html) document. 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = enrollment.Client.SwaggerDateConverter;

namespace enrollment.Model
{
    /// <summary>
    /// EnrollmentIdentities
    /// </summary>
    [DataContract]
    public partial class EnrollmentIdentities :  IEquatable<EnrollmentIdentities>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets _Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum List for "list"
            /// </summary>
            [EnumMember(Value = "list")]
            List
        }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderEnum
        {
            
            /// <summary>
            /// Enum ASC for "ASC"
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC,
            
            /// <summary>
            /// Enum DESC for "DESC"
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC
        }

        /// <summary>
        /// Gets or Sets _Object
        /// </summary>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum? _Object { get; set; }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public OrderEnum? Order { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrollmentIdentities" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnrollmentIdentities() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrollmentIdentities" /> class.
        /// </summary>
        /// <param name="After">muuid (required).</param>
        /// <param name="Data">Data (required).</param>
        /// <param name="HasMore">HasMore (required).</param>
        /// <param name="Limit">Range 2-1000, or default. (required).</param>
        /// <param name="_Object">_Object (required).</param>
        /// <param name="Order">Order (required) (default to OrderEnum.ASC).</param>
        /// <param name="TotalCount">TotalCount (required).</param>
        public EnrollmentIdentities(string After = default(string), List<EnrollmentIdentity> Data = default(List<EnrollmentIdentity>), bool? HasMore = default(bool?), int? Limit = default(int?), ObjectEnum? _Object = default(ObjectEnum?), OrderEnum? Order = OrderEnum.ASC, int? TotalCount = default(int?))
        {
            // to ensure "After" is required (not null)
            if (After == null)
            {
                throw new InvalidDataException("After is a required property for EnrollmentIdentities and cannot be null");
            }
            else
            {
                this.After = After;
            }
            // to ensure "Data" is required (not null)
            if (Data == null)
            {
                throw new InvalidDataException("Data is a required property for EnrollmentIdentities and cannot be null");
            }
            else
            {
                this.Data = Data;
            }
            // to ensure "HasMore" is required (not null)
            if (HasMore == null)
            {
                throw new InvalidDataException("HasMore is a required property for EnrollmentIdentities and cannot be null");
            }
            else
            {
                this.HasMore = HasMore;
            }
            // to ensure "Limit" is required (not null)
            if (Limit == null)
            {
                throw new InvalidDataException("Limit is a required property for EnrollmentIdentities and cannot be null");
            }
            else
            {
                this.Limit = Limit;
            }
            // to ensure "_Object" is required (not null)
            if (_Object == null)
            {
                throw new InvalidDataException("_Object is a required property for EnrollmentIdentities and cannot be null");
            }
            else
            {
                this._Object = _Object;
            }
            // to ensure "Order" is required (not null)
            if (Order == null)
            {
                throw new InvalidDataException("Order is a required property for EnrollmentIdentities and cannot be null");
            }
            else
            {
                this.Order = Order;
            }
            // to ensure "TotalCount" is required (not null)
            if (TotalCount == null)
            {
                throw new InvalidDataException("TotalCount is a required property for EnrollmentIdentities and cannot be null");
            }
            else
            {
                this.TotalCount = TotalCount;
            }
        }
        
        /// <summary>
        /// muuid
        /// </summary>
        /// <value>muuid</value>
        [DataMember(Name="after", EmitDefaultValue=false)]
        public string After { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<EnrollmentIdentity> Data { get; set; }

        /// <summary>
        /// Gets or Sets HasMore
        /// </summary>
        [DataMember(Name="has_more", EmitDefaultValue=false)]
        public bool? HasMore { get; set; }

        /// <summary>
        /// Range 2-1000, or default.
        /// </summary>
        /// <value>Range 2-1000, or default.</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }



        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name="total_count", EmitDefaultValue=false)]
        public int? TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnrollmentIdentities {\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  HasMore: ").Append(HasMore).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnrollmentIdentities);
        }

        /// <summary>
        /// Returns true if EnrollmentIdentities instances are equal
        /// </summary>
        /// <param name="input">Instance of EnrollmentIdentities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnrollmentIdentities input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.After == input.After ||
                    (this.After != null &&
                    this.After.Equals(input.After))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.HasMore == input.HasMore ||
                    (this.HasMore != null &&
                    this.HasMore.Equals(input.HasMore))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.After != null)
                    hashCode = hashCode * 59 + this.After.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.HasMore != null)
                    hashCode = hashCode * 59 + this.HasMore.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // After (string) pattern
            Regex regexAfter = new Regex(@"^[A-Za-z0-9]{32}", RegexOptions.CultureInvariant);
            if (false == regexAfter.Match(this.After).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for After, must match a pattern of " + regexAfter, new [] { "After" });
            }

            // Limit (int?) maximum
            if(this.Limit > (int?)1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value less than or equal to 1000.", new [] { "Limit" });
            }

            // Limit (int?) minimum
            if(this.Limit < (int?)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value greater than or equal to 2.", new [] { "Limit" });
            }

            // TotalCount (int?) minimum
            if(this.TotalCount < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalCount, must be a value greater than or equal to 1.", new [] { "TotalCount" });
            }

            yield break;
        }
    }

}
