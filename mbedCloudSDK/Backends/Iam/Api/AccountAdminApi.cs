/* 
 * IAM Identities REST API
 *
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using iam.Client;
using iam.Model;

namespace iam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountAdminApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an alias.
        /// </summary>
        /// <remarks>
        /// Adds an alias to the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be added.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AddAlias (string accountID, string alias);

        /// <summary>
        /// Add an alias.
        /// </summary>
        /// <remarks>
        /// Adds an alias to the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be added.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AddAliasWithHttpInfo (string accountID, string alias);
        /// <summary>
        /// Upload a new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>TrustedCertificateResp</returns>
        TrustedCertificateResp AddCertificate (TrustedCertificateReq body);

        /// <summary>
        /// Upload a new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        ApiResponse<TrustedCertificateResp> AddCertificateWithHttpInfo (TrustedCertificateReq body);
        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AddSubjectsToGroup (string groupID, SubjectList body);

        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AddSubjectsToGroupWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Add users to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AddUsersToGroup (string groupID, SubjectList body);

        /// <summary>
        /// Add users to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AddUsersToGroupWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>GroupSummary</returns>
        GroupSummary CreateGroup (GroupCreationInfo body);

        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        ApiResponse<GroupSummary> CreateGroupWithHttpInfo (GroupCreationInfo body);
        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Action, either &#39;create&#39; or &#39;invite&#39;. (optional, default to create)</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp CreateUser (UserInfoReq body, string action = null);

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Action, either &#39;create&#39; or &#39;invite&#39;. (optional, default to create)</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> CreateUserWithHttpInfo (UserInfoReq body, string action = null);
        /// <summary>
        /// Delete a trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns></returns>
        void DeleteCertificate (string certId);

        /// <summary>
        /// Delete a trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCertificateWithHttpInfo (string certId);
        /// <summary>
        /// Delete a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns></returns>
        void DeleteGroup (string groupID);

        /// <summary>
        /// Delete a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo (string groupID);
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns></returns>
        void DeleteUser (string userId);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (string userId);
        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter by service or expiring days, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_filter%3D0 (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <returns>TrustedCertificateRespList</returns>
        TrustedCertificateRespList GetAllCertificates (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null);

        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter by service or expiring days, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_filter%3D0 (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <returns>ApiResponse of TrustedCertificateRespList</returns>
        ApiResponse<TrustedCertificateRespList> GetAllCertificatesWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null);
        /// <summary>
        /// Get the details of all users.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>UserInfoRespList</returns>
        UserInfoRespList GetAllUsers (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);

        /// <summary>
        /// Get the details of all users.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        ApiResponse<UserInfoRespList> GetAllUsersWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);
        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>TrustedCertificateResp</returns>
        TrustedCertificateResp GetCertificate (string certId);

        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        ApiResponse<TrustedCertificateResp> GetCertificateWithHttpInfo (string certId);
        /// <summary>
        /// Details of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID or name of the user whose details are retrieved.</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp GetUser (string userId);

        /// <summary>
        /// Details of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID or name of the user whose details are retrieved.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> GetUserWithHttpInfo (string userId);
        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the users of a group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>UserInfoRespList</returns>
        UserInfoRespList GetUsersOfGroup (string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the users of a group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        ApiResponse<UserInfoRespList> GetUsersOfGroupWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Remove an alias.
        /// </summary>
        /// <remarks>
        /// Removes an alias from the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be removed.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse RemoveAlias (string accountID, string alias);

        /// <summary>
        /// Remove an alias.
        /// </summary>
        /// <remarks>
        /// Removes an alias from the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be removed.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> RemoveAliasWithHttpInfo (string accountID, string alias);
        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are removed.</param>
        /// <param name="body">A list of users to be removed from the group.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse RemoveUsersFromGroup (string groupID, SubjectList body);

        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are removed.</param>
        /// <param name="body">A list of users to be removed from the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> RemoveUsersFromGroupWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Reset the user password.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the user password. The new password will visible in the response.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp ResetUserPassword (string userId);

        /// <summary>
        /// Reset the user password.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the user password. The new password will visible in the response.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> ResetUserPasswordWithHttpInfo (string userId);
        /// <summary>
        /// Set aliases.
        /// </summary>
        /// <remarks>
        /// Defines aliases of the account and overwrites the previous set of aliases.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">A list of aliases to be set.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse SetAliases (string accountID, List<string> body);

        /// <summary>
        /// Set aliases.
        /// </summary>
        /// <remarks>
        /// Defines aliases of the account and overwrites the previous set of aliases.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">A list of aliases to be set.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> SetAliasesWithHttpInfo (string accountID, List<string> body);
        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>AccountInfo</returns>
        AccountInfo UpdateAccount (string accountID, AccountUpdateRootReq body);

        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        ApiResponse<AccountInfo> UpdateAccountWithHttpInfo (string accountID, AccountUpdateRootReq body);
        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>TrustedCertificateResp</returns>
        TrustedCertificateResp UpdateCertificate (string certId, TrustedCertificateReq body);

        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        ApiResponse<TrustedCertificateResp> UpdateCertificateWithHttpInfo (string certId, TrustedCertificateReq body);
        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose details are updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp UpdateUser (string userId, UserUpdateReq body);

        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose details are updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> UpdateUserWithHttpInfo (string userId, UserUpdateReq body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add an alias.
        /// </summary>
        /// <remarks>
        /// Adds an alias to the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be added.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AddAliasAsync (string accountID, string alias);

        /// <summary>
        /// Add an alias.
        /// </summary>
        /// <remarks>
        /// Adds an alias to the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be added.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddAliasAsyncWithHttpInfo (string accountID, string alias);
        /// <summary>
        /// Upload a new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateResp> AddCertificateAsync (TrustedCertificateReq body);

        /// <summary>
        /// Upload a new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> AddCertificateAsyncWithHttpInfo (TrustedCertificateReq body);
        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AddSubjectsToGroupAsync (string groupID, SubjectList body);

        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddSubjectsToGroupAsyncWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Add users to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AddUsersToGroupAsync (string groupID, SubjectList body);

        /// <summary>
        /// Add users to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddUsersToGroupAsyncWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>Task of GroupSummary</returns>
        System.Threading.Tasks.Task<GroupSummary> CreateGroupAsync (GroupCreationInfo body);

        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummary>> CreateGroupAsyncWithHttpInfo (GroupCreationInfo body);
        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Action, either &#39;create&#39; or &#39;invite&#39;. (optional, default to create)</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> CreateUserAsync (UserInfoReq body, string action = null);

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Action, either &#39;create&#39; or &#39;invite&#39;. (optional, default to create)</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> CreateUserAsyncWithHttpInfo (UserInfoReq body, string action = null);
        /// <summary>
        /// Delete a trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCertificateAsync (string certId);

        /// <summary>
        /// Delete a trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCertificateAsyncWithHttpInfo (string certId);
        /// <summary>
        /// Delete a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync (string groupID);

        /// <summary>
        /// Delete a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupAsyncWithHttpInfo (string groupID);
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (string userId);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter by service or expiring days, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_filter%3D0 (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <returns>Task of TrustedCertificateRespList</returns>
        System.Threading.Tasks.Task<TrustedCertificateRespList> GetAllCertificatesAsync (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null);

        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter by service or expiring days, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_filter%3D0 (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <returns>Task of ApiResponse (TrustedCertificateRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateRespList>> GetAllCertificatesAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null);
        /// <summary>
        /// Get the details of all users.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        System.Threading.Tasks.Task<UserInfoRespList> GetAllUsersAsync (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);

        /// <summary>
        /// Get the details of all users.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetAllUsersAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);
        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateResp> GetCertificateAsync (string certId);

        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> GetCertificateAsyncWithHttpInfo (string certId);
        /// <summary>
        /// Details of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID or name of the user whose details are retrieved.</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> GetUserAsync (string userId);

        /// <summary>
        /// Details of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID or name of the user whose details are retrieved.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> GetUserAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the users of a group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        System.Threading.Tasks.Task<UserInfoRespList> GetUsersOfGroupAsync (string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the users of a group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetUsersOfGroupAsyncWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Remove an alias.
        /// </summary>
        /// <remarks>
        /// Removes an alias from the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be removed.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> RemoveAliasAsync (string accountID, string alias);

        /// <summary>
        /// Remove an alias.
        /// </summary>
        /// <remarks>
        /// Removes an alias from the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be removed.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveAliasAsyncWithHttpInfo (string accountID, string alias);
        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are removed.</param>
        /// <param name="body">A list of users to be removed from the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> RemoveUsersFromGroupAsync (string groupID, SubjectList body);

        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are removed.</param>
        /// <param name="body">A list of users to be removed from the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveUsersFromGroupAsyncWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Reset the user password.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the user password. The new password will visible in the response.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> ResetUserPasswordAsync (string userId);

        /// <summary>
        /// Reset the user password.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the user password. The new password will visible in the response.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> ResetUserPasswordAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Set aliases.
        /// </summary>
        /// <remarks>
        /// Defines aliases of the account and overwrites the previous set of aliases.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">A list of aliases to be set.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> SetAliasesAsync (string accountID, List<string> body);

        /// <summary>
        /// Set aliases.
        /// </summary>
        /// <remarks>
        /// Defines aliases of the account and overwrites the previous set of aliases.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">A list of aliases to be set.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> SetAliasesAsyncWithHttpInfo (string accountID, List<string> body);
        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of AccountInfo</returns>
        System.Threading.Tasks.Task<AccountInfo> UpdateAccountAsync (string accountID, AccountUpdateRootReq body);

        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfo>> UpdateAccountAsyncWithHttpInfo (string accountID, AccountUpdateRootReq body);
        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateResp> UpdateCertificateAsync (string certId, TrustedCertificateReq body);

        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> UpdateCertificateAsyncWithHttpInfo (string certId, TrustedCertificateReq body);
        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose details are updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> UpdateUserAsync (string userId, UserUpdateReq body);

        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose details are updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> UpdateUserAsyncWithHttpInfo (string userId, UserUpdateReq body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountAdminApi : IAccountAdminApi
    {
        private iam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountAdminApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountAdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountAdminApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public iam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add an alias. Adds an alias to the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be added.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AddAlias (string accountID, string alias)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AddAliasWithHttpInfo(accountID, alias);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an alias. Adds an alias to the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be added.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AddAliasWithHttpInfo (string accountID, string alias)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AccountAdminApi->AddAlias");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AccountAdminApi->AddAlias");

            var localVarPath = "/v3/accounts/{accountID}/alias/{alias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Add an alias. Adds an alias to the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be added.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AddAliasAsync (string accountID, string alias)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AddAliasAsyncWithHttpInfo(accountID, alias);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an alias. Adds an alias to the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be added.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddAliasAsyncWithHttpInfo (string accountID, string alias)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AccountAdminApi->AddAlias");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AccountAdminApi->AddAlias");

            var localVarPath = "/v3/accounts/{accountID}/alias/{alias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Upload a new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>TrustedCertificateResp</returns>
        public TrustedCertificateResp AddCertificate (TrustedCertificateReq body)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = AddCertificateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        public ApiResponse< TrustedCertificateResp > AddCertificateWithHttpInfo (TrustedCertificateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->AddCertificate");

            var localVarPath = "/v3/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Upload a new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateResp> AddCertificateAsync (TrustedCertificateReq body)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = await AddCertificateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> AddCertificateAsyncWithHttpInfo (TrustedCertificateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->AddCertificate");

            var localVarPath = "/v3/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AddSubjectsToGroup (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AddSubjectsToGroupWithHttpInfo(groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AddSubjectsToGroupWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AccountAdminApi->AddSubjectsToGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->AddSubjectsToGroup");

            var localVarPath = "/v3/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSubjectsToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AddSubjectsToGroupAsync (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AddSubjectsToGroupAsyncWithHttpInfo(groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddSubjectsToGroupAsyncWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AccountAdminApi->AddSubjectsToGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->AddSubjectsToGroup");

            var localVarPath = "/v3/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSubjectsToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Add users to a group. An endpoint for adding users to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AddUsersToGroup (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AddUsersToGroupWithHttpInfo(groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add users to a group. An endpoint for adding users to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AddUsersToGroupWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AccountAdminApi->AddUsersToGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->AddUsersToGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsersToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Add users to a group. An endpoint for adding users to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AddUsersToGroupAsync (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AddUsersToGroupAsyncWithHttpInfo(groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add users to a group. An endpoint for adding users to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddUsersToGroupAsyncWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AccountAdminApi->AddUsersToGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->AddUsersToGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsersToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Create a new group. An endpoint for creating a new group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>GroupSummary</returns>
        public GroupSummary CreateGroup (GroupCreationInfo body)
        {
             ApiResponse<GroupSummary> localVarResponse = CreateGroupWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new group. An endpoint for creating a new group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        public ApiResponse< GroupSummary > CreateGroupWithHttpInfo (GroupCreationInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->CreateGroup");

            var localVarPath = "/v3/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
            
        }

        /// <summary>
        /// Create a new group. An endpoint for creating a new group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>Task of GroupSummary</returns>
        public async System.Threading.Tasks.Task<GroupSummary> CreateGroupAsync (GroupCreationInfo body)
        {
             ApiResponse<GroupSummary> localVarResponse = await CreateGroupAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new group. An endpoint for creating a new group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummary>> CreateGroupAsyncWithHttpInfo (GroupCreationInfo body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->CreateGroup");

            var localVarPath = "/v3/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
            
        }

        /// <summary>
        /// Create a new user. An endpoint for creating a new user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Action, either &#39;create&#39; or &#39;invite&#39;. (optional, default to create)</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp CreateUser (UserInfoReq body, string action = null)
        {
             ApiResponse<UserInfoResp> localVarResponse = CreateUserWithHttpInfo(body, action);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user. An endpoint for creating a new user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Action, either &#39;create&#39; or &#39;invite&#39;. (optional, default to create)</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > CreateUserWithHttpInfo (UserInfoReq body, string action = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->CreateUser");

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Create a new user. An endpoint for creating a new user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Action, either &#39;create&#39; or &#39;invite&#39;. (optional, default to create)</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> CreateUserAsync (UserInfoReq body, string action = null)
        {
             ApiResponse<UserInfoResp> localVarResponse = await CreateUserAsyncWithHttpInfo(body, action);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new user. An endpoint for creating a new user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Action, either &#39;create&#39; or &#39;invite&#39;. (optional, default to create)</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> CreateUserAsyncWithHttpInfo (UserInfoReq body, string action = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->CreateUser");

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Delete a trusted certificate by ID. An endpoint for deleting a trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns></returns>
        public void DeleteCertificate (string certId)
        {
             DeleteCertificateWithHttpInfo(certId);
        }

        /// <summary>
        /// Delete a trusted certificate by ID. An endpoint for deleting a trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCertificateWithHttpInfo (string certId)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AccountAdminApi->DeleteCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a trusted certificate by ID. An endpoint for deleting a trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCertificateAsync (string certId)
        {
             await DeleteCertificateAsyncWithHttpInfo(certId);

        }

        /// <summary>
        /// Delete a trusted certificate by ID. An endpoint for deleting a trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCertificateAsyncWithHttpInfo (string certId)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AccountAdminApi->DeleteCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a group. An endpoint for deleting a group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns></returns>
        public void DeleteGroup (string groupID)
        {
             DeleteGroupWithHttpInfo(groupID);
        }

        /// <summary>
        /// Delete a group. An endpoint for deleting a group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGroupWithHttpInfo (string groupID)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AccountAdminApi->DeleteGroup");

            var localVarPath = "/v3/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a group. An endpoint for deleting a group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync (string groupID)
        {
             await DeleteGroupAsyncWithHttpInfo(groupID);

        }

        /// <summary>
        /// Delete a group. An endpoint for deleting a group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupAsyncWithHttpInfo (string groupID)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AccountAdminApi->DeleteGroup");

            var localVarPath = "/v3/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns></returns>
        public void DeleteUser (string userId)
        {
             DeleteUserWithHttpInfo(userId);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AccountAdminApi->DeleteUser");

            var localVarPath = "/v3/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (string userId)
        {
             await DeleteUserAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AccountAdminApi->DeleteUser");

            var localVarPath = "/v3/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter by service or expiring days, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_filter%3D0 (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <returns>TrustedCertificateRespList</returns>
        public TrustedCertificateRespList GetAllCertificates (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null)
        {
             ApiResponse<TrustedCertificateRespList> localVarResponse = GetAllCertificatesWithHttpInfo(limit, after, order, include, filter, serviceEq, expireEq, deviceExecutionModeEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter by service or expiring days, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_filter%3D0 (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <returns>ApiResponse of TrustedCertificateRespList</returns>
        public ApiResponse< TrustedCertificateRespList > GetAllCertificatesWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null)
        {

            var localVarPath = "/v3/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (serviceEq != null) localVarQueryParams.Add("service__eq", Configuration.ApiClient.ParameterToString(serviceEq)); // query parameter
            if (expireEq != null) localVarQueryParams.Add("expire__eq", Configuration.ApiClient.ParameterToString(expireEq)); // query parameter
            if (deviceExecutionModeEq != null) localVarQueryParams.Add("device_execution_mode__eq", Configuration.ApiClient.ParameterToString(deviceExecutionModeEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateRespList)));
            
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter by service or expiring days, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_filter%3D0 (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <returns>Task of TrustedCertificateRespList</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateRespList> GetAllCertificatesAsync (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null)
        {
             ApiResponse<TrustedCertificateRespList> localVarResponse = await GetAllCertificatesAsyncWithHttpInfo(limit, after, order, include, filter, serviceEq, expireEq, deviceExecutionModeEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter by service or expiring days, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_filter%3D0 (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <returns>Task of ApiResponse (TrustedCertificateRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateRespList>> GetAllCertificatesAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null)
        {

            var localVarPath = "/v3/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (serviceEq != null) localVarQueryParams.Add("service__eq", Configuration.ApiClient.ParameterToString(serviceEq)); // query parameter
            if (expireEq != null) localVarQueryParams.Add("expire__eq", Configuration.ApiClient.ParameterToString(expireEq)); // query parameter
            if (deviceExecutionModeEq != null) localVarQueryParams.Add("device_execution_mode__eq", Configuration.ApiClient.ParameterToString(deviceExecutionModeEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateRespList)));
            
        }

        /// <summary>
        /// Get the details of all users. An endpoint for retrieving the details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>UserInfoRespList</returns>
        public UserInfoRespList GetAllUsers (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = GetAllUsersWithHttpInfo(limit, after, order, include, filter, statusEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of all users. An endpoint for retrieving the details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        public ApiResponse< UserInfoRespList > GetAllUsersWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (statusEq != null) localVarQueryParams.Add("status__eq", Configuration.ApiClient.ParameterToString(statusEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
            
        }

        /// <summary>
        /// Get the details of all users. An endpoint for retrieving the details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        public async System.Threading.Tasks.Task<UserInfoRespList> GetAllUsersAsync (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = await GetAllUsersAsyncWithHttpInfo(limit, after, order, include, filter, statusEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of all users. An endpoint for retrieving the details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetAllUsersAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (statusEq != null) localVarQueryParams.Add("status__eq", Configuration.ApiClient.ParameterToString(statusEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
            
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>TrustedCertificateResp</returns>
        public TrustedCertificateResp GetCertificate (string certId)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = GetCertificateWithHttpInfo(certId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        public ApiResponse< TrustedCertificateResp > GetCertificateWithHttpInfo (string certId)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AccountAdminApi->GetCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateResp> GetCertificateAsync (string certId)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = await GetCertificateAsyncWithHttpInfo(certId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> GetCertificateAsyncWithHttpInfo (string certId)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AccountAdminApi->GetCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Details of a user. An endpoint for retrieving the details of a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID or name of the user whose details are retrieved.</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp GetUser (string userId)
        {
             ApiResponse<UserInfoResp> localVarResponse = GetUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Details of a user. An endpoint for retrieving the details of a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID or name of the user whose details are retrieved.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > GetUserWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AccountAdminApi->GetUser");

            var localVarPath = "/v3/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Details of a user. An endpoint for retrieving the details of a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID or name of the user whose details are retrieved.</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> GetUserAsync (string userId)
        {
             ApiResponse<UserInfoResp> localVarResponse = await GetUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Details of a user. An endpoint for retrieving the details of a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID or name of the user whose details are retrieved.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> GetUserAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AccountAdminApi->GetUser");

            var localVarPath = "/v3/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Get users of a group. An endpoint for listing the users of a group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>UserInfoRespList</returns>
        public UserInfoRespList GetUsersOfGroup (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = GetUsersOfGroupWithHttpInfo(groupID, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users of a group. An endpoint for listing the users of a group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        public ApiResponse< UserInfoRespList > GetUsersOfGroupWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AccountAdminApi->GetUsersOfGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
            
        }

        /// <summary>
        /// Get users of a group. An endpoint for listing the users of a group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        public async System.Threading.Tasks.Task<UserInfoRespList> GetUsersOfGroupAsync (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = await GetUsersOfGroupAsyncWithHttpInfo(groupID, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users of a group. An endpoint for listing the users of a group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetUsersOfGroupAsyncWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AccountAdminApi->GetUsersOfGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
            
        }

        /// <summary>
        /// Remove an alias. Removes an alias from the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be removed.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse RemoveAlias (string accountID, string alias)
        {
             ApiResponse<UpdatedResponse> localVarResponse = RemoveAliasWithHttpInfo(accountID, alias);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an alias. Removes an alias from the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be removed.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > RemoveAliasWithHttpInfo (string accountID, string alias)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AccountAdminApi->RemoveAlias");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AccountAdminApi->RemoveAlias");

            var localVarPath = "/v3/accounts/{accountID}/alias/{alias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Remove an alias. Removes an alias from the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be removed.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> RemoveAliasAsync (string accountID, string alias)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await RemoveAliasAsyncWithHttpInfo(accountID, alias);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove an alias. Removes an alias from the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="alias">The account alias to be removed.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveAliasAsyncWithHttpInfo (string accountID, string alias)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AccountAdminApi->RemoveAlias");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AccountAdminApi->RemoveAlias");

            var localVarPath = "/v3/accounts/{accountID}/alias/{alias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are removed.</param>
        /// <param name="body">A list of users to be removed from the group.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse RemoveUsersFromGroup (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = RemoveUsersFromGroupWithHttpInfo(groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are removed.</param>
        /// <param name="body">A list of users to be removed from the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > RemoveUsersFromGroupWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AccountAdminApi->RemoveUsersFromGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->RemoveUsersFromGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsersFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are removed.</param>
        /// <param name="body">A list of users to be removed from the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> RemoveUsersFromGroupAsync (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await RemoveUsersFromGroupAsyncWithHttpInfo(groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose users are removed.</param>
        /// <param name="body">A list of users to be removed from the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveUsersFromGroupAsyncWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AccountAdminApi->RemoveUsersFromGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->RemoveUsersFromGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsersFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Reset the user password. An endpoint for resetting the user password. The new password will visible in the response.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp ResetUserPassword (string userId)
        {
             ApiResponse<UserInfoResp> localVarResponse = ResetUserPasswordWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the user password. An endpoint for resetting the user password. The new password will visible in the response.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > ResetUserPasswordWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AccountAdminApi->ResetUserPassword");

            var localVarPath = "/v3/users/{user-id}/reset-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Reset the user password. An endpoint for resetting the user password. The new password will visible in the response.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> ResetUserPasswordAsync (string userId)
        {
             ApiResponse<UserInfoResp> localVarResponse = await ResetUserPasswordAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset the user password. An endpoint for resetting the user password. The new password will visible in the response.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> ResetUserPasswordAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AccountAdminApi->ResetUserPassword");

            var localVarPath = "/v3/users/{user-id}/reset-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Set aliases. Defines aliases of the account and overwrites the previous set of aliases.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">A list of aliases to be set.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse SetAliases (string accountID, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = SetAliasesWithHttpInfo(accountID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set aliases. Defines aliases of the account and overwrites the previous set of aliases.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">A list of aliases to be set.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > SetAliasesWithHttpInfo (string accountID, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AccountAdminApi->SetAliases");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->SetAliases");

            var localVarPath = "/v3/accounts/{accountID}/alias";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Set aliases. Defines aliases of the account and overwrites the previous set of aliases.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">A list of aliases to be set.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> SetAliasesAsync (string accountID, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await SetAliasesAsyncWithHttpInfo(accountID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set aliases. Defines aliases of the account and overwrites the previous set of aliases.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">A list of aliases to be set.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> SetAliasesAsyncWithHttpInfo (string accountID, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AccountAdminApi->SetAliases");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->SetAliases");

            var localVarPath = "/v3/accounts/{accountID}/alias";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>AccountInfo</returns>
        public AccountInfo UpdateAccount (string accountID, AccountUpdateRootReq body)
        {
             ApiResponse<AccountInfo> localVarResponse = UpdateAccountWithHttpInfo(accountID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        public ApiResponse< AccountInfo > UpdateAccountWithHttpInfo (string accountID, AccountUpdateRootReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AccountAdminApi->UpdateAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->UpdateAccount");

            var localVarPath = "/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
            
        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of AccountInfo</returns>
        public async System.Threading.Tasks.Task<AccountInfo> UpdateAccountAsync (string accountID, AccountUpdateRootReq body)
        {
             ApiResponse<AccountInfo> localVarResponse = await UpdateAccountAsyncWithHttpInfo(accountID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfo>> UpdateAccountAsyncWithHttpInfo (string accountID, AccountUpdateRootReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AccountAdminApi->UpdateAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->UpdateAccount");

            var localVarPath = "/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
            
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>TrustedCertificateResp</returns>
        public TrustedCertificateResp UpdateCertificate (string certId, TrustedCertificateReq body)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = UpdateCertificateWithHttpInfo(certId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        public ApiResponse< TrustedCertificateResp > UpdateCertificateWithHttpInfo (string certId, TrustedCertificateReq body)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AccountAdminApi->UpdateCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->UpdateCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateResp> UpdateCertificateAsync (string certId, TrustedCertificateReq body)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = await UpdateCertificateAsyncWithHttpInfo(certId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> UpdateCertificateAsyncWithHttpInfo (string certId, TrustedCertificateReq body)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AccountAdminApi->UpdateCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->UpdateCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose details are updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp UpdateUser (string userId, UserUpdateReq body)
        {
             ApiResponse<UserInfoResp> localVarResponse = UpdateUserWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose details are updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > UpdateUserWithHttpInfo (string userId, UserUpdateReq body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AccountAdminApi->UpdateUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->UpdateUser");

            var localVarPath = "/v3/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose details are updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> UpdateUserAsync (string userId, UserUpdateReq body)
        {
             ApiResponse<UserInfoResp> localVarResponse = await UpdateUserAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user whose details are updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> UpdateUserAsyncWithHttpInfo (string userId, UserUpdateReq body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AccountAdminApi->UpdateUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AccountAdminApi->UpdateUser");

            var localVarPath = "/v3/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

    }
}
