/* 
 * <auto-generated>
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using iam.Client;
using iam.Model;

namespace iam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeveloperApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key.   **Example usage:** curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d &#39;{\&quot;name\&quot;: \&quot;MyKey1\&quot;,\&quot;owner\&quot;: \&quot;ACCOUNT_ID\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The details of the API key to be created.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp CreateApiKey (ApiKeyInfoReq body);

        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key.   **Example usage:** curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d &#39;{\&quot;name\&quot;: \&quot;MyKey1\&quot;,\&quot;owner\&quot;: \&quot;ACCOUNT_ID\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The details of the API key to be created.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> CreateApiKeyWithHttpInfo (ApiKeyInfoReq body);
        /// <summary>
        /// Delete API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the API key.   **Example usage:** curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns></returns>
        void DeleteApiKey (string apiKey);

        /// <summary>
        /// Delete API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the API key.   **Example usage:** curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApiKeyWithHttpInfo (string apiKey);
        /// <summary>
        /// Delete a trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns></returns>
        void DeleteCertificate (string certId);

        /// <summary>
        /// Delete a trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCertificateWithHttpInfo (string certId);
        /// <summary>
        /// Get all API keys
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        ApiKeyInfoRespList GetAllApiKeys (int? limit = null, string after = null, string order = null, string include = null, string ownerEq = null);

        /// <summary>
        /// Get all API keys
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        ApiResponse<ApiKeyInfoRespList> GetAllApiKeysWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string ownerEq = null);
        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <param name="ownerEq">Owner ID filter (optional)</param>
        /// <returns>TrustedCertificateRespList</returns>
        TrustedCertificateRespList GetAllCertificates (int? limit = null, string after = null, string order = null, string include = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, string ownerEq = null);

        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <param name="ownerEq">Owner ID filter (optional)</param>
        /// <returns>ApiResponse of TrustedCertificateRespList</returns>
        ApiResponse<TrustedCertificateRespList> GetAllCertificatesWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, string ownerEq = null);
        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>GroupSummaryList</returns>
        GroupSummaryList GetAllGroups (int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of GroupSummaryList</returns>
        ApiResponse<GroupSummaryList> GetAllGroupsWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp GetApiKey (string apiKey);

        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> GetApiKeyWithHttpInfo (string apiKey);
        /// <summary>
        /// Get the API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        ApiKeyInfoRespList GetApiKeysOfGroup (string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get the API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        ApiResponse<ApiKeyInfoRespList> GetApiKeysOfGroupWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>TrustedCertificateResp</returns>
        TrustedCertificateResp GetCertificate (string certId);

        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        ApiResponse<TrustedCertificateResp> GetCertificateWithHttpInfo (string certId);
        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>GroupSummary</returns>
        GroupSummary GetGroupSummary (string groupID);

        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        ApiResponse<GroupSummary> GetGroupSummaryWithHttpInfo (string groupID);
        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include&#x3D;policies -H &#39;Authorization: Bearer AUTH_TOKEN&#39; .
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts. (optional)</param>
        /// <returns>AccountInfo</returns>
        AccountInfo GetMyAccountInfo (string include = null);

        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include&#x3D;policies -H &#39;Authorization: Bearer AUTH_TOKEN&#39; .
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts. (optional)</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        ApiResponse<AccountInfo> GetMyAccountInfoWithHttpInfo (string include = null);
        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp GetMyApiKey ();

        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> GetMyApiKeyWithHttpInfo ();
        /// <summary>
        /// Details of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of the logged in user.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/users/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <returns>MyUserInfoResp</returns>
        MyUserInfoResp GetMyUser (string scratchCodes = null);

        /// <summary>
        /// Details of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of the logged in user.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/users/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <returns>ApiResponse of MyUserInfoResp</returns>
        ApiResponse<MyUserInfoResp> GetMyUserWithHttpInfo (string scratchCodes = null);
        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse RemoveApiKeysFromGroup (string groupID, SubjectList body);

        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> RemoveApiKeysFromGroupWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp UpdateApiKey (string apiKey, ApiKeyUpdateReq body);

        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> UpdateApiKeyWithHttpInfo (string apiKey, ApiKeyUpdateReq body);
        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\&quot;description\&quot;: \&quot;very important cert\&quot;} -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>TrustedCertificateResp</returns>
        TrustedCertificateResp UpdateCertificate (string certId, TrustedCertificateUpdateReq body);

        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\&quot;description\&quot;: \&quot;very important cert\&quot;} -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        ApiResponse<TrustedCertificateResp> UpdateCertificateWithHttpInfo (string certId, TrustedCertificateUpdateReq body);
        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d &#39;{\&quot;name\&quot;: \&quot;TestApiKey25\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp UpdateMyApiKey (ApiKeyUpdateReq body);

        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d &#39;{\&quot;name\&quot;: \&quot;TestApiKey25\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> UpdateMyApiKeyWithHttpInfo (ApiKeyUpdateReq body);
        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating the details of the logged in user.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/me -d &#39;{\&quot;address\&quot;: \&quot;1007 Mountain Drive\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>UserUpdateResp</returns>
        UserUpdateResp UpdateMyUser (UserUpdateReq body);

        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating the details of the logged in user.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/me -d &#39;{\&quot;address\&quot;: \&quot;1007 Mountain Drive\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>ApiResponse of UserUpdateResp</returns>
        ApiResponse<UserUpdateResp> UpdateMyUserWithHttpInfo (UserUpdateReq body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key.   **Example usage:** curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d &#39;{\&quot;name\&quot;: \&quot;MyKey1\&quot;,\&quot;owner\&quot;: \&quot;ACCOUNT_ID\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The details of the API key to be created.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> CreateApiKeyAsync (ApiKeyInfoReq body);

        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key.   **Example usage:** curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d &#39;{\&quot;name\&quot;: \&quot;MyKey1\&quot;,\&quot;owner\&quot;: \&quot;ACCOUNT_ID\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The details of the API key to be created.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> CreateApiKeyAsyncWithHttpInfo (ApiKeyInfoReq body);
        /// <summary>
        /// Delete API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the API key.   **Example usage:** curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApiKeyAsync (string apiKey);

        /// <summary>
        /// Delete API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the API key.   **Example usage:** curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiKeyAsyncWithHttpInfo (string apiKey);
        /// <summary>
        /// Delete a trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCertificateAsync (string certId);

        /// <summary>
        /// Delete a trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCertificateAsyncWithHttpInfo (string certId);
        /// <summary>
        /// Get all API keys
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        System.Threading.Tasks.Task<ApiKeyInfoRespList> GetAllApiKeysAsync (int? limit = null, string after = null, string order = null, string include = null, string ownerEq = null);

        /// <summary>
        /// Get all API keys
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetAllApiKeysAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string ownerEq = null);
        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <param name="ownerEq">Owner ID filter (optional)</param>
        /// <returns>Task of TrustedCertificateRespList</returns>
        System.Threading.Tasks.Task<TrustedCertificateRespList> GetAllCertificatesAsync (int? limit = null, string after = null, string order = null, string include = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, string ownerEq = null);

        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <param name="ownerEq">Owner ID filter (optional)</param>
        /// <returns>Task of ApiResponse (TrustedCertificateRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateRespList>> GetAllCertificatesAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, string ownerEq = null);
        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of GroupSummaryList</returns>
        System.Threading.Tasks.Task<GroupSummaryList> GetAllGroupsAsync (int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummaryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummaryList>> GetAllGroupsAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> GetApiKeyAsync (string apiKey);

        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> GetApiKeyAsyncWithHttpInfo (string apiKey);
        /// <summary>
        /// Get the API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        System.Threading.Tasks.Task<ApiKeyInfoRespList> GetApiKeysOfGroupAsync (string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get the API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetApiKeysOfGroupAsyncWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateResp> GetCertificateAsync (string certId);

        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> GetCertificateAsyncWithHttpInfo (string certId);
        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of GroupSummary</returns>
        System.Threading.Tasks.Task<GroupSummary> GetGroupSummaryAsync (string groupID);

        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GetGroupSummaryAsyncWithHttpInfo (string groupID);
        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include&#x3D;policies -H &#39;Authorization: Bearer AUTH_TOKEN&#39; .
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts. (optional)</param>
        /// <returns>Task of AccountInfo</returns>
        System.Threading.Tasks.Task<AccountInfo> GetMyAccountInfoAsync (string include = null);

        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include&#x3D;policies -H &#39;Authorization: Bearer AUTH_TOKEN&#39; .
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfo>> GetMyAccountInfoAsyncWithHttpInfo (string include = null);
        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> GetMyApiKeyAsync ();

        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> GetMyApiKeyAsyncWithHttpInfo ();
        /// <summary>
        /// Details of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of the logged in user.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/users/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <returns>Task of MyUserInfoResp</returns>
        System.Threading.Tasks.Task<MyUserInfoResp> GetMyUserAsync (string scratchCodes = null);

        /// <summary>
        /// Details of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of the logged in user.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/users/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <returns>Task of ApiResponse (MyUserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<MyUserInfoResp>> GetMyUserAsyncWithHttpInfo (string scratchCodes = null);
        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> RemoveApiKeysFromGroupAsync (string groupID, SubjectList body);

        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveApiKeysFromGroupAsyncWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> UpdateApiKeyAsync (string apiKey, ApiKeyUpdateReq body);

        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> UpdateApiKeyAsyncWithHttpInfo (string apiKey, ApiKeyUpdateReq body);
        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\&quot;description\&quot;: \&quot;very important cert\&quot;} -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateResp> UpdateCertificateAsync (string certId, TrustedCertificateUpdateReq body);

        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\&quot;description\&quot;: \&quot;very important cert\&quot;} -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> UpdateCertificateAsyncWithHttpInfo (string certId, TrustedCertificateUpdateReq body);
        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d &#39;{\&quot;name\&quot;: \&quot;TestApiKey25\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> UpdateMyApiKeyAsync (ApiKeyUpdateReq body);

        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d &#39;{\&quot;name\&quot;: \&quot;TestApiKey25\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> UpdateMyApiKeyAsyncWithHttpInfo (ApiKeyUpdateReq body);
        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating the details of the logged in user.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/me -d &#39;{\&quot;address\&quot;: \&quot;1007 Mountain Drive\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>Task of UserUpdateResp</returns>
        System.Threading.Tasks.Task<UserUpdateResp> UpdateMyUserAsync (UserUpdateReq body);

        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating the details of the logged in user.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/me -d &#39;{\&quot;address\&quot;: \&quot;1007 Mountain Drive\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>Task of ApiResponse (UserUpdateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserUpdateResp>> UpdateMyUserAsyncWithHttpInfo (UserUpdateReq body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeveloperApi : IDeveloperApi
    {
        private iam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeveloperApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeveloperApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeveloperApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeveloperApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public iam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key.   **Example usage:** curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d &#39;{\&quot;name\&quot;: \&quot;MyKey1\&quot;,\&quot;owner\&quot;: \&quot;ACCOUNT_ID\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The details of the API key to be created.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp CreateApiKey (ApiKeyInfoReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = CreateApiKeyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key.   **Example usage:** curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d &#39;{\&quot;name\&quot;: \&quot;MyKey1\&quot;,\&quot;owner\&quot;: \&quot;ACCOUNT_ID\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The details of the API key to be created.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > CreateApiKeyWithHttpInfo (ApiKeyInfoReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->CreateApiKey");

            var localVarPath = "/v3/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key.   **Example usage:** curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d &#39;{\&quot;name\&quot;: \&quot;MyKey1\&quot;,\&quot;owner\&quot;: \&quot;ACCOUNT_ID\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The details of the API key to be created.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> CreateApiKeyAsync (ApiKeyInfoReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await CreateApiKeyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key.   **Example usage:** curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d &#39;{\&quot;name\&quot;: \&quot;MyKey1\&quot;,\&quot;owner\&quot;: \&quot;ACCOUNT_ID\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The details of the API key to be created.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> CreateApiKeyAsyncWithHttpInfo (ApiKeyInfoReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->CreateApiKey");

            var localVarPath = "/v3/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Delete API key. An endpoint for deleting the API key.   **Example usage:** curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns></returns>
        public void DeleteApiKey (string apiKey)
        {
             DeleteApiKeyWithHttpInfo(apiKey);
        }

        /// <summary>
        /// Delete API key. An endpoint for deleting the API key.   **Example usage:** curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApiKeyWithHttpInfo (string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling DeveloperApi->DeleteApiKey");

            var localVarPath = "/v3/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete API key. An endpoint for deleting the API key.   **Example usage:** curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApiKeyAsync (string apiKey)
        {
             await DeleteApiKeyAsyncWithHttpInfo(apiKey);

        }

        /// <summary>
        /// Delete API key. An endpoint for deleting the API key.   **Example usage:** curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApiKeyAsyncWithHttpInfo (string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling DeveloperApi->DeleteApiKey");

            var localVarPath = "/v3/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a trusted certificate by ID. An endpoint for deleting a trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns></returns>
        public void DeleteCertificate (string certId)
        {
             DeleteCertificateWithHttpInfo(certId);
        }

        /// <summary>
        /// Delete a trusted certificate by ID. An endpoint for deleting a trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCertificateWithHttpInfo (string certId)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling DeveloperApi->DeleteCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a trusted certificate by ID. An endpoint for deleting a trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCertificateAsync (string certId)
        {
             await DeleteCertificateAsyncWithHttpInfo(certId);

        }

        /// <summary>
        /// Delete a trusted certificate by ID. An endpoint for deleting a trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCertificateAsyncWithHttpInfo (string certId)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling DeveloperApi->DeleteCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all API keys An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        public ApiKeyInfoRespList GetAllApiKeys (int? limit = null, string after = null, string order = null, string include = null, string ownerEq = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = GetAllApiKeysWithHttpInfo(limit, after, order, include, ownerEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all API keys An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        public ApiResponse< ApiKeyInfoRespList > GetAllApiKeysWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string ownerEq = null)
        {

            var localVarPath = "/v3/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (ownerEq != null) localVarQueryParams.Add("owner__eq", Configuration.ApiClient.ParameterToString(ownerEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get all API keys An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoRespList> GetAllApiKeysAsync (int? limit = null, string after = null, string order = null, string include = null, string ownerEq = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = await GetAllApiKeysAsyncWithHttpInfo(limit, after, order, include, ownerEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all API keys An endpoint for retrieving API keys in an array, optionally filtered by the owner.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetAllApiKeysAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string ownerEq = null)
        {

            var localVarPath = "/v3/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (ownerEq != null) localVarQueryParams.Add("owner__eq", Configuration.ApiClient.ParameterToString(ownerEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <param name="ownerEq">Owner ID filter (optional)</param>
        /// <returns>TrustedCertificateRespList</returns>
        public TrustedCertificateRespList GetAllCertificates (int? limit = null, string after = null, string order = null, string include = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, string ownerEq = null)
        {
             ApiResponse<TrustedCertificateRespList> localVarResponse = GetAllCertificatesWithHttpInfo(limit, after, order, include, serviceEq, expireEq, deviceExecutionModeEq, ownerEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <param name="ownerEq">Owner ID filter (optional)</param>
        /// <returns>ApiResponse of TrustedCertificateRespList</returns>
        public ApiResponse< TrustedCertificateRespList > GetAllCertificatesWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, string ownerEq = null)
        {

            var localVarPath = "/v3/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (serviceEq != null) localVarQueryParams.Add("service__eq", Configuration.ApiClient.ParameterToString(serviceEq)); // query parameter
            if (expireEq != null) localVarQueryParams.Add("expire__eq", Configuration.ApiClient.ParameterToString(expireEq)); // query parameter
            if (deviceExecutionModeEq != null) localVarQueryParams.Add("device_execution_mode__eq", Configuration.ApiClient.ParameterToString(deviceExecutionModeEq)); // query parameter
            if (ownerEq != null) localVarQueryParams.Add("owner__eq", Configuration.ApiClient.ParameterToString(ownerEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateRespList)));
            
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <param name="ownerEq">Owner ID filter (optional)</param>
        /// <returns>Task of TrustedCertificateRespList</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateRespList> GetAllCertificatesAsync (int? limit = null, string after = null, string order = null, string include = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, string ownerEq = null)
        {
             ApiResponse<TrustedCertificateRespList> localVarResponse = await GetAllCertificatesAsyncWithHttpInfo(limit, after, order, include, serviceEq, expireEq, deviceExecutionModeEq, ownerEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="serviceEq">Service filter, either lwm2m or bootstrap (optional)</param>
        /// <param name="expireEq">Expire filter in days (optional)</param>
        /// <param name="deviceExecutionModeEq">Device execution mode, as 1 for developer certificates or as another natural integer value (optional)</param>
        /// <param name="ownerEq">Owner ID filter (optional)</param>
        /// <returns>Task of ApiResponse (TrustedCertificateRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateRespList>> GetAllCertificatesAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, string ownerEq = null)
        {

            var localVarPath = "/v3/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (serviceEq != null) localVarQueryParams.Add("service__eq", Configuration.ApiClient.ParameterToString(serviceEq)); // query parameter
            if (expireEq != null) localVarQueryParams.Add("expire__eq", Configuration.ApiClient.ParameterToString(expireEq)); // query parameter
            if (deviceExecutionModeEq != null) localVarQueryParams.Add("device_execution_mode__eq", Configuration.ApiClient.ParameterToString(deviceExecutionModeEq)); // query parameter
            if (ownerEq != null) localVarQueryParams.Add("owner__eq", Configuration.ApiClient.ParameterToString(ownerEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateRespList)));
            
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>GroupSummaryList</returns>
        public GroupSummaryList GetAllGroups (int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<GroupSummaryList> localVarResponse = GetAllGroupsWithHttpInfo(limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of GroupSummaryList</returns>
        public ApiResponse< GroupSummaryList > GetAllGroupsWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null)
        {

            var localVarPath = "/v3/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummaryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummaryList)));
            
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of GroupSummaryList</returns>
        public async System.Threading.Tasks.Task<GroupSummaryList> GetAllGroupsAsync (int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<GroupSummaryList> localVarResponse = await GetAllGroupsAsyncWithHttpInfo(limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummaryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummaryList>> GetAllGroupsAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null)
        {

            var localVarPath = "/v3/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummaryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummaryList)));
            
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp GetApiKey (string apiKey)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = GetApiKeyWithHttpInfo(apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > GetApiKeyWithHttpInfo (string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling DeveloperApi->GetApiKey");

            var localVarPath = "/v3/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> GetApiKeyAsync (string apiKey)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await GetApiKeyAsyncWithHttpInfo(apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> GetApiKeyAsyncWithHttpInfo (string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling DeveloperApi->GetApiKey");

            var localVarPath = "/v3/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Get the API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        public ApiKeyInfoRespList GetApiKeysOfGroup (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = GetApiKeysOfGroupWithHttpInfo(groupID, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        public ApiResponse< ApiKeyInfoRespList > GetApiKeysOfGroupWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->GetApiKeysOfGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiKeysOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get the API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoRespList> GetApiKeysOfGroupAsync (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = await GetApiKeysOfGroupAsyncWithHttpInfo(groupID, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetApiKeysOfGroupAsyncWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->GetApiKeysOfGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiKeysOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>TrustedCertificateResp</returns>
        public TrustedCertificateResp GetCertificate (string certId)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = GetCertificateWithHttpInfo(certId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        public ApiResponse< TrustedCertificateResp > GetCertificateWithHttpInfo (string certId)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling DeveloperApi->GetCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateResp> GetCertificateAsync (string certId)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = await GetCertificateAsyncWithHttpInfo(certId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> GetCertificateAsyncWithHttpInfo (string certId)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling DeveloperApi->GetCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>GroupSummary</returns>
        public GroupSummary GetGroupSummary (string groupID)
        {
             ApiResponse<GroupSummary> localVarResponse = GetGroupSummaryWithHttpInfo(groupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        public ApiResponse< GroupSummary > GetGroupSummaryWithHttpInfo (string groupID)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->GetGroupSummary");

            var localVarPath = "/v3/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
            
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of GroupSummary</returns>
        public async System.Threading.Tasks.Task<GroupSummary> GetGroupSummaryAsync (string groupID)
        {
             ApiResponse<GroupSummary> localVarResponse = await GetGroupSummaryAsyncWithHttpInfo(groupID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GetGroupSummaryAsyncWithHttpInfo (string groupID)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->GetGroupSummary");

            var localVarPath = "/v3/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
            
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include&#x3D;policies -H &#39;Authorization: Bearer AUTH_TOKEN&#39; .
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts. (optional)</param>
        /// <returns>AccountInfo</returns>
        public AccountInfo GetMyAccountInfo (string include = null)
        {
             ApiResponse<AccountInfo> localVarResponse = GetMyAccountInfoWithHttpInfo(include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include&#x3D;policies -H &#39;Authorization: Bearer AUTH_TOKEN&#39; .
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts. (optional)</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        public ApiResponse< AccountInfo > GetMyAccountInfoWithHttpInfo (string include = null)
        {

            var localVarPath = "/v3/accounts/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
            
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include&#x3D;policies -H &#39;Authorization: Bearer AUTH_TOKEN&#39; .
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts. (optional)</param>
        /// <returns>Task of AccountInfo</returns>
        public async System.Threading.Tasks.Task<AccountInfo> GetMyAccountInfoAsync (string include = null)
        {
             ApiResponse<AccountInfo> localVarResponse = await GetMyAccountInfoAsyncWithHttpInfo(include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/accounts/me?include&#x3D;policies -H &#39;Authorization: Bearer AUTH_TOKEN&#39; .
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfo>> GetMyAccountInfoAsyncWithHttpInfo (string include = null)
        {

            var localVarPath = "/v3/accounts/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
            
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp GetMyApiKey ()
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = GetMyApiKeyWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > GetMyApiKeyWithHttpInfo ()
        {

            var localVarPath = "/v3/api-keys/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> GetMyApiKeyAsync ()
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await GetMyApiKeyAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/api-keys/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> GetMyApiKeyAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/api-keys/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Details of the current user. An endpoint for retrieving the details of the logged in user.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/users/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <returns>MyUserInfoResp</returns>
        public MyUserInfoResp GetMyUser (string scratchCodes = null)
        {
             ApiResponse<MyUserInfoResp> localVarResponse = GetMyUserWithHttpInfo(scratchCodes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Details of the current user. An endpoint for retrieving the details of the logged in user.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/users/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <returns>ApiResponse of MyUserInfoResp</returns>
        public ApiResponse< MyUserInfoResp > GetMyUserWithHttpInfo (string scratchCodes = null)
        {

            var localVarPath = "/v3/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (scratchCodes != null) localVarQueryParams.Add("scratch_codes", Configuration.ApiClient.ParameterToString(scratchCodes)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyUserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MyUserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyUserInfoResp)));
            
        }

        /// <summary>
        /// Details of the current user. An endpoint for retrieving the details of the logged in user.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/users/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <returns>Task of MyUserInfoResp</returns>
        public async System.Threading.Tasks.Task<MyUserInfoResp> GetMyUserAsync (string scratchCodes = null)
        {
             ApiResponse<MyUserInfoResp> localVarResponse = await GetMyUserAsyncWithHttpInfo(scratchCodes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Details of the current user. An endpoint for retrieving the details of the logged in user.   **Example usage:** curl https://api.us-east-1.mbedcloud.com/v3/users/me -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <returns>Task of ApiResponse (MyUserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MyUserInfoResp>> GetMyUserAsyncWithHttpInfo (string scratchCodes = null)
        {

            var localVarPath = "/v3/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (scratchCodes != null) localVarQueryParams.Add("scratch_codes", Configuration.ApiClient.ParameterToString(scratchCodes)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyUserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MyUserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyUserInfoResp)));
            
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse RemoveApiKeysFromGroup (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = RemoveApiKeysFromGroupWithHttpInfo(groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > RemoveApiKeysFromGroupWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->RemoveApiKeysFromGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->RemoveApiKeysFromGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveApiKeysFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> RemoveApiKeysFromGroupAsync (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await RemoveApiKeysFromGroupAsyncWithHttpInfo(groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveApiKeysFromGroupAsyncWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->RemoveApiKeysFromGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->RemoveApiKeysFromGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveApiKeysFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp UpdateApiKey (string apiKey, ApiKeyUpdateReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = UpdateApiKeyWithHttpInfo(apiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > UpdateApiKeyWithHttpInfo (string apiKey, ApiKeyUpdateReq body)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling DeveloperApi->UpdateApiKey");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->UpdateApiKey");

            var localVarPath = "/v3/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> UpdateApiKeyAsync (string apiKey, ApiKeyUpdateReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await UpdateApiKeyAsyncWithHttpInfo(apiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> UpdateApiKeyAsyncWithHttpInfo (string apiKey, ApiKeyUpdateReq body)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling DeveloperApi->UpdateApiKey");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->UpdateApiKey");

            var localVarPath = "/v3/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\&quot;description\&quot;: \&quot;very important cert\&quot;} -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>TrustedCertificateResp</returns>
        public TrustedCertificateResp UpdateCertificate (string certId, TrustedCertificateUpdateReq body)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = UpdateCertificateWithHttpInfo(certId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\&quot;description\&quot;: \&quot;very important cert\&quot;} -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        public ApiResponse< TrustedCertificateResp > UpdateCertificateWithHttpInfo (string certId, TrustedCertificateUpdateReq body)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling DeveloperApi->UpdateCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->UpdateCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\&quot;description\&quot;: \&quot;very important cert\&quot;} -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateResp> UpdateCertificateAsync (string certId, TrustedCertificateUpdateReq body)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = await UpdateCertificateAsyncWithHttpInfo(certId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert-id} -d {\&quot;description\&quot;: \&quot;very important cert\&quot;} -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> UpdateCertificateAsyncWithHttpInfo (string certId, TrustedCertificateUpdateReq body)
        {
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling DeveloperApi->UpdateCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->UpdateCertificate");

            var localVarPath = "/v3/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d &#39;{\&quot;name\&quot;: \&quot;TestApiKey25\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp UpdateMyApiKey (ApiKeyUpdateReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = UpdateMyApiKeyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d &#39;{\&quot;name\&quot;: \&quot;TestApiKey25\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > UpdateMyApiKeyWithHttpInfo (ApiKeyUpdateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->UpdateMyApiKey");

            var localVarPath = "/v3/api-keys/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMyApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d &#39;{\&quot;name\&quot;: \&quot;TestApiKey25\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> UpdateMyApiKeyAsync (ApiKeyUpdateReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await UpdateMyApiKeyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me -d &#39;{\&quot;name\&quot;: \&quot;TestApiKey25\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39;
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> UpdateMyApiKeyAsyncWithHttpInfo (ApiKeyUpdateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->UpdateMyApiKey");

            var localVarPath = "/v3/api-keys/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMyApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Update user details. An endpoint for updating the details of the logged in user.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/me -d &#39;{\&quot;address\&quot;: \&quot;1007 Mountain Drive\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>UserUpdateResp</returns>
        public UserUpdateResp UpdateMyUser (UserUpdateReq body)
        {
             ApiResponse<UserUpdateResp> localVarResponse = UpdateMyUserWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user details. An endpoint for updating the details of the logged in user.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/me -d &#39;{\&quot;address\&quot;: \&quot;1007 Mountain Drive\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>ApiResponse of UserUpdateResp</returns>
        public ApiResponse< UserUpdateResp > UpdateMyUserWithHttpInfo (UserUpdateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->UpdateMyUser");

            var localVarPath = "/v3/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMyUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserUpdateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserUpdateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserUpdateResp)));
            
        }

        /// <summary>
        /// Update user details. An endpoint for updating the details of the logged in user.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/me -d &#39;{\&quot;address\&quot;: \&quot;1007 Mountain Drive\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>Task of UserUpdateResp</returns>
        public async System.Threading.Tasks.Task<UserUpdateResp> UpdateMyUserAsync (UserUpdateReq body)
        {
             ApiResponse<UserUpdateResp> localVarResponse = await UpdateMyUserAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user details. An endpoint for updating the details of the logged in user.   **Example usage:** curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/me -d &#39;{\&quot;address\&quot;: \&quot;1007 Mountain Drive\&quot;}&#39; -H &#39;content-type: application/json&#39; -H &#39;Authorization: Bearer AUTH_TOKEN&#39; 
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>Task of ApiResponse (UserUpdateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserUpdateResp>> UpdateMyUserAsyncWithHttpInfo (UserUpdateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->UpdateMyUser");

            var localVarPath = "/v3/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMyUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserUpdateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserUpdateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserUpdateResp)));
            
        }

    }
}
