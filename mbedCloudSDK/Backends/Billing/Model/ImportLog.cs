/* 
 * mbed-billing REST API documentation for API-server
 *
 * This document contains the public REST API definitions of the mbed-billing service's API server component.
 *
 * OpenAPI spec version: 1.3.5-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace billing.Model
{
    /// <summary>
    /// ImportLog
    /// </summary>
    [DataContract]
    public partial class ImportLog :  IEquatable<ImportLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportLog" /> class.
        /// </summary>
        /// <param name="ImportId">ImportId (required).</param>
        /// <param name="BootstrapCount">BootstrapCount.</param>
        /// <param name="From">From (required).</param>
        /// <param name="Service">Service (required).</param>
        /// <param name="Timestamp">Timestamp (required).</param>
        /// <param name="TransactionCount">TransactionCount.</param>
        /// <param name="DeviceCount">DeviceCount.</param>
        /// <param name="To">To (required).</param>
        /// <param name="FirmwareUpdateCount">FirmwareUpdateCount.</param>
        public ImportLog(long? ImportId = default(long?), long? BootstrapCount = default(long?), long? From = default(long?), string Service = default(string), long? Timestamp = default(long?), long? TransactionCount = default(long?), long? DeviceCount = default(long?), long? To = default(long?), long? FirmwareUpdateCount = default(long?))
        {
            // to ensure "ImportId" is required (not null)
            if (ImportId == null)
            {
                throw new InvalidDataException("ImportId is a required property for ImportLog and cannot be null");
            }
            else
            {
                this.ImportId = ImportId;
            }
            // to ensure "From" is required (not null)
            if (From == null)
            {
                throw new InvalidDataException("From is a required property for ImportLog and cannot be null");
            }
            else
            {
                this.From = From;
            }
            // to ensure "Service" is required (not null)
            if (Service == null)
            {
                throw new InvalidDataException("Service is a required property for ImportLog and cannot be null");
            }
            else
            {
                this.Service = Service;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for ImportLog and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            // to ensure "To" is required (not null)
            if (To == null)
            {
                throw new InvalidDataException("To is a required property for ImportLog and cannot be null");
            }
            else
            {
                this.To = To;
            }
            this.BootstrapCount = BootstrapCount;
            this.TransactionCount = TransactionCount;
            this.DeviceCount = DeviceCount;
            this.FirmwareUpdateCount = FirmwareUpdateCount;
        }
        
        /// <summary>
        /// Gets or Sets ImportId
        /// </summary>
        [DataMember(Name="import_id", EmitDefaultValue=false)]
        public long? ImportId { get; set; }
        /// <summary>
        /// Gets or Sets BootstrapCount
        /// </summary>
        [DataMember(Name="bootstrap_count", EmitDefaultValue=false)]
        public long? BootstrapCount { get; set; }
        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public long? From { get; set; }
        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public string Service { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets TransactionCount
        /// </summary>
        [DataMember(Name="transaction_count", EmitDefaultValue=false)]
        public long? TransactionCount { get; set; }
        /// <summary>
        /// Gets or Sets DeviceCount
        /// </summary>
        [DataMember(Name="device_count", EmitDefaultValue=false)]
        public long? DeviceCount { get; set; }
        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public long? To { get; set; }
        /// <summary>
        /// Gets or Sets FirmwareUpdateCount
        /// </summary>
        [DataMember(Name="firmware_update_count", EmitDefaultValue=false)]
        public long? FirmwareUpdateCount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportLog {\n");
            sb.Append("  ImportId: ").Append(ImportId).Append("\n");
            sb.Append("  BootstrapCount: ").Append(BootstrapCount).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TransactionCount: ").Append(TransactionCount).Append("\n");
            sb.Append("  DeviceCount: ").Append(DeviceCount).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  FirmwareUpdateCount: ").Append(FirmwareUpdateCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ImportLog);
        }

        /// <summary>
        /// Returns true if ImportLog instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportLog other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ImportId == other.ImportId ||
                    this.ImportId != null &&
                    this.ImportId.Equals(other.ImportId)
                ) && 
                (
                    this.BootstrapCount == other.BootstrapCount ||
                    this.BootstrapCount != null &&
                    this.BootstrapCount.Equals(other.BootstrapCount)
                ) && 
                (
                    this.From == other.From ||
                    this.From != null &&
                    this.From.Equals(other.From)
                ) && 
                (
                    this.Service == other.Service ||
                    this.Service != null &&
                    this.Service.Equals(other.Service)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.TransactionCount == other.TransactionCount ||
                    this.TransactionCount != null &&
                    this.TransactionCount.Equals(other.TransactionCount)
                ) && 
                (
                    this.DeviceCount == other.DeviceCount ||
                    this.DeviceCount != null &&
                    this.DeviceCount.Equals(other.DeviceCount)
                ) && 
                (
                    this.To == other.To ||
                    this.To != null &&
                    this.To.Equals(other.To)
                ) && 
                (
                    this.FirmwareUpdateCount == other.FirmwareUpdateCount ||
                    this.FirmwareUpdateCount != null &&
                    this.FirmwareUpdateCount.Equals(other.FirmwareUpdateCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ImportId != null)
                    hash = hash * 59 + this.ImportId.GetHashCode();
                if (this.BootstrapCount != null)
                    hash = hash * 59 + this.BootstrapCount.GetHashCode();
                if (this.From != null)
                    hash = hash * 59 + this.From.GetHashCode();
                if (this.Service != null)
                    hash = hash * 59 + this.Service.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.TransactionCount != null)
                    hash = hash * 59 + this.TransactionCount.GetHashCode();
                if (this.DeviceCount != null)
                    hash = hash * 59 + this.DeviceCount.GetHashCode();
                if (this.To != null)
                    hash = hash * 59 + this.To.GetHashCode();
                if (this.FirmwareUpdateCount != null)
                    hash = hash * 59 + this.FirmwareUpdateCount.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
