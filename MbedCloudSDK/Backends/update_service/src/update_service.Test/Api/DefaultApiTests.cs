/* 
 * <auto-generated>
 * Update Service API
 *
 * This is the API documentation for the Mbed deployment service, which is part of the update service.
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using update_service.Client;
using update_service.Api;
using update_service.Model;

namespace update_service.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test FirmwareImageCreate
        /// </summary>
        [Test]
        public void FirmwareImageCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream datafile = null;
            //string name = null;
            //string description = null;
            //var response = instance.FirmwareImageCreate(datafile, name, description);
            //Assert.IsInstanceOf<FirmwareImage> (response, "response is FirmwareImage");
        }
        
        /// <summary>
        /// Test FirmwareImageDestroy
        /// </summary>
        [Test]
        public void FirmwareImageDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string imageId = null;
            //instance.FirmwareImageDestroy(imageId);
            
        }
        
        /// <summary>
        /// Test FirmwareImageList
        /// </summary>
        [Test]
        public void FirmwareImageListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string filter = null;
            //string include = null;
            //var response = instance.FirmwareImageList(limit, order, after, filter, include);
            //Assert.IsInstanceOf<FirmwareImagePage> (response, "response is FirmwareImagePage");
        }
        
        /// <summary>
        /// Test FirmwareImageRetrieve
        /// </summary>
        [Test]
        public void FirmwareImageRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string imageId = null;
            //var response = instance.FirmwareImageRetrieve(imageId);
            //Assert.IsInstanceOf<FirmwareImage> (response, "response is FirmwareImage");
        }
        
        /// <summary>
        /// Test FirmwareManifestCreate
        /// </summary>
        [Test]
        public void FirmwareManifestCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream datafile = null;
            //string name = null;
            //string description = null;
            //var response = instance.FirmwareManifestCreate(datafile, name, description);
            //Assert.IsInstanceOf<FirmwareManifest> (response, "response is FirmwareManifest");
        }
        
        /// <summary>
        /// Test FirmwareManifestDestroy
        /// </summary>
        [Test]
        public void FirmwareManifestDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string manifestId = null;
            //instance.FirmwareManifestDestroy(manifestId);
            
        }
        
        /// <summary>
        /// Test FirmwareManifestList
        /// </summary>
        [Test]
        public void FirmwareManifestListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string filter = null;
            //string include = null;
            //var response = instance.FirmwareManifestList(limit, order, after, filter, include);
            //Assert.IsInstanceOf<FirmwareManifestPage> (response, "response is FirmwareManifestPage");
        }
        
        /// <summary>
        /// Test FirmwareManifestRetrieve
        /// </summary>
        [Test]
        public void FirmwareManifestRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string manifestId = null;
            //var response = instance.FirmwareManifestRetrieve(manifestId);
            //Assert.IsInstanceOf<FirmwareManifest> (response, "response is FirmwareManifest");
        }
        
        /// <summary>
        /// Test UpdateCampaignCreate
        /// </summary>
        [Test]
        public void UpdateCampaignCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCampaignPostRequest campaign = null;
            //var response = instance.UpdateCampaignCreate(campaign);
            //Assert.IsInstanceOf<UpdateCampaign> (response, "response is UpdateCampaign");
        }
        
        /// <summary>
        /// Test UpdateCampaignDestroy
        /// </summary>
        [Test]
        public void UpdateCampaignDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string campaignId = null;
            //instance.UpdateCampaignDestroy(campaignId);
            
        }
        
        /// <summary>
        /// Test UpdateCampaignList
        /// </summary>
        [Test]
        public void UpdateCampaignListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string filter = null;
            //string include = null;
            //var response = instance.UpdateCampaignList(limit, order, after, filter, include);
            //Assert.IsInstanceOf<UpdateCampaignPage> (response, "response is UpdateCampaignPage");
        }
        
        /// <summary>
        /// Test UpdateCampaignPartialUpdate
        /// </summary>
        [Test]
        public void UpdateCampaignPartialUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string campaignId = null;
            //UpdateCampaignPatchRequest campaign = null;
            //var response = instance.UpdateCampaignPartialUpdate(campaignId, campaign);
            //Assert.IsInstanceOf<UpdateCampaign> (response, "response is UpdateCampaign");
        }
        
        /// <summary>
        /// Test UpdateCampaignRetrieve
        /// </summary>
        [Test]
        public void UpdateCampaignRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string campaignId = null;
            //var response = instance.UpdateCampaignRetrieve(campaignId);
            //Assert.IsInstanceOf<UpdateCampaign> (response, "response is UpdateCampaign");
        }
        
        /// <summary>
        /// Test UpdateCampaignUpdate
        /// </summary>
        [Test]
        public void UpdateCampaignUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string campaignId = null;
            //UpdateCampaignPutRequest campaign = null;
            //var response = instance.UpdateCampaignUpdate(campaignId, campaign);
            //Assert.IsInstanceOf<UpdateCampaign> (response, "response is UpdateCampaign");
        }
        
        /// <summary>
        /// Test V3UpdateCampaignsCampaignIdCampaignDeviceMetadataCampaignDeviceMetadataIdGet
        /// </summary>
        [Test]
        public void V3UpdateCampaignsCampaignIdCampaignDeviceMetadataCampaignDeviceMetadataIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string campaignId = null;
            //string campaignDeviceMetadataId = null;
            //var response = instance.V3UpdateCampaignsCampaignIdCampaignDeviceMetadataCampaignDeviceMetadataIdGet(campaignId, campaignDeviceMetadataId);
            //Assert.IsInstanceOf<CampaignDeviceMetadata> (response, "response is CampaignDeviceMetadata");
        }
        
        /// <summary>
        /// Test V3UpdateCampaignsCampaignIdCampaignDeviceMetadataGet
        /// </summary>
        [Test]
        public void V3UpdateCampaignsCampaignIdCampaignDeviceMetadataGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string campaignId = null;
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string include = null;
            //var response = instance.V3UpdateCampaignsCampaignIdCampaignDeviceMetadataGet(campaignId, limit, order, after, include);
            //Assert.IsInstanceOf<CampaignDeviceMetadataPage> (response, "response is CampaignDeviceMetadataPage");
        }
        
    }

}
