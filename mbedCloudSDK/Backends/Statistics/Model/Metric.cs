/* 
 * Connect Statistics API
 *
 * mbed Cloud Connect Statistics API provides statistics about other cloud services through defined counters.
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace statistics.Model
{
    /// <summary>
    /// Metric
    /// </summary>
    [DataContract]
    public partial class Metric :  IEquatable<Metric>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Metric" /> class.
        /// </summary>
        /// <param name="DeviceServerRestApiError">The number of failed [Connect API](/docs/v1.2/api-references/connect-api.html) requests the account has performed..</param>
        /// <param name="BootstrapsFailed">The number of failed bootstraps the account has performed..</param>
        /// <param name="Transactions">The number of transaction events from or to devices linked to the account. A transaction is a 512-byte block of data processed by mbed Cloud. It can be either sent by the device (device - -&gt; mbed cloud) or received by the device (mbed cloud - -&gt; device). A transaction does not include IP, TCP or UDP, TLS or DTLS packet overhead. It only contains the packet payload (full CoAP packet including CoAP headers)..</param>
        /// <param name="Timestamp">UTC time in RFC3339 format. The timestamp is the starting point of the interval for which the data is aggregated. Each interval includes data for the time greater than or equal to the timestamp and less than the next interval&#39;s starting point..</param>
        /// <param name="RegisteredDevices">The maximum number of registered devices linked to the account. The registered devices count is calculated based on unique registrations plus registration updates over a period of 5 minutes..</param>
        /// <param name="BootstrapsPending">The number of pending bootstraps the account has performed..</param>
        /// <param name="DeviceServerRestApiSuccess">The number of successful [Connect API](/docs/v1.2/api-references/connect-api.html) requests the account has performed..</param>
        /// <param name="HandshakesSuccessful">The number of successful handshakes the account has performed..</param>
        /// <param name="BootstrapsSuccessful">The number of successful bootstraps the account has performed..</param>
        /// <param name="Id">A unique metric ID..</param>
        public Metric(long? DeviceServerRestApiError = default(long?), long? BootstrapsFailed = default(long?), long? Transactions = default(long?), string Timestamp = default(string), long? RegisteredDevices = default(long?), long? BootstrapsPending = default(long?), long? DeviceServerRestApiSuccess = default(long?), long? HandshakesSuccessful = default(long?), long? BootstrapsSuccessful = default(long?), string Id = default(string))
        {
            this.DeviceServerRestApiError = DeviceServerRestApiError;
            this.BootstrapsFailed = BootstrapsFailed;
            this.Transactions = Transactions;
            this.Timestamp = Timestamp;
            this.RegisteredDevices = RegisteredDevices;
            this.BootstrapsPending = BootstrapsPending;
            this.DeviceServerRestApiSuccess = DeviceServerRestApiSuccess;
            this.HandshakesSuccessful = HandshakesSuccessful;
            this.BootstrapsSuccessful = BootstrapsSuccessful;
            this.Id = Id;
        }
        
        /// <summary>
        /// The number of failed [Connect API](/docs/v1.2/api-references/connect-api.html) requests the account has performed.
        /// </summary>
        /// <value>The number of failed [Connect API](/docs/v1.2/api-references/connect-api.html) requests the account has performed.</value>
        [DataMember(Name="device_server_rest_api_error", EmitDefaultValue=false)]
        public long? DeviceServerRestApiError { get; set; }
        /// <summary>
        /// The number of failed bootstraps the account has performed.
        /// </summary>
        /// <value>The number of failed bootstraps the account has performed.</value>
        [DataMember(Name="bootstraps_failed", EmitDefaultValue=false)]
        public long? BootstrapsFailed { get; set; }
        /// <summary>
        /// The number of transaction events from or to devices linked to the account. A transaction is a 512-byte block of data processed by mbed Cloud. It can be either sent by the device (device - -&gt; mbed cloud) or received by the device (mbed cloud - -&gt; device). A transaction does not include IP, TCP or UDP, TLS or DTLS packet overhead. It only contains the packet payload (full CoAP packet including CoAP headers).
        /// </summary>
        /// <value>The number of transaction events from or to devices linked to the account. A transaction is a 512-byte block of data processed by mbed Cloud. It can be either sent by the device (device - -&gt; mbed cloud) or received by the device (mbed cloud - -&gt; device). A transaction does not include IP, TCP or UDP, TLS or DTLS packet overhead. It only contains the packet payload (full CoAP packet including CoAP headers).</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public long? Transactions { get; set; }
        /// <summary>
        /// UTC time in RFC3339 format. The timestamp is the starting point of the interval for which the data is aggregated. Each interval includes data for the time greater than or equal to the timestamp and less than the next interval&#39;s starting point.
        /// </summary>
        /// <value>UTC time in RFC3339 format. The timestamp is the starting point of the interval for which the data is aggregated. Each interval includes data for the time greater than or equal to the timestamp and less than the next interval&#39;s starting point.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }
        /// <summary>
        /// The maximum number of registered devices linked to the account. The registered devices count is calculated based on unique registrations plus registration updates over a period of 5 minutes.
        /// </summary>
        /// <value>The maximum number of registered devices linked to the account. The registered devices count is calculated based on unique registrations plus registration updates over a period of 5 minutes.</value>
        [DataMember(Name="registered_devices", EmitDefaultValue=false)]
        public long? RegisteredDevices { get; set; }
        /// <summary>
        /// The number of pending bootstraps the account has performed.
        /// </summary>
        /// <value>The number of pending bootstraps the account has performed.</value>
        [DataMember(Name="bootstraps_pending", EmitDefaultValue=false)]
        public long? BootstrapsPending { get; set; }
        /// <summary>
        /// The number of successful [Connect API](/docs/v1.2/api-references/connect-api.html) requests the account has performed.
        /// </summary>
        /// <value>The number of successful [Connect API](/docs/v1.2/api-references/connect-api.html) requests the account has performed.</value>
        [DataMember(Name="device_server_rest_api_success", EmitDefaultValue=false)]
        public long? DeviceServerRestApiSuccess { get; set; }
        /// <summary>
        /// The number of successful handshakes the account has performed.
        /// </summary>
        /// <value>The number of successful handshakes the account has performed.</value>
        [DataMember(Name="handshakes_successful", EmitDefaultValue=false)]
        public long? HandshakesSuccessful { get; set; }
        /// <summary>
        /// The number of successful bootstraps the account has performed.
        /// </summary>
        /// <value>The number of successful bootstraps the account has performed.</value>
        [DataMember(Name="bootstraps_successful", EmitDefaultValue=false)]
        public long? BootstrapsSuccessful { get; set; }
        /// <summary>
        /// A unique metric ID.
        /// </summary>
        /// <value>A unique metric ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Metric {\n");
            sb.Append("  DeviceServerRestApiError: ").Append(DeviceServerRestApiError).Append("\n");
            sb.Append("  BootstrapsFailed: ").Append(BootstrapsFailed).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RegisteredDevices: ").Append(RegisteredDevices).Append("\n");
            sb.Append("  BootstrapsPending: ").Append(BootstrapsPending).Append("\n");
            sb.Append("  DeviceServerRestApiSuccess: ").Append(DeviceServerRestApiSuccess).Append("\n");
            sb.Append("  HandshakesSuccessful: ").Append(HandshakesSuccessful).Append("\n");
            sb.Append("  BootstrapsSuccessful: ").Append(BootstrapsSuccessful).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Metric);
        }

        /// <summary>
        /// Returns true if Metric instances are equal
        /// </summary>
        /// <param name="other">Instance of Metric to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metric other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DeviceServerRestApiError == other.DeviceServerRestApiError ||
                    this.DeviceServerRestApiError != null &&
                    this.DeviceServerRestApiError.Equals(other.DeviceServerRestApiError)
                ) && 
                (
                    this.BootstrapsFailed == other.BootstrapsFailed ||
                    this.BootstrapsFailed != null &&
                    this.BootstrapsFailed.Equals(other.BootstrapsFailed)
                ) && 
                (
                    this.Transactions == other.Transactions ||
                    this.Transactions != null &&
                    this.Transactions.Equals(other.Transactions)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.RegisteredDevices == other.RegisteredDevices ||
                    this.RegisteredDevices != null &&
                    this.RegisteredDevices.Equals(other.RegisteredDevices)
                ) && 
                (
                    this.BootstrapsPending == other.BootstrapsPending ||
                    this.BootstrapsPending != null &&
                    this.BootstrapsPending.Equals(other.BootstrapsPending)
                ) && 
                (
                    this.DeviceServerRestApiSuccess == other.DeviceServerRestApiSuccess ||
                    this.DeviceServerRestApiSuccess != null &&
                    this.DeviceServerRestApiSuccess.Equals(other.DeviceServerRestApiSuccess)
                ) && 
                (
                    this.HandshakesSuccessful == other.HandshakesSuccessful ||
                    this.HandshakesSuccessful != null &&
                    this.HandshakesSuccessful.Equals(other.HandshakesSuccessful)
                ) && 
                (
                    this.BootstrapsSuccessful == other.BootstrapsSuccessful ||
                    this.BootstrapsSuccessful != null &&
                    this.BootstrapsSuccessful.Equals(other.BootstrapsSuccessful)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DeviceServerRestApiError != null)
                    hash = hash * 59 + this.DeviceServerRestApiError.GetHashCode();
                if (this.BootstrapsFailed != null)
                    hash = hash * 59 + this.BootstrapsFailed.GetHashCode();
                if (this.Transactions != null)
                    hash = hash * 59 + this.Transactions.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.RegisteredDevices != null)
                    hash = hash * 59 + this.RegisteredDevices.GetHashCode();
                if (this.BootstrapsPending != null)
                    hash = hash * 59 + this.BootstrapsPending.GetHashCode();
                if (this.DeviceServerRestApiSuccess != null)
                    hash = hash * 59 + this.DeviceServerRestApiSuccess.GetHashCode();
                if (this.HandshakesSuccessful != null)
                    hash = hash * 59 + this.HandshakesSuccessful.GetHashCode();
                if (this.BootstrapsSuccessful != null)
                    hash = hash * 59 + this.BootstrapsSuccessful.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
