// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 2.0.0
//
// <copyright file="FirmwareImageRepository.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace Mbed.Cloud.Foundation
{
    using Mbed.Cloud.Common;
    using System.IO;
    using System.Threading.Tasks;
    using MbedCloudSDK.Exceptions;
    using System.Collections.Generic;
    using System;
    using Mbed.Cloud.RestClient;

    /// <summary>
    /// FirmwareImageRepository
    /// </summary>
    public class FirmwareImageRepository : Repository, IFirmwareImageRepository
    {
        public FirmwareImageRepository()
        {
        }

        public FirmwareImageRepository(Config config, Client client = null) : base(config, client)
        {
        }

        public async Task Delete(string id)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "image_id", id }, };
                await Client.CallApi<FirmwareImage>(path: "/v3/firmware-images/{image_id}/", pathParams: pathParams, method: HttpMethods.DELETE);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<IFirmwareImageListOptions, FirmwareImage> List(IFirmwareImageListOptions options = null)
        {
            try
            {
                if (options == null)
                {
                    options = new FirmwareImageListOptions();
                }

                Func<IFirmwareImageListOptions, Task<ResponsePage<FirmwareImage>>> paginatedFunc = async (IFirmwareImageListOptions _options) => { var queryParams = new Dictionary<string, object> { { "after", _options.After }, { "include", _options.Include }, { "limit", _options.Limit }, { "order", _options.Order }, { "created_at__in", _options.Filter.GetEncodedValue("created_at", "$in") }, { "created_at__nin", _options.Filter.GetEncodedValue("created_at", "$nin") }, { "created_at__lte", _options.Filter.GetEncodedValue("created_at", "$lte") }, { "created_at__gte", _options.Filter.GetEncodedValue("created_at", "$gte") }, { "datafile__eq", _options.Filter.GetEncodedValue("datafile_url", "$eq") }, { "datafile__neq", _options.Filter.GetEncodedValue("datafile_url", "$neq") }, { "datafile__in", _options.Filter.GetEncodedValue("datafile_url", "$in") }, { "datafile__nin", _options.Filter.GetEncodedValue("datafile_url", "$nin") }, { "datafile_checksum__eq", _options.Filter.GetEncodedValue("datafile_checksum", "$eq") }, { "datafile_checksum__neq", _options.Filter.GetEncodedValue("datafile_checksum", "$neq") }, { "datafile_checksum__in", _options.Filter.GetEncodedValue("datafile_checksum", "$in") }, { "datafile_checksum__nin", _options.Filter.GetEncodedValue("datafile_checksum", "$nin") }, { "datafile_size__eq", _options.Filter.GetEncodedValue("datafile_size", "$eq") }, { "datafile_size__neq", _options.Filter.GetEncodedValue("datafile_size", "$neq") }, { "datafile_size__in", _options.Filter.GetEncodedValue("datafile_size", "$in") }, { "datafile_size__nin", _options.Filter.GetEncodedValue("datafile_size", "$nin") }, { "description__eq", _options.Filter.GetEncodedValue("description", "$eq") }, { "description__neq", _options.Filter.GetEncodedValue("description", "$neq") }, { "description__in", _options.Filter.GetEncodedValue("description", "$in") }, { "description__nin", _options.Filter.GetEncodedValue("description", "$nin") }, { "id__eq", _options.Filter.GetEncodedValue("id", "$eq") }, { "id__neq", _options.Filter.GetEncodedValue("id", "$neq") }, { "id__in", _options.Filter.GetEncodedValue("id", "$in") }, { "id__nin", _options.Filter.GetEncodedValue("id", "$nin") }, { "name__eq", _options.Filter.GetEncodedValue("name", "$eq") }, { "name__neq", _options.Filter.GetEncodedValue("name", "$neq") }, { "name__in", _options.Filter.GetEncodedValue("name", "$in") }, { "name__nin", _options.Filter.GetEncodedValue("name", "$nin") }, { "updated_at__in", _options.Filter.GetEncodedValue("updated_at", "$in") }, { "updated_at__nin", _options.Filter.GetEncodedValue("updated_at", "$nin") }, { "updated_at__lte", _options.Filter.GetEncodedValue("updated_at", "$lte") }, { "updated_at__gte", _options.Filter.GetEncodedValue("updated_at", "$gte") }, }; return await Client.CallApi<ResponsePage<FirmwareImage>>(path: "/v3/firmware-images/", queryParams: queryParams, method: HttpMethods.GET); };
                return new PaginatedResponse<IFirmwareImageListOptions, FirmwareImage>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<FirmwareImage> Read(string id)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "image_id", id }, };
                return await Client.CallApi<FirmwareImage>(path: "/v3/firmware-images/{image_id}/", pathParams: pathParams, method: HttpMethods.GET);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<FirmwareImage> Upload(Stream firmwareImageFile, string description = null, string name = null)
        {
            try
            {
                var fileParams = new Dictionary<string, Stream> { { "datafile", firmwareImageFile }, };
                var formParams = new Dictionary<string, object> { { "description", description }, { "name", name }, };
                return await Client.CallApi<FirmwareImage>(path: "/v3/firmware-images/", fileParams: fileParams, formParams: formParams, method: HttpMethods.POST);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }
    }
}