/* 
 * IAM Identities REST API
 *
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace iam.Model
{
    /// <summary>
    /// This object represents an CA Certificate in requests.
    /// </summary>
    [DataContract]
    public partial class CACertificateReq :  IEquatable<CACertificateReq>
    {
        /// <summary>
        /// Service name where the certificate must be used.
        /// </summary>
        /// <value>Service name where the certificate must be used.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceEnum
        {
            
            /// <summary>
            /// Enum Lwm2m for "lwm2m"
            /// </summary>
            [EnumMember(Value = "lwm2m")]
            Lwm2m,
            
            /// <summary>
            /// Enum Bootstrap for "bootstrap"
            /// </summary>
            [EnumMember(Value = "bootstrap")]
            Bootstrap,
            
            /// <summary>
            /// Enum Provisioning for "provisioning"
            /// </summary>
            [EnumMember(Value = "provisioning")]
            Provisioning
        }

        /// <summary>
        /// Service name where the certificate must be used.
        /// </summary>
        /// <value>Service name where the certificate must be used.</value>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public ServiceEnum? Service { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CACertificateReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CACertificateReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CACertificateReq" /> class.
        /// </summary>
        /// <param name="CertData">X509.v3 CA certificate in PEM or base64 encoded DER format. (required).</param>
        /// <param name="Name">Certificate name. (required).</param>
        /// <param name="Service">Service name where the certificate must be used. (required).</param>
        /// <param name="Signature">Base64 encoded signature of the account ID signed by the certificate to be uploaded. Signature must be hashed with SHA256. (required).</param>
        public CACertificateReq(string CertData = null, string Name = null, ServiceEnum? Service = null, string Signature = null)
        {
            // to ensure "CertData" is required (not null)
            if (CertData == null)
            {
                throw new InvalidDataException("CertData is a required property for CACertificateReq and cannot be null");
            }
            else
            {
                this.CertData = CertData;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CACertificateReq and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Service" is required (not null)
            if (Service == null)
            {
                throw new InvalidDataException("Service is a required property for CACertificateReq and cannot be null");
            }
            else
            {
                this.Service = Service;
            }
            // to ensure "Signature" is required (not null)
            if (Signature == null)
            {
                throw new InvalidDataException("Signature is a required property for CACertificateReq and cannot be null");
            }
            else
            {
                this.Signature = Signature;
            }
        }
        
        /// <summary>
        /// X509.v3 CA certificate in PEM or base64 encoded DER format.
        /// </summary>
        /// <value>X509.v3 CA certificate in PEM or base64 encoded DER format.</value>
        [DataMember(Name="cert_data", EmitDefaultValue=false)]
        public string CertData { get; set; }
        /// <summary>
        /// Certificate name.
        /// </summary>
        /// <value>Certificate name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Base64 encoded signature of the account ID signed by the certificate to be uploaded. Signature must be hashed with SHA256.
        /// </summary>
        /// <value>Base64 encoded signature of the account ID signed by the certificate to be uploaded. Signature must be hashed with SHA256.</value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CACertificateReq {\n");
            sb.Append("  CertData: ").Append(CertData).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CACertificateReq);
        }

        /// <summary>
        /// Returns true if CACertificateReq instances are equal
        /// </summary>
        /// <param name="other">Instance of CACertificateReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CACertificateReq other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CertData == other.CertData ||
                    this.CertData != null &&
                    this.CertData.Equals(other.CertData)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Service == other.Service ||
                    this.Service != null &&
                    this.Service.Equals(other.Service)
                ) && 
                (
                    this.Signature == other.Signature ||
                    this.Signature != null &&
                    this.Signature.Equals(other.Signature)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CertData != null)
                    hash = hash * 59 + this.CertData.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Service != null)
                    hash = hash * 59 + this.Service.GetHashCode();
                if (this.Signature != null)
                    hash = hash * 59 + this.Signature.GetHashCode();
                return hash;
            }
        }
    }

}
