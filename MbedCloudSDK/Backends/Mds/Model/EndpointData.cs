/* 
 * <auto-generated>
 * Connect API
 *
 * Mbed Cloud Connect API allows web applications to communicate with devices. You can subscribe to device resources and read/write values to them. Mbed Cloud Connect makes connectivity to devices easy by queuing requests and caching resource values.
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = mds.Client.SwaggerDateConverter;

namespace mds.Model
{
    /// <summary>
    /// EndpointData
    /// </summary>
    [DataContract]
    public partial class EndpointData :  IEquatable<EndpointData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointData" /> class.
        /// </summary>
        /// <param name="Q">Queue mode (default value is false)..</param>
        /// <param name="Ept">Endpoint type..</param>
        /// <param name="OriginalEp">In case of a self-provided endpoint name that is used to initiate the device registration, Mbed Cloud provides a new device ID to be used from that point on. The new Mbed-Cloud-provided Device ID is forwarded as the &#39;ep&#39; property and the original self-provided one as the optional &#39;original-ep&#39; property in a registration notification. The name and ID can then be mapped accordingly. Mbed Cloud saves the original endpoint name in the Device Directory for future device registrations so that you don&#39;t need to do the mapping again. .</param>
        /// <param name="Resources">Resources.</param>
        /// <param name="Ep">Unique Mbed Cloud device ID..</param>
        public EndpointData(bool? Q = default(bool?), string Ept = default(string), string OriginalEp = default(string), List<ResourcesData> Resources = default(List<ResourcesData>), string Ep = default(string))
        {
            this.Q = Q;
            this.Ept = Ept;
            this.OriginalEp = OriginalEp;
            this.Resources = Resources;
            this.Ep = Ep;
        }
        
        /// <summary>
        /// Queue mode (default value is false).
        /// </summary>
        /// <value>Queue mode (default value is false).</value>
        [DataMember(Name="q", EmitDefaultValue=false)]
        public bool? Q { get; set; }

        /// <summary>
        /// Endpoint type.
        /// </summary>
        /// <value>Endpoint type.</value>
        [DataMember(Name="ept", EmitDefaultValue=false)]
        public string Ept { get; set; }

        /// <summary>
        /// In case of a self-provided endpoint name that is used to initiate the device registration, Mbed Cloud provides a new device ID to be used from that point on. The new Mbed-Cloud-provided Device ID is forwarded as the &#39;ep&#39; property and the original self-provided one as the optional &#39;original-ep&#39; property in a registration notification. The name and ID can then be mapped accordingly. Mbed Cloud saves the original endpoint name in the Device Directory for future device registrations so that you don&#39;t need to do the mapping again. 
        /// </summary>
        /// <value>In case of a self-provided endpoint name that is used to initiate the device registration, Mbed Cloud provides a new device ID to be used from that point on. The new Mbed-Cloud-provided Device ID is forwarded as the &#39;ep&#39; property and the original self-provided one as the optional &#39;original-ep&#39; property in a registration notification. The name and ID can then be mapped accordingly. Mbed Cloud saves the original endpoint name in the Device Directory for future device registrations so that you don&#39;t need to do the mapping again. </value>
        [DataMember(Name="original-ep", EmitDefaultValue=false)]
        public string OriginalEp { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<ResourcesData> Resources { get; set; }

        /// <summary>
        /// Unique Mbed Cloud device ID.
        /// </summary>
        /// <value>Unique Mbed Cloud device ID.</value>
        [DataMember(Name="ep", EmitDefaultValue=false)]
        public string Ep { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndpointData {\n");
            sb.Append("  Q: ").Append(Q).Append("\n");
            sb.Append("  Ept: ").Append(Ept).Append("\n");
            sb.Append("  OriginalEp: ").Append(OriginalEp).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Ep: ").Append(Ep).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointData);
        }

        /// <summary>
        /// Returns true if EndpointData instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Q == input.Q ||
                    (this.Q != null &&
                    this.Q.Equals(input.Q))
                ) && 
                (
                    this.Ept == input.Ept ||
                    (this.Ept != null &&
                    this.Ept.Equals(input.Ept))
                ) && 
                (
                    this.OriginalEp == input.OriginalEp ||
                    (this.OriginalEp != null &&
                    this.OriginalEp.Equals(input.OriginalEp))
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.Ep == input.Ep ||
                    (this.Ep != null &&
                    this.Ep.Equals(input.Ep))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Q != null)
                    hashCode = hashCode * 59 + this.Q.GetHashCode();
                if (this.Ept != null)
                    hashCode = hashCode * 59 + this.Ept.GetHashCode();
                if (this.OriginalEp != null)
                    hashCode = hashCode * 59 + this.OriginalEp.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.Ep != null)
                    hashCode = hashCode * 59 + this.Ep.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
