// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 1.0.0
//
// <copyright file="DeviceEnrollment.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace MbedCloud.SDK.Entities
{
    using MbedCloud.SDK.Common;
    using MbedCloud.SDK.Client;
    using System;
    using System.Threading.Tasks;
    using MbedCloudSDK.Exceptions;
    using System.Collections.Generic;

    /// <summary>
    /// DeviceEnrollment
    /// </summary>
    public class DeviceEnrollment : BaseEntity
    {
        public DeviceEnrollment()
        {
            Client = new Client(Config);
        }

        public DeviceEnrollment(Config config)
        {
            Config = config;
            Client = new Client(Config);
        }

        /// <summary>
        /// account_id
        /// </summary>
        public string AccountId
        {
            get;
            set;
        }

        /// <summary>
        /// claimed_at
        /// </summary>
        public DateTime? ClaimedAt
        {
            get;
            set;
        }

        /// <summary>
        /// created_at
        /// </summary>
        public DateTime? CreatedAt
        {
            get;
            set;
        }

        /// <summary>
        /// enrolled_device_id
        /// </summary>
        public string EnrolledDeviceId
        {
            get;
            set;
        }

        /// <summary>
        /// enrollment_identity
        /// </summary>
        public string EnrollmentIdentity
        {
            get;
            set;
        }

        /// <summary>
        /// expires_at
        /// </summary>
        public DateTime? ExpiresAt
        {
            get;
            set;
        }

        public async Task<DeviceEnrollment> Create()
        {
            try
            {
                var bodyParams = new DeviceEnrollment { EnrollmentIdentity = EnrollmentIdentity, };
                return await Client.CallApi<DeviceEnrollment>(path: "/v3/device-enrollments", bodyParams: bodyParams, method: HttpMethods.POST, objectToUnpack: this);
            }
            catch (MbedCloud.SDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<DeviceEnrollment> Delete()
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "id", Id }, };
                return await Client.CallApi<DeviceEnrollment>(path: "/v3/device-enrollments/{id}", pathParams: pathParams, method: HttpMethods.DELETE, objectToUnpack: this);
            }
            catch (MbedCloud.SDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<DeviceEnrollment> Get()
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "id", Id }, };
                return await Client.CallApi<DeviceEnrollment>(path: "/v3/device-enrollments/{id}", pathParams: pathParams, method: HttpMethods.GET, objectToUnpack: this);
            }
            catch (MbedCloud.SDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<QueryOptions, DeviceEnrollment> List(string after = null, string include = null, int limit = 25, string order = null)
        {
            try
            {
                var queryParams = new Dictionary<string, object> { { "after", after }, { "include", include }, { "limit", limit }, { "order", order }, };
                var options = new QueryOptions { After = after, Include = include, Limit = limit, Order = order, };
                Func<QueryOptions, ResponsePage<DeviceEnrollment>> paginatedFunc = (QueryOptions _options) => AsyncHelper.RunSync<ResponsePage<DeviceEnrollment>>(() => Client.CallApi<ResponsePage<DeviceEnrollment>>(path: "/v3/device-enrollments", queryParams: queryParams, method: HttpMethods.GET));
                return new PaginatedResponse<QueryOptions, DeviceEnrollment>(paginatedFunc, options);
            }
            catch (MbedCloud.SDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }
    }
}