/* 
 * IAM Identities REST API
 *
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using iam.Client;
using iam.Model;

namespace iam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept invitation.
        /// </summary>
        /// <remarks>
        /// Accepting pending invitation and providing missing details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <param name="body">Details of the user accepting the invitation.</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp ActivateUser (string invitationId, UserUpdateReq body);

        /// <summary>
        /// Accept invitation.
        /// </summary>
        /// <remarks>
        /// Accepting pending invitation and providing missing details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <param name="body">Details of the user accepting the invitation.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> ActivateUserWithHttpInfo (string invitationId, UserUpdateReq body);
        /// <summary>
        /// Apply password recovery.
        /// </summary>
        /// <remarks>
        /// Applying password recovery by providing a secret hash code.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hash received by email and new password.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns></returns>
        void ApplyPasswordRecovery (PasswordRecoveryReq body, string xForwardedFor = null);

        /// <summary>
        /// Apply password recovery.
        /// </summary>
        /// <remarks>
        /// Applying password recovery by providing a secret hash code.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hash received by email and new password.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApplyPasswordRecoveryWithHttpInfo (PasswordRecoveryReq body, string xForwardedFor = null);
        /// <summary>
        /// Get invited user.
        /// </summary>
        /// <remarks>
        /// Returns information about the user being invited.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp GetInvitedUser (string invitationId);

        /// <summary>
        /// Get invited user.
        /// </summary>
        /// <remarks>
        /// Returns information about the user being invited.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> GetInvitedUserWithHttpInfo (string invitationId);
        /// <summary>
        /// Get registering user.
        /// </summary>
        /// <remarks>
        /// Retrieving the details of a user to register.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <returns>AccountSignupResp</returns>
        AccountSignupResp GetSelfEnrollingUser (string signupId);

        /// <summary>
        /// Get registering user.
        /// </summary>
        /// <remarks>
        /// Retrieving the details of a user to register.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <returns>ApiResponse of AccountSignupResp</returns>
        ApiResponse<AccountSignupResp> GetSelfEnrollingUserWithHttpInfo (string signupId);
        /// <summary>
        /// Register a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for registering a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>AccountEnrollmentResp</returns>
        AccountEnrollmentResp RegisterAccount (string signupId, AccountEnrollmentReq body);

        /// <summary>
        /// Register a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for registering a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>ApiResponse of AccountEnrollmentResp</returns>
        ApiResponse<AccountEnrollmentResp> RegisterAccountWithHttpInfo (string signupId, AccountEnrollmentReq body);
        /// <summary>
        /// Request password recovery.
        /// </summary>
        /// <remarks>
        /// Requesting password recovery by email address.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user whose password needs to be recovered.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns></returns>
        void RequestPasswordRecovery (PasswordResetReq body, string xForwardedFor = null);

        /// <summary>
        /// Request password recovery.
        /// </summary>
        /// <remarks>
        /// Requesting password recovery by email address.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user whose password needs to be recovered.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RequestPasswordRecoveryWithHttpInfo (PasswordResetReq body, string xForwardedFor = null);
        /// <summary>
        /// Sign up for a new account.
        /// </summary>
        /// <remarks>
        /// Signing up for a new free tier account with email address.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user to be signed up.</param>
        /// <returns>AccountSignupResp</returns>
        AccountSignupResp Signup (AccountSignupReq body);

        /// <summary>
        /// Sign up for a new account.
        /// </summary>
        /// <remarks>
        /// Signing up for a new free tier account with email address.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user to be signed up.</param>
        /// <returns>ApiResponse of AccountSignupResp</returns>
        ApiResponse<AccountSignupResp> SignupWithHttpInfo (AccountSignupReq body);
        /// <summary>
        /// Verify self-enrollment code and aliases.
        /// </summary>
        /// <remarks>
        /// Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Verification code received by email and aliases to be checked. (optional)</param>
        /// <returns></returns>
        void VerifySelfEnrollment (string signupId, AccountSignupVerify body = null);

        /// <summary>
        /// Verify self-enrollment code and aliases.
        /// </summary>
        /// <remarks>
        /// Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Verification code received by email and aliases to be checked. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VerifySelfEnrollmentWithHttpInfo (string signupId, AccountSignupVerify body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accept invitation.
        /// </summary>
        /// <remarks>
        /// Accepting pending invitation and providing missing details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <param name="body">Details of the user accepting the invitation.</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> ActivateUserAsync (string invitationId, UserUpdateReq body);

        /// <summary>
        /// Accept invitation.
        /// </summary>
        /// <remarks>
        /// Accepting pending invitation and providing missing details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <param name="body">Details of the user accepting the invitation.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> ActivateUserAsyncWithHttpInfo (string invitationId, UserUpdateReq body);
        /// <summary>
        /// Apply password recovery.
        /// </summary>
        /// <remarks>
        /// Applying password recovery by providing a secret hash code.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hash received by email and new password.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApplyPasswordRecoveryAsync (PasswordRecoveryReq body, string xForwardedFor = null);

        /// <summary>
        /// Apply password recovery.
        /// </summary>
        /// <remarks>
        /// Applying password recovery by providing a secret hash code.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hash received by email and new password.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApplyPasswordRecoveryAsyncWithHttpInfo (PasswordRecoveryReq body, string xForwardedFor = null);
        /// <summary>
        /// Get invited user.
        /// </summary>
        /// <remarks>
        /// Returns information about the user being invited.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> GetInvitedUserAsync (string invitationId);

        /// <summary>
        /// Get invited user.
        /// </summary>
        /// <remarks>
        /// Returns information about the user being invited.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> GetInvitedUserAsyncWithHttpInfo (string invitationId);
        /// <summary>
        /// Get registering user.
        /// </summary>
        /// <remarks>
        /// Retrieving the details of a user to register.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <returns>Task of AccountSignupResp</returns>
        System.Threading.Tasks.Task<AccountSignupResp> GetSelfEnrollingUserAsync (string signupId);

        /// <summary>
        /// Get registering user.
        /// </summary>
        /// <remarks>
        /// Retrieving the details of a user to register.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <returns>Task of ApiResponse (AccountSignupResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountSignupResp>> GetSelfEnrollingUserAsyncWithHttpInfo (string signupId);
        /// <summary>
        /// Register a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for registering a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of AccountEnrollmentResp</returns>
        System.Threading.Tasks.Task<AccountEnrollmentResp> RegisterAccountAsync (string signupId, AccountEnrollmentReq body);

        /// <summary>
        /// Register a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for registering a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of ApiResponse (AccountEnrollmentResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountEnrollmentResp>> RegisterAccountAsyncWithHttpInfo (string signupId, AccountEnrollmentReq body);
        /// <summary>
        /// Request password recovery.
        /// </summary>
        /// <remarks>
        /// Requesting password recovery by email address.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user whose password needs to be recovered.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RequestPasswordRecoveryAsync (PasswordResetReq body, string xForwardedFor = null);

        /// <summary>
        /// Request password recovery.
        /// </summary>
        /// <remarks>
        /// Requesting password recovery by email address.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user whose password needs to be recovered.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RequestPasswordRecoveryAsyncWithHttpInfo (PasswordResetReq body, string xForwardedFor = null);
        /// <summary>
        /// Sign up for a new account.
        /// </summary>
        /// <remarks>
        /// Signing up for a new free tier account with email address.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user to be signed up.</param>
        /// <returns>Task of AccountSignupResp</returns>
        System.Threading.Tasks.Task<AccountSignupResp> SignupAsync (AccountSignupReq body);

        /// <summary>
        /// Sign up for a new account.
        /// </summary>
        /// <remarks>
        /// Signing up for a new free tier account with email address.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user to be signed up.</param>
        /// <returns>Task of ApiResponse (AccountSignupResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountSignupResp>> SignupAsyncWithHttpInfo (AccountSignupReq body);
        /// <summary>
        /// Verify self-enrollment code and aliases.
        /// </summary>
        /// <remarks>
        /// Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Verification code received by email and aliases to be checked. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VerifySelfEnrollmentAsync (string signupId, AccountSignupVerify body = null);

        /// <summary>
        /// Verify self-enrollment code and aliases.
        /// </summary>
        /// <remarks>
        /// Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Verification code received by email and aliases to be checked. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VerifySelfEnrollmentAsyncWithHttpInfo (string signupId, AccountSignupVerify body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private iam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public iam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accept invitation. Accepting pending invitation and providing missing details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <param name="body">Details of the user accepting the invitation.</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp ActivateUser (string invitationId, UserUpdateReq body)
        {
             ApiResponse<UserInfoResp> localVarResponse = ActivateUserWithHttpInfo(invitationId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept invitation. Accepting pending invitation and providing missing details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <param name="body">Details of the user accepting the invitation.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > ActivateUserWithHttpInfo (string invitationId, UserUpdateReq body)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling DefaultApi->ActivateUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ActivateUser");

            var localVarPath = "/auth/invitations/{invitation-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (invitationId != null) localVarPathParams.Add("invitation-id", Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Accept invitation. Accepting pending invitation and providing missing details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <param name="body">Details of the user accepting the invitation.</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> ActivateUserAsync (string invitationId, UserUpdateReq body)
        {
             ApiResponse<UserInfoResp> localVarResponse = await ActivateUserAsyncWithHttpInfo(invitationId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept invitation. Accepting pending invitation and providing missing details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <param name="body">Details of the user accepting the invitation.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> ActivateUserAsyncWithHttpInfo (string invitationId, UserUpdateReq body)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling DefaultApi->ActivateUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ActivateUser");

            var localVarPath = "/auth/invitations/{invitation-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (invitationId != null) localVarPathParams.Add("invitation-id", Configuration.ApiClient.ParameterToString(invitationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Apply password recovery. Applying password recovery by providing a secret hash code.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hash received by email and new password.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns></returns>
        public void ApplyPasswordRecovery (PasswordRecoveryReq body, string xForwardedFor = null)
        {
             ApplyPasswordRecoveryWithHttpInfo(body, xForwardedFor);
        }

        /// <summary>
        /// Apply password recovery. Applying password recovery by providing a secret hash code.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hash received by email and new password.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApplyPasswordRecoveryWithHttpInfo (PasswordRecoveryReq body, string xForwardedFor = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ApplyPasswordRecovery");

            var localVarPath = "/auth/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (xForwardedFor != null) localVarHeaderParams.Add("X-Forwarded-For", Configuration.ApiClient.ParameterToString(xForwardedFor)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyPasswordRecovery", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Apply password recovery. Applying password recovery by providing a secret hash code.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hash received by email and new password.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApplyPasswordRecoveryAsync (PasswordRecoveryReq body, string xForwardedFor = null)
        {
             await ApplyPasswordRecoveryAsyncWithHttpInfo(body, xForwardedFor);

        }

        /// <summary>
        /// Apply password recovery. Applying password recovery by providing a secret hash code.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Hash received by email and new password.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApplyPasswordRecoveryAsyncWithHttpInfo (PasswordRecoveryReq body, string xForwardedFor = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ApplyPasswordRecovery");

            var localVarPath = "/auth/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (xForwardedFor != null) localVarHeaderParams.Add("X-Forwarded-For", Configuration.ApiClient.ParameterToString(xForwardedFor)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyPasswordRecovery", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get invited user. Returns information about the user being invited.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp GetInvitedUser (string invitationId)
        {
             ApiResponse<UserInfoResp> localVarResponse = GetInvitedUserWithHttpInfo(invitationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get invited user. Returns information about the user being invited.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > GetInvitedUserWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling DefaultApi->GetInvitedUser");

            var localVarPath = "/auth/invitations/{invitation-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (invitationId != null) localVarPathParams.Add("invitation-id", Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvitedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Get invited user. Returns information about the user being invited.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> GetInvitedUserAsync (string invitationId)
        {
             ApiResponse<UserInfoResp> localVarResponse = await GetInvitedUserAsyncWithHttpInfo(invitationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get invited user. Returns information about the user being invited.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID received in email.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> GetInvitedUserAsyncWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling DefaultApi->GetInvitedUser");

            var localVarPath = "/auth/invitations/{invitation-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (invitationId != null) localVarPathParams.Add("invitation-id", Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvitedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Get registering user. Retrieving the details of a user to register.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <returns>AccountSignupResp</returns>
        public AccountSignupResp GetSelfEnrollingUser (string signupId)
        {
             ApiResponse<AccountSignupResp> localVarResponse = GetSelfEnrollingUserWithHttpInfo(signupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get registering user. Retrieving the details of a user to register.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <returns>ApiResponse of AccountSignupResp</returns>
        public ApiResponse< AccountSignupResp > GetSelfEnrollingUserWithHttpInfo (string signupId)
        {
            // verify the required parameter 'signupId' is set
            if (signupId == null)
                throw new ApiException(400, "Missing required parameter 'signupId' when calling DefaultApi->GetSelfEnrollingUser");

            var localVarPath = "/auth/register/{signup-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (signupId != null) localVarPathParams.Add("signup-id", Configuration.ApiClient.ParameterToString(signupId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSelfEnrollingUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountSignupResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountSignupResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountSignupResp)));
            
        }

        /// <summary>
        /// Get registering user. Retrieving the details of a user to register.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <returns>Task of AccountSignupResp</returns>
        public async System.Threading.Tasks.Task<AccountSignupResp> GetSelfEnrollingUserAsync (string signupId)
        {
             ApiResponse<AccountSignupResp> localVarResponse = await GetSelfEnrollingUserAsyncWithHttpInfo(signupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get registering user. Retrieving the details of a user to register.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <returns>Task of ApiResponse (AccountSignupResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountSignupResp>> GetSelfEnrollingUserAsyncWithHttpInfo (string signupId)
        {
            // verify the required parameter 'signupId' is set
            if (signupId == null)
                throw new ApiException(400, "Missing required parameter 'signupId' when calling DefaultApi->GetSelfEnrollingUser");

            var localVarPath = "/auth/register/{signup-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (signupId != null) localVarPathParams.Add("signup-id", Configuration.ApiClient.ParameterToString(signupId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSelfEnrollingUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountSignupResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountSignupResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountSignupResp)));
            
        }

        /// <summary>
        /// Register a new account. An endpoint for registering a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>AccountEnrollmentResp</returns>
        public AccountEnrollmentResp RegisterAccount (string signupId, AccountEnrollmentReq body)
        {
             ApiResponse<AccountEnrollmentResp> localVarResponse = RegisterAccountWithHttpInfo(signupId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new account. An endpoint for registering a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>ApiResponse of AccountEnrollmentResp</returns>
        public ApiResponse< AccountEnrollmentResp > RegisterAccountWithHttpInfo (string signupId, AccountEnrollmentReq body)
        {
            // verify the required parameter 'signupId' is set
            if (signupId == null)
                throw new ApiException(400, "Missing required parameter 'signupId' when calling DefaultApi->RegisterAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RegisterAccount");

            var localVarPath = "/auth/register/{signup-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (signupId != null) localVarPathParams.Add("signup-id", Configuration.ApiClient.ParameterToString(signupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountEnrollmentResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountEnrollmentResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountEnrollmentResp)));
            
        }

        /// <summary>
        /// Register a new account. An endpoint for registering a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of AccountEnrollmentResp</returns>
        public async System.Threading.Tasks.Task<AccountEnrollmentResp> RegisterAccountAsync (string signupId, AccountEnrollmentReq body)
        {
             ApiResponse<AccountEnrollmentResp> localVarResponse = await RegisterAccountAsyncWithHttpInfo(signupId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a new account. An endpoint for registering a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of ApiResponse (AccountEnrollmentResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountEnrollmentResp>> RegisterAccountAsyncWithHttpInfo (string signupId, AccountEnrollmentReq body)
        {
            // verify the required parameter 'signupId' is set
            if (signupId == null)
                throw new ApiException(400, "Missing required parameter 'signupId' when calling DefaultApi->RegisterAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RegisterAccount");

            var localVarPath = "/auth/register/{signup-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (signupId != null) localVarPathParams.Add("signup-id", Configuration.ApiClient.ParameterToString(signupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountEnrollmentResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountEnrollmentResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountEnrollmentResp)));
            
        }

        /// <summary>
        /// Request password recovery. Requesting password recovery by email address.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user whose password needs to be recovered.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns></returns>
        public void RequestPasswordRecovery (PasswordResetReq body, string xForwardedFor = null)
        {
             RequestPasswordRecoveryWithHttpInfo(body, xForwardedFor);
        }

        /// <summary>
        /// Request password recovery. Requesting password recovery by email address.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user whose password needs to be recovered.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RequestPasswordRecoveryWithHttpInfo (PasswordResetReq body, string xForwardedFor = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RequestPasswordRecovery");

            var localVarPath = "/auth/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (xForwardedFor != null) localVarHeaderParams.Add("X-Forwarded-For", Configuration.ApiClient.ParameterToString(xForwardedFor)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestPasswordRecovery", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Request password recovery. Requesting password recovery by email address.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user whose password needs to be recovered.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RequestPasswordRecoveryAsync (PasswordResetReq body, string xForwardedFor = null)
        {
             await RequestPasswordRecoveryAsyncWithHttpInfo(body, xForwardedFor);

        }

        /// <summary>
        /// Request password recovery. Requesting password recovery by email address.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user whose password needs to be recovered.</param>
        /// <param name="xForwardedFor"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RequestPasswordRecoveryAsyncWithHttpInfo (PasswordResetReq body, string xForwardedFor = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RequestPasswordRecovery");

            var localVarPath = "/auth/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (xForwardedFor != null) localVarHeaderParams.Add("X-Forwarded-For", Configuration.ApiClient.ParameterToString(xForwardedFor)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestPasswordRecovery", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sign up for a new account. Signing up for a new free tier account with email address.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user to be signed up.</param>
        /// <returns>AccountSignupResp</returns>
        public AccountSignupResp Signup (AccountSignupReq body)
        {
             ApiResponse<AccountSignupResp> localVarResponse = SignupWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sign up for a new account. Signing up for a new free tier account with email address.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user to be signed up.</param>
        /// <returns>ApiResponse of AccountSignupResp</returns>
        public ApiResponse< AccountSignupResp > SignupWithHttpInfo (AccountSignupReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Signup");

            var localVarPath = "/auth/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Signup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountSignupResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountSignupResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountSignupResp)));
            
        }

        /// <summary>
        /// Sign up for a new account. Signing up for a new free tier account with email address.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user to be signed up.</param>
        /// <returns>Task of AccountSignupResp</returns>
        public async System.Threading.Tasks.Task<AccountSignupResp> SignupAsync (AccountSignupReq body)
        {
             ApiResponse<AccountSignupResp> localVarResponse = await SignupAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sign up for a new account. Signing up for a new free tier account with email address.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Email address of the user to be signed up.</param>
        /// <returns>Task of ApiResponse (AccountSignupResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountSignupResp>> SignupAsyncWithHttpInfo (AccountSignupReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Signup");

            var localVarPath = "/auth/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Signup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountSignupResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountSignupResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountSignupResp)));
            
        }

        /// <summary>
        /// Verify self-enrollment code and aliases. Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Verification code received by email and aliases to be checked. (optional)</param>
        /// <returns></returns>
        public void VerifySelfEnrollment (string signupId, AccountSignupVerify body = null)
        {
             VerifySelfEnrollmentWithHttpInfo(signupId, body);
        }

        /// <summary>
        /// Verify self-enrollment code and aliases. Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Verification code received by email and aliases to be checked. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VerifySelfEnrollmentWithHttpInfo (string signupId, AccountSignupVerify body = null)
        {
            // verify the required parameter 'signupId' is set
            if (signupId == null)
                throw new ApiException(400, "Missing required parameter 'signupId' when calling DefaultApi->VerifySelfEnrollment");

            var localVarPath = "/auth/register/{signup-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (signupId != null) localVarPathParams.Add("signup-id", Configuration.ApiClient.ParameterToString(signupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifySelfEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Verify self-enrollment code and aliases. Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Verification code received by email and aliases to be checked. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VerifySelfEnrollmentAsync (string signupId, AccountSignupVerify body = null)
        {
             await VerifySelfEnrollmentAsyncWithHttpInfo(signupId, body);

        }

        /// <summary>
        /// Verify self-enrollment code and aliases. Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupId">ID received while signing up.</param>
        /// <param name="body">Verification code received by email and aliases to be checked. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VerifySelfEnrollmentAsyncWithHttpInfo (string signupId, AccountSignupVerify body = null)
        {
            // verify the required parameter 'signupId' is set
            if (signupId == null)
                throw new ApiException(400, "Missing required parameter 'signupId' when calling DefaultApi->VerifySelfEnrollment");

            var localVarPath = "/auth/register/{signup-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (signupId != null) localVarPathParams.Add("signup-id", Configuration.ApiClient.ParameterToString(signupId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifySelfEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
