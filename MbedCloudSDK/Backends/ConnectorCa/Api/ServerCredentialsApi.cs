/* 
 * <auto-generated>
 * Connect CA API
 *
 * mbed Cloud Connect CA API allows services to get device credentials.
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using connector_ca.Client;
using connector_ca.Model;

namespace connector_ca.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServerCredentialsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch all (Bootstrap and LWM2M) server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch all (Bootstrap and LWM2M) server credentials that they will need to use with their clients to connect to bootstrap or LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot;         
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>AllServerCredentialsResponseData</returns>
        AllServerCredentialsResponseData GetAllServerCredentials (string authorization);

        /// <summary>
        /// Fetch all (Bootstrap and LWM2M) server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch all (Bootstrap and LWM2M) server credentials that they will need to use with their clients to connect to bootstrap or LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot;         
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>ApiResponse of AllServerCredentialsResponseData</returns>
        ApiResponse<AllServerCredentialsResponseData> GetAllServerCredentialsWithHttpInfo (string authorization);
        /// <summary>
        /// Fetch bootstrap server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch bootstrap server credentials that they will need to use with their clients to connect to bootstrap server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>ServerCredentialsResponseData</returns>
        ServerCredentialsResponseData GetBootstrapServerCredentials (string authorization);

        /// <summary>
        /// Fetch bootstrap server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch bootstrap server credentials that they will need to use with their clients to connect to bootstrap server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>ApiResponse of ServerCredentialsResponseData</returns>
        ApiResponse<ServerCredentialsResponseData> GetBootstrapServerCredentialsWithHttpInfo (string authorization);
        /// <summary>
        /// Fetch LWM2M server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch LWM2M server credentials that they will need to use with their clients to connect to LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>ServerCredentialsResponseData</returns>
        ServerCredentialsResponseData GetL2M2MServerCredentials (string authorization);

        /// <summary>
        /// Fetch LWM2M server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch LWM2M server credentials that they will need to use with their clients to connect to LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>ApiResponse of ServerCredentialsResponseData</returns>
        ApiResponse<ServerCredentialsResponseData> GetL2M2MServerCredentialsWithHttpInfo (string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Fetch all (Bootstrap and LWM2M) server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch all (Bootstrap and LWM2M) server credentials that they will need to use with their clients to connect to bootstrap or LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot;         
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of AllServerCredentialsResponseData</returns>
        System.Threading.Tasks.Task<AllServerCredentialsResponseData> GetAllServerCredentialsAsync (string authorization);

        /// <summary>
        /// Fetch all (Bootstrap and LWM2M) server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch all (Bootstrap and LWM2M) server credentials that they will need to use with their clients to connect to bootstrap or LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot;         
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of ApiResponse (AllServerCredentialsResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllServerCredentialsResponseData>> GetAllServerCredentialsAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Fetch bootstrap server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch bootstrap server credentials that they will need to use with their clients to connect to bootstrap server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of ServerCredentialsResponseData</returns>
        System.Threading.Tasks.Task<ServerCredentialsResponseData> GetBootstrapServerCredentialsAsync (string authorization);

        /// <summary>
        /// Fetch bootstrap server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch bootstrap server credentials that they will need to use with their clients to connect to bootstrap server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of ApiResponse (ServerCredentialsResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServerCredentialsResponseData>> GetBootstrapServerCredentialsAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Fetch LWM2M server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch LWM2M server credentials that they will need to use with their clients to connect to LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of ServerCredentialsResponseData</returns>
        System.Threading.Tasks.Task<ServerCredentialsResponseData> GetL2M2MServerCredentialsAsync (string authorization);

        /// <summary>
        /// Fetch LWM2M server credentials.
        /// </summary>
        /// <remarks>
        /// This REST API is intended to be used by customers to fetch LWM2M server credentials that they will need to use with their clients to connect to LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </remarks>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of ApiResponse (ServerCredentialsResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServerCredentialsResponseData>> GetL2M2MServerCredentialsAsyncWithHttpInfo (string authorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServerCredentialsApi : IServerCredentialsApi
    {
        private connector_ca.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerCredentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServerCredentialsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = connector_ca.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServerCredentialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServerCredentialsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = connector_ca.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public connector_ca.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Fetch all (Bootstrap and LWM2M) server credentials. This REST API is intended to be used by customers to fetch all (Bootstrap and LWM2M) server credentials that they will need to use with their clients to connect to bootstrap or LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot;         
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>AllServerCredentialsResponseData</returns>
        public AllServerCredentialsResponseData GetAllServerCredentials (string authorization)
        {
             ApiResponse<AllServerCredentialsResponseData> localVarResponse = GetAllServerCredentialsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all (Bootstrap and LWM2M) server credentials. This REST API is intended to be used by customers to fetch all (Bootstrap and LWM2M) server credentials that they will need to use with their clients to connect to bootstrap or LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot;         
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>ApiResponse of AllServerCredentialsResponseData</returns>
        public ApiResponse< AllServerCredentialsResponseData > GetAllServerCredentialsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServerCredentialsApi->GetAllServerCredentials");

            var localVarPath = "/v3/server-credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllServerCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllServerCredentialsResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllServerCredentialsResponseData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllServerCredentialsResponseData)));
        }

        /// <summary>
        /// Fetch all (Bootstrap and LWM2M) server credentials. This REST API is intended to be used by customers to fetch all (Bootstrap and LWM2M) server credentials that they will need to use with their clients to connect to bootstrap or LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot;         
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of AllServerCredentialsResponseData</returns>
        public async System.Threading.Tasks.Task<AllServerCredentialsResponseData> GetAllServerCredentialsAsync (string authorization)
        {
             ApiResponse<AllServerCredentialsResponseData> localVarResponse = await GetAllServerCredentialsAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all (Bootstrap and LWM2M) server credentials. This REST API is intended to be used by customers to fetch all (Bootstrap and LWM2M) server credentials that they will need to use with their clients to connect to bootstrap or LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot;         
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of ApiResponse (AllServerCredentialsResponseData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllServerCredentialsResponseData>> GetAllServerCredentialsAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServerCredentialsApi->GetAllServerCredentials");

            var localVarPath = "/v3/server-credentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllServerCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllServerCredentialsResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllServerCredentialsResponseData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllServerCredentialsResponseData)));
        }

        /// <summary>
        /// Fetch bootstrap server credentials. This REST API is intended to be used by customers to fetch bootstrap server credentials that they will need to use with their clients to connect to bootstrap server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>ServerCredentialsResponseData</returns>
        public ServerCredentialsResponseData GetBootstrapServerCredentials (string authorization)
        {
             ApiResponse<ServerCredentialsResponseData> localVarResponse = GetBootstrapServerCredentialsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch bootstrap server credentials. This REST API is intended to be used by customers to fetch bootstrap server credentials that they will need to use with their clients to connect to bootstrap server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>ApiResponse of ServerCredentialsResponseData</returns>
        public ApiResponse< ServerCredentialsResponseData > GetBootstrapServerCredentialsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServerCredentialsApi->GetBootstrapServerCredentials");

            var localVarPath = "/v3/server-credentials/bootstrap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBootstrapServerCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServerCredentialsResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ServerCredentialsResponseData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServerCredentialsResponseData)));
        }

        /// <summary>
        /// Fetch bootstrap server credentials. This REST API is intended to be used by customers to fetch bootstrap server credentials that they will need to use with their clients to connect to bootstrap server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of ServerCredentialsResponseData</returns>
        public async System.Threading.Tasks.Task<ServerCredentialsResponseData> GetBootstrapServerCredentialsAsync (string authorization)
        {
             ApiResponse<ServerCredentialsResponseData> localVarResponse = await GetBootstrapServerCredentialsAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch bootstrap server credentials. This REST API is intended to be used by customers to fetch bootstrap server credentials that they will need to use with their clients to connect to bootstrap server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/bootstrap\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of ApiResponse (ServerCredentialsResponseData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServerCredentialsResponseData>> GetBootstrapServerCredentialsAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServerCredentialsApi->GetBootstrapServerCredentials");

            var localVarPath = "/v3/server-credentials/bootstrap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBootstrapServerCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServerCredentialsResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ServerCredentialsResponseData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServerCredentialsResponseData)));
        }

        /// <summary>
        /// Fetch LWM2M server credentials. This REST API is intended to be used by customers to fetch LWM2M server credentials that they will need to use with their clients to connect to LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>ServerCredentialsResponseData</returns>
        public ServerCredentialsResponseData GetL2M2MServerCredentials (string authorization)
        {
             ApiResponse<ServerCredentialsResponseData> localVarResponse = GetL2M2MServerCredentialsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch LWM2M server credentials. This REST API is intended to be used by customers to fetch LWM2M server credentials that they will need to use with their clients to connect to LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>ApiResponse of ServerCredentialsResponseData</returns>
        public ApiResponse< ServerCredentialsResponseData > GetL2M2MServerCredentialsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServerCredentialsApi->GetL2M2MServerCredentials");

            var localVarPath = "/v3/server-credentials/lwm2m";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetL2M2MServerCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServerCredentialsResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ServerCredentialsResponseData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServerCredentialsResponseData)));
        }

        /// <summary>
        /// Fetch LWM2M server credentials. This REST API is intended to be used by customers to fetch LWM2M server credentials that they will need to use with their clients to connect to LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of ServerCredentialsResponseData</returns>
        public async System.Threading.Tasks.Task<ServerCredentialsResponseData> GetL2M2MServerCredentialsAsync (string authorization)
        {
             ApiResponse<ServerCredentialsResponseData> localVarResponse = await GetL2M2MServerCredentialsAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch LWM2M server credentials. This REST API is intended to be used by customers to fetch LWM2M server credentials that they will need to use with their clients to connect to LWM2M server.  **Example usage:** curl -X GET \&quot;http://api.us-east-1.mbedcloud.com/v3/server-credentials/lwm2m\&quot; -H \&quot;accept: application/json\&quot; -H \&quot;Authorization: Bearer THE_ACCESS_TOKEN\&quot; 
        /// </summary>
        /// <exception cref="connector_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer {Access Token}. </param>
        /// <returns>Task of ApiResponse (ServerCredentialsResponseData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServerCredentialsResponseData>> GetL2M2MServerCredentialsAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ServerCredentialsApi->GetL2M2MServerCredentials");

            var localVarPath = "/v3/server-credentials/lwm2m";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetL2M2MServerCredentials", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServerCredentialsResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ServerCredentialsResponseData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServerCredentialsResponseData)));
        }

    }
}
