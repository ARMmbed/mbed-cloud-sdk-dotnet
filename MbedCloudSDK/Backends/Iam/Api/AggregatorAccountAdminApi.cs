/* 
 * <auto-generated>
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using iam.Client;
using iam.Model;

namespace iam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAggregatorAccountAdminApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add API key to a list of groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding API key to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AddAccountApiKeyToGroups (string accountID, string apiKey, List<string> body);

        /// <summary>
        /// Add API key to a list of groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding API key to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AddAccountApiKeyToGroupsWithHttpInfo (string accountID, string apiKey, List<string> body);
        /// <summary>
        /// Upload new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>TrustedCertificateResp</returns>
        TrustedCertificateResp AddAccountCertificate (string accountID, TrustedCertificateRootReq body);

        /// <summary>
        /// Upload new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        ApiResponse<TrustedCertificateResp> AddAccountCertificateWithHttpInfo (string accountID, TrustedCertificateRootReq body);
        /// <summary>
        /// Add user to a list of groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding user to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AddAccountUserToGroups (string accountID, string userId, List<string> body);

        /// <summary>
        /// Add user to a list of groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding user to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AddAccountUserToGroupsWithHttpInfo (string accountID, string userId, List<string> body);
        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AddSubjectsToAccountGroup (string accountID, string groupID, SubjectList body);

        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AddSubjectsToAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body);
        /// <summary>
        /// Attach a policy to API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to API keys.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AttachAccountPolicyToApikeys (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Attach a policy to API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to API keys.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AttachAccountPolicyToApikeysWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Attach a policy to groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AttachAccountPolicyToGroup (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Attach a policy to groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AttachAccountPolicyToGroupWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Attach a policy to users.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AttachAccountPolicyToUsers (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Attach a policy to users.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AttachAccountPolicyToUsersWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Check the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for checking API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The API key to be checked.</param>
        /// <returns></returns>
        void CheckAccountApiKey (string accountID, string apiKey);

        /// <summary>
        /// Check the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for checking API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The API key to be checked.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckAccountApiKeyWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <param name="action">Action, either &#39;create&#39;, &#39;enroll&#39; or &#39;enrollment_link&#39;. (optional, default to create)</param>
        /// <returns>AccountCreationResp</returns>
        AccountCreationResp CreateAccount (AccountCreationReq body, string action = null);

        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <param name="action">Action, either &#39;create&#39;, &#39;enroll&#39; or &#39;enrollment_link&#39;. (optional, default to create)</param>
        /// <returns>ApiResponse of AccountCreationResp</returns>
        ApiResponse<AccountCreationResp> CreateAccountWithHttpInfo (AccountCreationReq body, string action = null);
        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key. There is no default value for the owner ID and it must be from the same account where the new API key is created.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp CreateAccountApiKey (string accountID, ApiKeyInfoReq body);

        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key. There is no default value for the owner ID and it must be from the same account where the new API key is created.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> CreateAccountApiKeyWithHttpInfo (string accountID, ApiKeyInfoReq body);
        /// <summary>
        /// Create a policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">The details of the policy to be created.</param>
        /// <returns>PolicyInfo</returns>
        PolicyInfo CreateAccountPolicy (string accountID, PolicyCreationReq body);

        /// <summary>
        /// Create a policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">The details of the policy to be created.</param>
        /// <returns>ApiResponse of PolicyInfo</returns>
        ApiResponse<PolicyInfo> CreateAccountPolicyWithHttpInfo (string accountID, PolicyCreationReq body);
        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp CreateAccountUser (string accountID, UserInfoReq body, string action = null);

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> CreateAccountUserWithHttpInfo (string accountID, UserInfoReq body, string action = null);
        /// <summary>
        /// Delete the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns></returns>
        void DeleteAccountApiKey (string accountID, string apiKey);

        /// <summary>
        /// Delete the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountApiKeyWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Delete trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns></returns>
        void DeleteAccountCertificate (string accountID, string certId);

        /// <summary>
        /// Delete trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountCertificateWithHttpInfo (string accountID, string certId);
        /// <summary>
        /// Delete policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be deleted.</param>
        /// <returns></returns>
        void DeleteAccountPolicy (string accountID, string policyId);

        /// <summary>
        /// Delete policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountPolicyWithHttpInfo (string accountID, string policyId);
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns></returns>
        void DeleteAccountUser (string accountID, string userId);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountUserWithHttpInfo (string accountID, string userId);
        /// <summary>
        /// Detach a policy from API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy from API keys.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse DetachAccountPolicyFromApikeys (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Detach a policy from API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy from API keys.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> DetachAccountPolicyFromApikeysWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Detach a policy from users.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy from users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse DetachAccountPolicyFromUsers (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Detach a policy from users.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy from users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> DetachAccountPolicyFromUsersWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Detach a policy to groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse DetachAccountPolicyToGroup (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Detach a policy to groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> DetachAccountPolicyToGroupWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp GetAccountApiKey (string accountID, string apiKey);

        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> GetAccountApiKeyWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be retrieved.</param>
        /// <returns>TrustedCertificateInternalResp</returns>
        TrustedCertificateInternalResp GetAccountCertificate (string accountID, string certId);

        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be retrieved.</param>
        /// <returns>ApiResponse of TrustedCertificateInternalResp</returns>
        ApiResponse<TrustedCertificateInternalResp> GetAccountCertificateWithHttpInfo (string accountID, string certId);
        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be retrieved.</param>
        /// <returns>GroupSummary</returns>
        GroupSummary GetAccountGroupSummary (string accountID, string groupID);

        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be retrieved.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        ApiResponse<GroupSummary> GetAccountGroupSummaryWithHttpInfo (string accountID, string groupID);
        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>AccountInfo</returns>
        AccountInfo GetAccountInfo (string accountID, string include = null, string properties = null);

        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        ApiResponse<AccountInfo> GetAccountInfoWithHttpInfo (string accountID, string include = null, string properties = null);
        /// <summary>
        /// Get policy by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a policy by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <returns>PolicyInfo</returns>
        PolicyInfo GetAccountPolicy (string accountID, string policyId);

        /// <summary>
        /// Get policy by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a policy by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <returns>ApiResponse of PolicyInfo</returns>
        ApiResponse<PolicyInfo> GetAccountPolicyWithHttpInfo (string accountID, string policyId);
        /// <summary>
        /// Fetch details of policy&#39;s API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about API keys this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        ApiKeyInfoRespList GetAccountPolicyApikeys (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Fetch details of policy&#39;s API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about API keys this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        ApiResponse<ApiKeyInfoRespList> GetAccountPolicyApikeysWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Fetch details of policy&#39;s groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about groups this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>GroupSummaryList</returns>
        GroupSummaryList GetAccountPolicyGroups (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Fetch details of policy&#39;s groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about groups this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of GroupSummaryList</returns>
        ApiResponse<GroupSummaryList> GetAccountPolicyGroupsWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Fetch details of policy&#39;s users.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about users this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose users to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>UserInfoRespList</returns>
        UserInfoRespList GetAccountPolicyUsers (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Fetch details of policy&#39;s users.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about users this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose users to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        ApiResponse<UserInfoRespList> GetAccountPolicyUsersWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Details of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be retrieved.</param>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <param name="properties">Request to return account specific user property values according to the given property name. (optional)</param>
        /// <returns>MyUserInfoResp</returns>
        MyUserInfoResp GetAccountUser (string accountID, string userId, string scratchCodes = null, string properties = null);

        /// <summary>
        /// Details of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be retrieved.</param>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <param name="properties">Request to return account specific user property values according to the given property name. (optional)</param>
        /// <returns>ApiResponse of MyUserInfoResp</returns>
        ApiResponse<MyUserInfoResp> GetAccountUserWithHttpInfo (string accountID, string userId, string scratchCodes = null, string properties = null);
        /// <summary>
        /// Get all API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="keyEq">API key filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        ApiKeyInfoRespList GetAllAccountApiKeys (string accountID, int? limit = null, string after = null, string order = null, string include = null, string keyEq = null, string ownerEq = null);

        /// <summary>
        /// Get all API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="keyEq">API key filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        ApiResponse<ApiKeyInfoRespList> GetAllAccountApiKeysWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string keyEq = null, string ownerEq = null);
        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for certificate name (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <param name="deviceExecutionModeNeq">Filter for not developer certificates (optional)</param>
        /// <param name="ownerEq">Owner name filter (optional)</param>
        /// <param name="enrollmentModeEq">Enrollment mode filter (optional)</param>
        /// <param name="issuerLike">Filter for issuer (optional)</param>
        /// <param name="subjectLike">Filter for subject (optional)</param>
        /// <returns>TrustedCertificateInternalRespList</returns>
        TrustedCertificateInternalRespList GetAllAccountCertificates (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, int? deviceExecutionModeNeq = null, string ownerEq = null, bool? enrollmentModeEq = null, string issuerLike = null, string subjectLike = null);

        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for certificate name (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <param name="deviceExecutionModeNeq">Filter for not developer certificates (optional)</param>
        /// <param name="ownerEq">Owner name filter (optional)</param>
        /// <param name="enrollmentModeEq">Enrollment mode filter (optional)</param>
        /// <param name="issuerLike">Filter for issuer (optional)</param>
        /// <param name="subjectLike">Filter for subject (optional)</param>
        /// <returns>ApiResponse of TrustedCertificateInternalRespList</returns>
        ApiResponse<TrustedCertificateInternalRespList> GetAllAccountCertificatesWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, int? deviceExecutionModeNeq = null, string ownerEq = null, bool? enrollmentModeEq = null, string issuerLike = null, string subjectLike = null);
        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for group name (optional)</param>
        /// <returns>List&lt;GroupSummary&gt;</returns>
        List<GroupSummary> GetAllAccountGroups (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null);

        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for group name (optional)</param>
        /// <returns>ApiResponse of List&lt;GroupSummary&gt;</returns>
        ApiResponse<List<GroupSummary>> GetAllAccountGroupsWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null);
        /// <summary>
        /// Get all policies.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all policies in the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="nameEq">Filter result by policy name. (optional)</param>
        /// <param name="statusEq">Filter for status, ACTIVE or INACTIVE. (optional)</param>
        /// <param name="tagEq">Filter results for tag. (optional)</param>
        /// <param name="userIdEq">Retrieve policies attached to a certain user ID. (optional)</param>
        /// <param name="apikeyIdEq">Retrieve policies attached to a certain API key ID. (optional)</param>
        /// <param name="groupIdEq">Retrieve policies attached to a certain group ID. (optional)</param>
        /// <param name="unbounded">Retrieve policies not attached to any subject in the account. (optional)</param>
        /// <returns>PolicyInfoList</returns>
        PolicyInfoList GetAllAccountPolicies (string accountID, int? limit = null, string after = null, string order = null, string nameEq = null, string statusEq = null, string tagEq = null, string userIdEq = null, string apikeyIdEq = null, string groupIdEq = null, string unbounded = null);

        /// <summary>
        /// Get all policies.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all policies in the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="nameEq">Filter result by policy name. (optional)</param>
        /// <param name="statusEq">Filter for status, ACTIVE or INACTIVE. (optional)</param>
        /// <param name="tagEq">Filter results for tag. (optional)</param>
        /// <param name="userIdEq">Retrieve policies attached to a certain user ID. (optional)</param>
        /// <param name="apikeyIdEq">Retrieve policies attached to a certain API key ID. (optional)</param>
        /// <param name="groupIdEq">Retrieve policies attached to a certain group ID. (optional)</param>
        /// <param name="unbounded">Retrieve policies not attached to any subject in the account. (optional)</param>
        /// <returns>ApiResponse of PolicyInfoList</returns>
        ApiResponse<PolicyInfoList> GetAllAccountPoliciesWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string nameEq = null, string statusEq = null, string tagEq = null, string userIdEq = null, string apikeyIdEq = null, string groupIdEq = null, string unbounded = null);
        /// <summary>
        /// Get all user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="emailEq">Filter for email address (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>UserInfoRespList</returns>
        UserInfoRespList GetAllAccountUsers (string accountID, int? limit = null, string after = null, string order = null, string include = null, string emailEq = null, string statusEq = null);

        /// <summary>
        /// Get all user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="emailEq">Filter for email address (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        ApiResponse<UserInfoRespList> GetAllAccountUsersWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string emailEq = null, string statusEq = null);
        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="endMarketEq">An optional filter for account end market. (optional)</param>
        /// <param name="countryLike">An optional filter for account country. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000), default is 1000. (optional, default to 1000)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>AccountInfoList</returns>
        AccountInfoList GetAllAccounts (string statusEq = null, string tierEq = null, string parentEq = null, string endMarketEq = null, string countryLike = null, int? limit = null, string after = null, string order = null, string include = null, string format = null, string properties = null);

        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="endMarketEq">An optional filter for account end market. (optional)</param>
        /// <param name="countryLike">An optional filter for account country. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000), default is 1000. (optional, default to 1000)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>ApiResponse of AccountInfoList</returns>
        ApiResponse<AccountInfoList> GetAllAccountsWithHttpInfo (string statusEq = null, string tierEq = null, string parentEq = null, string endMarketEq = null, string countryLike = null, int? limit = null, string after = null, string order = null, string include = null, string format = null, string properties = null);
        /// <summary>
        /// Get API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        ApiKeyInfoRespList GetApiKeysOfAccountGroup (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        ApiResponse<ApiKeyInfoRespList> GetApiKeysOfAccountGroupWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get groups of the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving groups of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>GroupSummaryList</returns>
        GroupSummaryList GetGroupsOfAccountApikey (string accountID, string apiKey, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get groups of the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving groups of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of GroupSummaryList</returns>
        ApiResponse<GroupSummaryList> GetGroupsOfAccountApikeyWithHttpInfo (string accountID, string apiKey, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get groups of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving groups of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>GroupSummaryList</returns>
        GroupSummaryList GetGroupsOfAccountUser (string accountID, string userId, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get groups of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving groups of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of GroupSummaryList</returns>
        ApiResponse<GroupSummaryList> GetGroupsOfAccountUserWithHttpInfo (string accountID, string userId, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing users of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>UserInfoRespList</returns>
        UserInfoRespList GetUsersOfAccountGroup (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing users of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        ApiResponse<UserInfoRespList> GetUsersOfAccountGroupWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Remove API key from groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API key from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse RemoveAccountApiKeyFromGroups (string accountID, string apiKey, List<string> body);

        /// <summary>
        /// Remove API key from groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API key from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> RemoveAccountApiKeyFromGroupsWithHttpInfo (string accountID, string apiKey, List<string> body);
        /// <summary>
        /// Remove user from groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing user from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse RemoveAccountUserFromGroups (string accountID, string userId, List<string> body);

        /// <summary>
        /// Remove user from groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing user from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> RemoveAccountUserFromGroupsWithHttpInfo (string accountID, string userId, List<string> body);
        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse RemoveApiKeysFromAccountGroup (string accountID, string groupID, SubjectList body = null);

        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> RemoveApiKeysFromAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body = null);
        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse RemoveUsersFromAccountGroup (string accountID, string groupID, SubjectList body = null);

        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> RemoveUsersFromAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body = null);
        /// <summary>
        /// Reset the secret key.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the secret key of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp ResetAccountApiKeySecret (string accountID, string apiKey);

        /// <summary>
        /// Reset the secret key.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the secret key of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> ResetAccountApiKeySecretWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>AccountInfo</returns>
        AccountInfo UpdateAccount (string accountID, AccountUpdateRootReq body);

        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        ApiResponse<AccountInfo> UpdateAccountWithHttpInfo (string accountID, AccountUpdateRootReq body);
        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp UpdateAccountApiKey (string accountID, string apiKey, ApiKeyUpdateReq body);

        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> UpdateAccountApiKeyWithHttpInfo (string accountID, string apiKey, ApiKeyUpdateReq body);
        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>TrustedCertificateInternalResp</returns>
        TrustedCertificateInternalResp UpdateAccountCertificate (string accountID, string certId, TrustedCertificateUpdateReq body);

        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>ApiResponse of TrustedCertificateInternalResp</returns>
        ApiResponse<TrustedCertificateInternalResp> UpdateAccountCertificateWithHttpInfo (string accountID, string certId, TrustedCertificateUpdateReq body);
        /// <summary>
        /// Update a policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating a policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <param name="body">The details of the policy to be updated.</param>
        /// <returns>PolicyInfo</returns>
        PolicyInfo UpdateAccountPolicy (string accountID, string policyId, PolicyUpdateReq body);

        /// <summary>
        /// Update a policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating a policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <param name="body">The details of the policy to be updated.</param>
        /// <returns>ApiResponse of PolicyInfo</returns>
        ApiResponse<PolicyInfo> UpdateAccountPolicyWithHttpInfo (string accountID, string policyId, PolicyUpdateReq body);
        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>UserUpdateResp</returns>
        UserUpdateResp UpdateAccountUser (string accountID, string userId, AdminUserUpdateReq body);

        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>ApiResponse of UserUpdateResp</returns>
        ApiResponse<UserUpdateResp> UpdateAccountUserWithHttpInfo (string accountID, string userId, AdminUserUpdateReq body);
        /// <summary>
        /// Validate the user email.
        /// </summary>
        /// <remarks>
        /// An endpoint for validating the user email.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose email is validated.</param>
        /// <returns></returns>
        void ValidateAccountUserEmail (string accountID, string userId);

        /// <summary>
        /// Validate the user email.
        /// </summary>
        /// <remarks>
        /// An endpoint for validating the user email.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose email is validated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateAccountUserEmailWithHttpInfo (string accountID, string userId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add API key to a list of groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding API key to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AddAccountApiKeyToGroupsAsync (string accountID, string apiKey, List<string> body);

        /// <summary>
        /// Add API key to a list of groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding API key to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddAccountApiKeyToGroupsAsyncWithHttpInfo (string accountID, string apiKey, List<string> body);
        /// <summary>
        /// Upload new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateResp> AddAccountCertificateAsync (string accountID, TrustedCertificateRootReq body);

        /// <summary>
        /// Upload new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> AddAccountCertificateAsyncWithHttpInfo (string accountID, TrustedCertificateRootReq body);
        /// <summary>
        /// Add user to a list of groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding user to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AddAccountUserToGroupsAsync (string accountID, string userId, List<string> body);

        /// <summary>
        /// Add user to a list of groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding user to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddAccountUserToGroupsAsyncWithHttpInfo (string accountID, string userId, List<string> body);
        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AddSubjectsToAccountGroupAsync (string accountID, string groupID, SubjectList body);

        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddSubjectsToAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body);
        /// <summary>
        /// Attach a policy to API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to API keys.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AttachAccountPolicyToApikeysAsync (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Attach a policy to API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to API keys.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AttachAccountPolicyToApikeysAsyncWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Attach a policy to groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AttachAccountPolicyToGroupAsync (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Attach a policy to groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AttachAccountPolicyToGroupAsyncWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Attach a policy to users.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AttachAccountPolicyToUsersAsync (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Attach a policy to users.
        /// </summary>
        /// <remarks>
        /// An endpoint for attaching policy to users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AttachAccountPolicyToUsersAsyncWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Check the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for checking API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The API key to be checked.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckAccountApiKeyAsync (string accountID, string apiKey);

        /// <summary>
        /// Check the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for checking API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The API key to be checked.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <param name="action">Action, either &#39;create&#39;, &#39;enroll&#39; or &#39;enrollment_link&#39;. (optional, default to create)</param>
        /// <returns>Task of AccountCreationResp</returns>
        System.Threading.Tasks.Task<AccountCreationResp> CreateAccountAsync (AccountCreationReq body, string action = null);

        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <param name="action">Action, either &#39;create&#39;, &#39;enroll&#39; or &#39;enrollment_link&#39;. (optional, default to create)</param>
        /// <returns>Task of ApiResponse (AccountCreationResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCreationResp>> CreateAccountAsyncWithHttpInfo (AccountCreationReq body, string action = null);
        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key. There is no default value for the owner ID and it must be from the same account where the new API key is created.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> CreateAccountApiKeyAsync (string accountID, ApiKeyInfoReq body);

        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key. There is no default value for the owner ID and it must be from the same account where the new API key is created.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> CreateAccountApiKeyAsyncWithHttpInfo (string accountID, ApiKeyInfoReq body);
        /// <summary>
        /// Create a policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">The details of the policy to be created.</param>
        /// <returns>Task of PolicyInfo</returns>
        System.Threading.Tasks.Task<PolicyInfo> CreateAccountPolicyAsync (string accountID, PolicyCreationReq body);

        /// <summary>
        /// Create a policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">The details of the policy to be created.</param>
        /// <returns>Task of ApiResponse (PolicyInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyInfo>> CreateAccountPolicyAsyncWithHttpInfo (string accountID, PolicyCreationReq body);
        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> CreateAccountUserAsync (string accountID, UserInfoReq body, string action = null);

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> CreateAccountUserAsyncWithHttpInfo (string accountID, UserInfoReq body, string action = null);
        /// <summary>
        /// Delete the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountApiKeyAsync (string accountID, string apiKey);

        /// <summary>
        /// Delete the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Delete trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountCertificateAsync (string accountID, string certId);

        /// <summary>
        /// Delete trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountCertificateAsyncWithHttpInfo (string accountID, string certId);
        /// <summary>
        /// Delete policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountPolicyAsync (string accountID, string policyId);

        /// <summary>
        /// Delete policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountPolicyAsyncWithHttpInfo (string accountID, string policyId);
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountUserAsync (string accountID, string userId);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountUserAsyncWithHttpInfo (string accountID, string userId);
        /// <summary>
        /// Detach a policy from API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy from API keys.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> DetachAccountPolicyFromApikeysAsync (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Detach a policy from API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy from API keys.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> DetachAccountPolicyFromApikeysAsyncWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Detach a policy from users.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy from users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> DetachAccountPolicyFromUsersAsync (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Detach a policy from users.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy from users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> DetachAccountPolicyFromUsersAsyncWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Detach a policy to groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> DetachAccountPolicyToGroupAsync (string accountID, string policyId, List<string> body);

        /// <summary>
        /// Detach a policy to groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for detaching policy to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> DetachAccountPolicyToGroupAsyncWithHttpInfo (string accountID, string policyId, List<string> body);
        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> GetAccountApiKeyAsync (string accountID, string apiKey);

        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> GetAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be retrieved.</param>
        /// <returns>Task of TrustedCertificateInternalResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateInternalResp> GetAccountCertificateAsync (string accountID, string certId);

        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be retrieved.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalResp>> GetAccountCertificateAsyncWithHttpInfo (string accountID, string certId);
        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be retrieved.</param>
        /// <returns>Task of GroupSummary</returns>
        System.Threading.Tasks.Task<GroupSummary> GetAccountGroupSummaryAsync (string accountID, string groupID);

        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be retrieved.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GetAccountGroupSummaryAsyncWithHttpInfo (string accountID, string groupID);
        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>Task of AccountInfo</returns>
        System.Threading.Tasks.Task<AccountInfo> GetAccountInfoAsync (string accountID, string include = null, string properties = null);

        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfo>> GetAccountInfoAsyncWithHttpInfo (string accountID, string include = null, string properties = null);
        /// <summary>
        /// Get policy by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a policy by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <returns>Task of PolicyInfo</returns>
        System.Threading.Tasks.Task<PolicyInfo> GetAccountPolicyAsync (string accountID, string policyId);

        /// <summary>
        /// Get policy by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a policy by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <returns>Task of ApiResponse (PolicyInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyInfo>> GetAccountPolicyAsyncWithHttpInfo (string accountID, string policyId);
        /// <summary>
        /// Fetch details of policy&#39;s API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about API keys this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        System.Threading.Tasks.Task<ApiKeyInfoRespList> GetAccountPolicyApikeysAsync (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Fetch details of policy&#39;s API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about API keys this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetAccountPolicyApikeysAsyncWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Fetch details of policy&#39;s groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about groups this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of GroupSummaryList</returns>
        System.Threading.Tasks.Task<GroupSummaryList> GetAccountPolicyGroupsAsync (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Fetch details of policy&#39;s groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about groups this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummaryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummaryList>> GetAccountPolicyGroupsAsyncWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Fetch details of policy&#39;s users.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about users this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose users to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        System.Threading.Tasks.Task<UserInfoRespList> GetAccountPolicyUsersAsync (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Fetch details of policy&#39;s users.
        /// </summary>
        /// <remarks>
        /// An endpoint for fetching detailed information about users this policy is attached to.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose users to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetAccountPolicyUsersAsyncWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Details of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be retrieved.</param>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <param name="properties">Request to return account specific user property values according to the given property name. (optional)</param>
        /// <returns>Task of MyUserInfoResp</returns>
        System.Threading.Tasks.Task<MyUserInfoResp> GetAccountUserAsync (string accountID, string userId, string scratchCodes = null, string properties = null);

        /// <summary>
        /// Details of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be retrieved.</param>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <param name="properties">Request to return account specific user property values according to the given property name. (optional)</param>
        /// <returns>Task of ApiResponse (MyUserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<MyUserInfoResp>> GetAccountUserAsyncWithHttpInfo (string accountID, string userId, string scratchCodes = null, string properties = null);
        /// <summary>
        /// Get all API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="keyEq">API key filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        System.Threading.Tasks.Task<ApiKeyInfoRespList> GetAllAccountApiKeysAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string keyEq = null, string ownerEq = null);

        /// <summary>
        /// Get all API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="keyEq">API key filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetAllAccountApiKeysAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string keyEq = null, string ownerEq = null);
        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for certificate name (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <param name="deviceExecutionModeNeq">Filter for not developer certificates (optional)</param>
        /// <param name="ownerEq">Owner name filter (optional)</param>
        /// <param name="enrollmentModeEq">Enrollment mode filter (optional)</param>
        /// <param name="issuerLike">Filter for issuer (optional)</param>
        /// <param name="subjectLike">Filter for subject (optional)</param>
        /// <returns>Task of TrustedCertificateInternalRespList</returns>
        System.Threading.Tasks.Task<TrustedCertificateInternalRespList> GetAllAccountCertificatesAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, int? deviceExecutionModeNeq = null, string ownerEq = null, bool? enrollmentModeEq = null, string issuerLike = null, string subjectLike = null);

        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for certificate name (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <param name="deviceExecutionModeNeq">Filter for not developer certificates (optional)</param>
        /// <param name="ownerEq">Owner name filter (optional)</param>
        /// <param name="enrollmentModeEq">Enrollment mode filter (optional)</param>
        /// <param name="issuerLike">Filter for issuer (optional)</param>
        /// <param name="subjectLike">Filter for subject (optional)</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalRespList>> GetAllAccountCertificatesAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, int? deviceExecutionModeNeq = null, string ownerEq = null, bool? enrollmentModeEq = null, string issuerLike = null, string subjectLike = null);
        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for group name (optional)</param>
        /// <returns>Task of List&lt;GroupSummary&gt;</returns>
        System.Threading.Tasks.Task<List<GroupSummary>> GetAllAccountGroupsAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null);

        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for group name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GroupSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupSummary>>> GetAllAccountGroupsAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null);
        /// <summary>
        /// Get all policies.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all policies in the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="nameEq">Filter result by policy name. (optional)</param>
        /// <param name="statusEq">Filter for status, ACTIVE or INACTIVE. (optional)</param>
        /// <param name="tagEq">Filter results for tag. (optional)</param>
        /// <param name="userIdEq">Retrieve policies attached to a certain user ID. (optional)</param>
        /// <param name="apikeyIdEq">Retrieve policies attached to a certain API key ID. (optional)</param>
        /// <param name="groupIdEq">Retrieve policies attached to a certain group ID. (optional)</param>
        /// <param name="unbounded">Retrieve policies not attached to any subject in the account. (optional)</param>
        /// <returns>Task of PolicyInfoList</returns>
        System.Threading.Tasks.Task<PolicyInfoList> GetAllAccountPoliciesAsync (string accountID, int? limit = null, string after = null, string order = null, string nameEq = null, string statusEq = null, string tagEq = null, string userIdEq = null, string apikeyIdEq = null, string groupIdEq = null, string unbounded = null);

        /// <summary>
        /// Get all policies.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all policies in the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="nameEq">Filter result by policy name. (optional)</param>
        /// <param name="statusEq">Filter for status, ACTIVE or INACTIVE. (optional)</param>
        /// <param name="tagEq">Filter results for tag. (optional)</param>
        /// <param name="userIdEq">Retrieve policies attached to a certain user ID. (optional)</param>
        /// <param name="apikeyIdEq">Retrieve policies attached to a certain API key ID. (optional)</param>
        /// <param name="groupIdEq">Retrieve policies attached to a certain group ID. (optional)</param>
        /// <param name="unbounded">Retrieve policies not attached to any subject in the account. (optional)</param>
        /// <returns>Task of ApiResponse (PolicyInfoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyInfoList>> GetAllAccountPoliciesAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string nameEq = null, string statusEq = null, string tagEq = null, string userIdEq = null, string apikeyIdEq = null, string groupIdEq = null, string unbounded = null);
        /// <summary>
        /// Get all user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="emailEq">Filter for email address (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        System.Threading.Tasks.Task<UserInfoRespList> GetAllAccountUsersAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string emailEq = null, string statusEq = null);

        /// <summary>
        /// Get all user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="emailEq">Filter for email address (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetAllAccountUsersAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string emailEq = null, string statusEq = null);
        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="endMarketEq">An optional filter for account end market. (optional)</param>
        /// <param name="countryLike">An optional filter for account country. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000), default is 1000. (optional, default to 1000)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>Task of AccountInfoList</returns>
        System.Threading.Tasks.Task<AccountInfoList> GetAllAccountsAsync (string statusEq = null, string tierEq = null, string parentEq = null, string endMarketEq = null, string countryLike = null, int? limit = null, string after = null, string order = null, string include = null, string format = null, string properties = null);

        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="endMarketEq">An optional filter for account end market. (optional)</param>
        /// <param name="countryLike">An optional filter for account country. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000), default is 1000. (optional, default to 1000)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfoList>> GetAllAccountsAsyncWithHttpInfo (string statusEq = null, string tierEq = null, string parentEq = null, string endMarketEq = null, string countryLike = null, int? limit = null, string after = null, string order = null, string include = null, string format = null, string properties = null);
        /// <summary>
        /// Get API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        System.Threading.Tasks.Task<ApiKeyInfoRespList> GetApiKeysOfAccountGroupAsync (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetApiKeysOfAccountGroupAsyncWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get groups of the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving groups of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of GroupSummaryList</returns>
        System.Threading.Tasks.Task<GroupSummaryList> GetGroupsOfAccountApikeyAsync (string accountID, string apiKey, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get groups of the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving groups of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummaryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummaryList>> GetGroupsOfAccountApikeyAsyncWithHttpInfo (string accountID, string apiKey, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get groups of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving groups of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of GroupSummaryList</returns>
        System.Threading.Tasks.Task<GroupSummaryList> GetGroupsOfAccountUserAsync (string accountID, string userId, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get groups of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving groups of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummaryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummaryList>> GetGroupsOfAccountUserAsyncWithHttpInfo (string accountID, string userId, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing users of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        System.Threading.Tasks.Task<UserInfoRespList> GetUsersOfAccountGroupAsync (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing users of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetUsersOfAccountGroupAsyncWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Remove API key from groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API key from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> RemoveAccountApiKeyFromGroupsAsync (string accountID, string apiKey, List<string> body);

        /// <summary>
        /// Remove API key from groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API key from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveAccountApiKeyFromGroupsAsyncWithHttpInfo (string accountID, string apiKey, List<string> body);
        /// <summary>
        /// Remove user from groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing user from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> RemoveAccountUserFromGroupsAsync (string accountID, string userId, List<string> body);

        /// <summary>
        /// Remove user from groups.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing user from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveAccountUserFromGroupsAsyncWithHttpInfo (string accountID, string userId, List<string> body);
        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> RemoveApiKeysFromAccountGroupAsync (string accountID, string groupID, SubjectList body = null);

        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveApiKeysFromAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body = null);
        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> RemoveUsersFromAccountGroupAsync (string accountID, string groupID, SubjectList body = null);

        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveUsersFromAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body = null);
        /// <summary>
        /// Reset the secret key.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the secret key of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> ResetAccountApiKeySecretAsync (string accountID, string apiKey);

        /// <summary>
        /// Reset the secret key.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the secret key of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> ResetAccountApiKeySecretAsyncWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of AccountInfo</returns>
        System.Threading.Tasks.Task<AccountInfo> UpdateAccountAsync (string accountID, AccountUpdateRootReq body);

        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfo>> UpdateAccountAsyncWithHttpInfo (string accountID, AccountUpdateRootReq body);
        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> UpdateAccountApiKeyAsync (string accountID, string apiKey, ApiKeyUpdateReq body);

        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> UpdateAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey, ApiKeyUpdateReq body);
        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of TrustedCertificateInternalResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateInternalResp> UpdateAccountCertificateAsync (string accountID, string certId, TrustedCertificateUpdateReq body);

        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalResp>> UpdateAccountCertificateAsyncWithHttpInfo (string accountID, string certId, TrustedCertificateUpdateReq body);
        /// <summary>
        /// Update a policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating a policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <param name="body">The details of the policy to be updated.</param>
        /// <returns>Task of PolicyInfo</returns>
        System.Threading.Tasks.Task<PolicyInfo> UpdateAccountPolicyAsync (string accountID, string policyId, PolicyUpdateReq body);

        /// <summary>
        /// Update a policy.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating a policy.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <param name="body">The details of the policy to be updated.</param>
        /// <returns>Task of ApiResponse (PolicyInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyInfo>> UpdateAccountPolicyAsyncWithHttpInfo (string accountID, string policyId, PolicyUpdateReq body);
        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>Task of UserUpdateResp</returns>
        System.Threading.Tasks.Task<UserUpdateResp> UpdateAccountUserAsync (string accountID, string userId, AdminUserUpdateReq body);

        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>Task of ApiResponse (UserUpdateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserUpdateResp>> UpdateAccountUserAsyncWithHttpInfo (string accountID, string userId, AdminUserUpdateReq body);
        /// <summary>
        /// Validate the user email.
        /// </summary>
        /// <remarks>
        /// An endpoint for validating the user email.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose email is validated.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateAccountUserEmailAsync (string accountID, string userId);

        /// <summary>
        /// Validate the user email.
        /// </summary>
        /// <remarks>
        /// An endpoint for validating the user email.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose email is validated.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateAccountUserEmailAsyncWithHttpInfo (string accountID, string userId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AggregatorAccountAdminApi : IAggregatorAccountAdminApi
    {
        private iam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatorAccountAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AggregatorAccountAdminApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatorAccountAdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AggregatorAccountAdminApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public iam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add API key to a list of groups. An endpoint for adding API key to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AddAccountApiKeyToGroups (string accountID, string apiKey, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AddAccountApiKeyToGroupsWithHttpInfo(accountID, apiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add API key to a list of groups. An endpoint for adding API key to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AddAccountApiKeyToGroupsWithHttpInfo (string accountID, string apiKey, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AddAccountApiKeyToGroups");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->AddAccountApiKeyToGroups");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AddAccountApiKeyToGroups");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAccountApiKeyToGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Add API key to a list of groups. An endpoint for adding API key to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AddAccountApiKeyToGroupsAsync (string accountID, string apiKey, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AddAccountApiKeyToGroupsAsyncWithHttpInfo(accountID, apiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add API key to a list of groups. An endpoint for adding API key to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddAccountApiKeyToGroupsAsyncWithHttpInfo (string accountID, string apiKey, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AddAccountApiKeyToGroups");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->AddAccountApiKeyToGroups");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AddAccountApiKeyToGroups");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAccountApiKeyToGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Upload new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>TrustedCertificateResp</returns>
        public TrustedCertificateResp AddAccountCertificate (string accountID, TrustedCertificateRootReq body)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = AddAccountCertificateWithHttpInfo(accountID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        public ApiResponse< TrustedCertificateResp > AddAccountCertificateWithHttpInfo (string accountID, TrustedCertificateRootReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AddAccountCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AddAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
        }

        /// <summary>
        /// Upload new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateResp> AddAccountCertificateAsync (string accountID, TrustedCertificateRootReq body)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = await AddAccountCertificateAsyncWithHttpInfo(accountID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> AddAccountCertificateAsyncWithHttpInfo (string accountID, TrustedCertificateRootReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AddAccountCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AddAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
        }

        /// <summary>
        /// Add user to a list of groups. An endpoint for adding user to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AddAccountUserToGroups (string accountID, string userId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AddAccountUserToGroupsWithHttpInfo(accountID, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add user to a list of groups. An endpoint for adding user to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AddAccountUserToGroupsWithHttpInfo (string accountID, string userId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AddAccountUserToGroups");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->AddAccountUserToGroups");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AddAccountUserToGroups");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAccountUserToGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Add user to a list of groups. An endpoint for adding user to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AddAccountUserToGroupsAsync (string accountID, string userId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AddAccountUserToGroupsAsyncWithHttpInfo(accountID, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add user to a list of groups. An endpoint for adding user to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be added to the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddAccountUserToGroupsAsyncWithHttpInfo (string accountID, string userId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AddAccountUserToGroups");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->AddAccountUserToGroups");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AddAccountUserToGroups");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAccountUserToGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AddSubjectsToAccountGroup (string accountID, string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AddSubjectsToAccountGroupWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AddSubjectsToAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AddSubjectsToAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->AddSubjectsToAccountGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AddSubjectsToAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSubjectsToAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AddSubjectsToAccountGroupAsync (string accountID, string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AddSubjectsToAccountGroupAsyncWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddSubjectsToAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AddSubjectsToAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->AddSubjectsToAccountGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AddSubjectsToAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSubjectsToAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Attach a policy to API keys. An endpoint for attaching policy to API keys.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AttachAccountPolicyToApikeys (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AttachAccountPolicyToApikeysWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a policy to API keys. An endpoint for attaching policy to API keys.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AttachAccountPolicyToApikeysWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AttachAccountPolicyToApikeys");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->AttachAccountPolicyToApikeys");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AttachAccountPolicyToApikeys");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachAccountPolicyToApikeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Attach a policy to API keys. An endpoint for attaching policy to API keys.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AttachAccountPolicyToApikeysAsync (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AttachAccountPolicyToApikeysAsyncWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach a policy to API keys. An endpoint for attaching policy to API keys.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AttachAccountPolicyToApikeysAsyncWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AttachAccountPolicyToApikeys");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->AttachAccountPolicyToApikeys");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AttachAccountPolicyToApikeys");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachAccountPolicyToApikeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Attach a policy to groups. An endpoint for attaching policy to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AttachAccountPolicyToGroup (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AttachAccountPolicyToGroupWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a policy to groups. An endpoint for attaching policy to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AttachAccountPolicyToGroupWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AttachAccountPolicyToGroup");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->AttachAccountPolicyToGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AttachAccountPolicyToGroup");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachAccountPolicyToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Attach a policy to groups. An endpoint for attaching policy to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AttachAccountPolicyToGroupAsync (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AttachAccountPolicyToGroupAsyncWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach a policy to groups. An endpoint for attaching policy to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AttachAccountPolicyToGroupAsyncWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AttachAccountPolicyToGroup");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->AttachAccountPolicyToGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AttachAccountPolicyToGroup");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachAccountPolicyToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Attach a policy to users. An endpoint for attaching policy to users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AttachAccountPolicyToUsers (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AttachAccountPolicyToUsersWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a policy to users. An endpoint for attaching policy to users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AttachAccountPolicyToUsersWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AttachAccountPolicyToUsers");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->AttachAccountPolicyToUsers");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AttachAccountPolicyToUsers");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachAccountPolicyToUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Attach a policy to users. An endpoint for attaching policy to users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AttachAccountPolicyToUsersAsync (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AttachAccountPolicyToUsersAsyncWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach a policy to users. An endpoint for attaching policy to users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be attached to users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AttachAccountPolicyToUsersAsyncWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->AttachAccountPolicyToUsers");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->AttachAccountPolicyToUsers");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->AttachAccountPolicyToUsers");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachAccountPolicyToUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Check the API key. An endpoint for checking API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The API key to be checked.</param>
        /// <returns></returns>
        public void CheckAccountApiKey (string accountID, string apiKey)
        {
             CheckAccountApiKeyWithHttpInfo(accountID, apiKey);
        }

        /// <summary>
        /// Check the API key. An endpoint for checking API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The API key to be checked.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckAccountApiKeyWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->CheckAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->CheckAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the API key. An endpoint for checking API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The API key to be checked.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckAccountApiKeyAsync (string accountID, string apiKey)
        {
             await CheckAccountApiKeyAsyncWithHttpInfo(accountID, apiKey);

        }

        /// <summary>
        /// Check the API key. An endpoint for checking API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The API key to be checked.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->CheckAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->CheckAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <param name="action">Action, either &#39;create&#39;, &#39;enroll&#39; or &#39;enrollment_link&#39;. (optional, default to create)</param>
        /// <returns>AccountCreationResp</returns>
        public AccountCreationResp CreateAccount (AccountCreationReq body, string action = null)
        {
             ApiResponse<AccountCreationResp> localVarResponse = CreateAccountWithHttpInfo(body, action);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <param name="action">Action, either &#39;create&#39;, &#39;enroll&#39; or &#39;enrollment_link&#39;. (optional, default to create)</param>
        /// <returns>ApiResponse of AccountCreationResp</returns>
        public ApiResponse< AccountCreationResp > CreateAccountWithHttpInfo (AccountCreationReq body, string action = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->CreateAccount");

            var localVarPath = "/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCreationResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCreationResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCreationResp)));
        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <param name="action">Action, either &#39;create&#39;, &#39;enroll&#39; or &#39;enrollment_link&#39;. (optional, default to create)</param>
        /// <returns>Task of AccountCreationResp</returns>
        public async System.Threading.Tasks.Task<AccountCreationResp> CreateAccountAsync (AccountCreationReq body, string action = null)
        {
             ApiResponse<AccountCreationResp> localVarResponse = await CreateAccountAsyncWithHttpInfo(body, action);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <param name="action">Action, either &#39;create&#39;, &#39;enroll&#39; or &#39;enrollment_link&#39;. (optional, default to create)</param>
        /// <returns>Task of ApiResponse (AccountCreationResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountCreationResp>> CreateAccountAsyncWithHttpInfo (AccountCreationReq body, string action = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->CreateAccount");

            var localVarPath = "/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (action != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCreationResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCreationResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCreationResp)));
        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key. There is no default value for the owner ID and it must be from the same account where the new API key is created.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp CreateAccountApiKey (string accountID, ApiKeyInfoReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = CreateAccountApiKeyWithHttpInfo(accountID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key. There is no default value for the owner ID and it must be from the same account where the new API key is created.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > CreateAccountApiKeyWithHttpInfo (string accountID, ApiKeyInfoReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->CreateAccountApiKey");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->CreateAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key. There is no default value for the owner ID and it must be from the same account where the new API key is created.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> CreateAccountApiKeyAsync (string accountID, ApiKeyInfoReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await CreateAccountApiKeyAsyncWithHttpInfo(accountID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key. There is no default value for the owner ID and it must be from the same account where the new API key is created.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> CreateAccountApiKeyAsyncWithHttpInfo (string accountID, ApiKeyInfoReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->CreateAccountApiKey");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->CreateAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
        }

        /// <summary>
        /// Create a policy. An endpoint for creating a new policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">The details of the policy to be created.</param>
        /// <returns>PolicyInfo</returns>
        public PolicyInfo CreateAccountPolicy (string accountID, PolicyCreationReq body)
        {
             ApiResponse<PolicyInfo> localVarResponse = CreateAccountPolicyWithHttpInfo(accountID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a policy. An endpoint for creating a new policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">The details of the policy to be created.</param>
        /// <returns>ApiResponse of PolicyInfo</returns>
        public ApiResponse< PolicyInfo > CreateAccountPolicyWithHttpInfo (string accountID, PolicyCreationReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->CreateAccountPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->CreateAccountPolicy");

            var localVarPath = "/v3/accounts/{accountID}/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyInfo)));
        }

        /// <summary>
        /// Create a policy. An endpoint for creating a new policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">The details of the policy to be created.</param>
        /// <returns>Task of PolicyInfo</returns>
        public async System.Threading.Tasks.Task<PolicyInfo> CreateAccountPolicyAsync (string accountID, PolicyCreationReq body)
        {
             ApiResponse<PolicyInfo> localVarResponse = await CreateAccountPolicyAsyncWithHttpInfo(accountID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a policy. An endpoint for creating a new policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">The details of the policy to be created.</param>
        /// <returns>Task of ApiResponse (PolicyInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyInfo>> CreateAccountPolicyAsyncWithHttpInfo (string accountID, PolicyCreationReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->CreateAccountPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->CreateAccountPolicy");

            var localVarPath = "/v3/accounts/{accountID}/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyInfo)));
        }

        /// <summary>
        /// Create a new user. An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp CreateAccountUser (string accountID, UserInfoReq body, string action = null)
        {
             ApiResponse<UserInfoResp> localVarResponse = CreateAccountUserWithHttpInfo(accountID, body, action);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user. An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > CreateAccountUserWithHttpInfo (string accountID, UserInfoReq body, string action = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->CreateAccountUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->CreateAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (action != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
        }

        /// <summary>
        /// Create a new user. An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> CreateAccountUserAsync (string accountID, UserInfoReq body, string action = null)
        {
             ApiResponse<UserInfoResp> localVarResponse = await CreateAccountUserAsyncWithHttpInfo(accountID, body, action);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new user. An endpoint for creating or inviting a new user to the account. In case of invitation email address is used only, other attributes are set in the 2nd step.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> CreateAccountUserAsyncWithHttpInfo (string accountID, UserInfoReq body, string action = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->CreateAccountUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->CreateAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (action != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
        }

        /// <summary>
        /// Delete the API key. An endpoint for deleting an API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccountApiKey (string accountID, string apiKey)
        {
             DeleteAccountApiKeyWithHttpInfo(accountID, apiKey);
        }

        /// <summary>
        /// Delete the API key. An endpoint for deleting an API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountApiKeyWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DeleteAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->DeleteAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the API key. An endpoint for deleting an API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountApiKeyAsync (string accountID, string apiKey)
        {
             await DeleteAccountApiKeyAsyncWithHttpInfo(accountID, apiKey);

        }

        /// <summary>
        /// Delete the API key. An endpoint for deleting an API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DeleteAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->DeleteAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete trusted certificate by ID. An endpoint for deleting the trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccountCertificate (string accountID, string certId)
        {
             DeleteAccountCertificateWithHttpInfo(accountID, certId);
        }

        /// <summary>
        /// Delete trusted certificate by ID. An endpoint for deleting the trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountCertificateWithHttpInfo (string accountID, string certId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DeleteAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AggregatorAccountAdminApi->DeleteAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete trusted certificate by ID. An endpoint for deleting the trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountCertificateAsync (string accountID, string certId)
        {
             await DeleteAccountCertificateAsyncWithHttpInfo(accountID, certId);

        }

        /// <summary>
        /// Delete trusted certificate by ID. An endpoint for deleting the trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountCertificateAsyncWithHttpInfo (string accountID, string certId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DeleteAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AggregatorAccountAdminApi->DeleteAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete policy. An endpoint for deleting a policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccountPolicy (string accountID, string policyId)
        {
             DeleteAccountPolicyWithHttpInfo(accountID, policyId);
        }

        /// <summary>
        /// Delete policy. An endpoint for deleting a policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountPolicyWithHttpInfo (string accountID, string policyId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DeleteAccountPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->DeleteAccountPolicy");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete policy. An endpoint for deleting a policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountPolicyAsync (string accountID, string policyId)
        {
             await DeleteAccountPolicyAsyncWithHttpInfo(accountID, policyId);

        }

        /// <summary>
        /// Delete policy. An endpoint for deleting a policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountPolicyAsyncWithHttpInfo (string accountID, string policyId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DeleteAccountPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->DeleteAccountPolicy");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccountUser (string accountID, string userId)
        {
             DeleteAccountUserWithHttpInfo(accountID, userId);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountUserWithHttpInfo (string accountID, string userId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DeleteAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->DeleteAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountUserAsync (string accountID, string userId)
        {
             await DeleteAccountUserAsyncWithHttpInfo(accountID, userId);

        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountUserAsyncWithHttpInfo (string accountID, string userId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DeleteAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->DeleteAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detach a policy from API keys. An endpoint for detaching policy from API keys.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse DetachAccountPolicyFromApikeys (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = DetachAccountPolicyFromApikeysWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a policy from API keys. An endpoint for detaching policy from API keys.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > DetachAccountPolicyFromApikeysWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromApikeys");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromApikeys");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromApikeys");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetachAccountPolicyFromApikeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Detach a policy from API keys. An endpoint for detaching policy from API keys.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> DetachAccountPolicyFromApikeysAsync (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await DetachAccountPolicyFromApikeysAsyncWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detach a policy from API keys. An endpoint for detaching policy from API keys.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from API keys.</param>
        /// <param name="body">List of API key IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> DetachAccountPolicyFromApikeysAsyncWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromApikeys");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromApikeys");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromApikeys");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetachAccountPolicyFromApikeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Detach a policy from users. An endpoint for detaching policy from users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse DetachAccountPolicyFromUsers (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = DetachAccountPolicyFromUsersWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a policy from users. An endpoint for detaching policy from users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > DetachAccountPolicyFromUsersWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromUsers");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromUsers");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromUsers");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetachAccountPolicyFromUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Detach a policy from users. An endpoint for detaching policy from users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> DetachAccountPolicyFromUsersAsync (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await DetachAccountPolicyFromUsersAsyncWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detach a policy from users. An endpoint for detaching policy from users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from users.</param>
        /// <param name="body">List of user IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> DetachAccountPolicyFromUsersAsyncWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromUsers");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromUsers");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->DetachAccountPolicyFromUsers");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetachAccountPolicyFromUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Detach a policy to groups. An endpoint for detaching policy to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse DetachAccountPolicyToGroup (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = DetachAccountPolicyToGroupWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detach a policy to groups. An endpoint for detaching policy to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > DetachAccountPolicyToGroupWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DetachAccountPolicyToGroup");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->DetachAccountPolicyToGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->DetachAccountPolicyToGroup");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetachAccountPolicyToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Detach a policy to groups. An endpoint for detaching policy to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> DetachAccountPolicyToGroupAsync (string accountID, string policyId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await DetachAccountPolicyToGroupAsyncWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detach a policy to groups. An endpoint for detaching policy to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID of the policy to be detached from groups.</param>
        /// <param name="body">List of groups IDs.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> DetachAccountPolicyToGroupAsyncWithHttpInfo (string accountID, string policyId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->DetachAccountPolicyToGroup");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->DetachAccountPolicyToGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->DetachAccountPolicyToGroup");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetachAccountPolicyToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp GetAccountApiKey (string accountID, string apiKey)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = GetAccountApiKeyWithHttpInfo(accountID, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > GetAccountApiKeyWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->GetAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> GetAccountApiKeyAsync (string accountID, string apiKey)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await GetAccountApiKeyAsyncWithHttpInfo(accountID, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> GetAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->GetAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be retrieved.</param>
        /// <returns>TrustedCertificateInternalResp</returns>
        public TrustedCertificateInternalResp GetAccountCertificate (string accountID, string certId)
        {
             ApiResponse<TrustedCertificateInternalResp> localVarResponse = GetAccountCertificateWithHttpInfo(accountID, certId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be retrieved.</param>
        /// <returns>ApiResponse of TrustedCertificateInternalResp</returns>
        public ApiResponse< TrustedCertificateInternalResp > GetAccountCertificateWithHttpInfo (string accountID, string certId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AggregatorAccountAdminApi->GetAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalResp)));
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be retrieved.</param>
        /// <returns>Task of TrustedCertificateInternalResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateInternalResp> GetAccountCertificateAsync (string accountID, string certId)
        {
             ApiResponse<TrustedCertificateInternalResp> localVarResponse = await GetAccountCertificateAsyncWithHttpInfo(accountID, certId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be retrieved.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalResp>> GetAccountCertificateAsyncWithHttpInfo (string accountID, string certId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AggregatorAccountAdminApi->GetAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalResp)));
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be retrieved.</param>
        /// <returns>GroupSummary</returns>
        public GroupSummary GetAccountGroupSummary (string accountID, string groupID)
        {
             ApiResponse<GroupSummary> localVarResponse = GetAccountGroupSummaryWithHttpInfo(accountID, groupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be retrieved.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        public ApiResponse< GroupSummary > GetAccountGroupSummaryWithHttpInfo (string accountID, string groupID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountGroupSummary");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->GetAccountGroupSummary");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountGroupSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be retrieved.</param>
        /// <returns>Task of GroupSummary</returns>
        public async System.Threading.Tasks.Task<GroupSummary> GetAccountGroupSummaryAsync (string accountID, string groupID)
        {
             ApiResponse<GroupSummary> localVarResponse = await GetAccountGroupSummaryAsyncWithHttpInfo(accountID, groupID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be retrieved.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GetAccountGroupSummaryAsyncWithHttpInfo (string accountID, string groupID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountGroupSummary");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->GetAccountGroupSummary");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountGroupSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>AccountInfo</returns>
        public AccountInfo GetAccountInfo (string accountID, string include = null, string properties = null)
        {
             ApiResponse<AccountInfo> localVarResponse = GetAccountInfoWithHttpInfo(accountID, include, properties);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        public ApiResponse< AccountInfo > GetAccountInfoWithHttpInfo (string accountID, string include = null, string properties = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountInfo");

            var localVarPath = "/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (properties != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "properties", properties)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>Task of AccountInfo</returns>
        public async System.Threading.Tasks.Task<AccountInfo> GetAccountInfoAsync (string accountID, string include = null, string properties = null)
        {
             ApiResponse<AccountInfo> localVarResponse = await GetAccountInfoAsyncWithHttpInfo(accountID, include, properties);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfo>> GetAccountInfoAsyncWithHttpInfo (string accountID, string include = null, string properties = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountInfo");

            var localVarPath = "/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (properties != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "properties", properties)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
        }

        /// <summary>
        /// Get policy by ID. An endpoint for retrieving a policy by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <returns>PolicyInfo</returns>
        public PolicyInfo GetAccountPolicy (string accountID, string policyId)
        {
             ApiResponse<PolicyInfo> localVarResponse = GetAccountPolicyWithHttpInfo(accountID, policyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get policy by ID. An endpoint for retrieving a policy by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <returns>ApiResponse of PolicyInfo</returns>
        public ApiResponse< PolicyInfo > GetAccountPolicyWithHttpInfo (string accountID, string policyId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->GetAccountPolicy");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyInfo)));
        }

        /// <summary>
        /// Get policy by ID. An endpoint for retrieving a policy by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <returns>Task of PolicyInfo</returns>
        public async System.Threading.Tasks.Task<PolicyInfo> GetAccountPolicyAsync (string accountID, string policyId)
        {
             ApiResponse<PolicyInfo> localVarResponse = await GetAccountPolicyAsyncWithHttpInfo(accountID, policyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get policy by ID. An endpoint for retrieving a policy by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <returns>Task of ApiResponse (PolicyInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyInfo>> GetAccountPolicyAsyncWithHttpInfo (string accountID, string policyId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->GetAccountPolicy");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyInfo)));
        }

        /// <summary>
        /// Fetch details of policy&#39;s API keys. An endpoint for fetching detailed information about API keys this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        public ApiKeyInfoRespList GetAccountPolicyApikeys (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = GetAccountPolicyApikeysWithHttpInfo(accountID, policyId, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch details of policy&#39;s API keys. An endpoint for fetching detailed information about API keys this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        public ApiResponse< ApiKeyInfoRespList > GetAccountPolicyApikeysWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountPolicyApikeys");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->GetAccountPolicyApikeys");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountPolicyApikeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
        }

        /// <summary>
        /// Fetch details of policy&#39;s API keys. An endpoint for fetching detailed information about API keys this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoRespList> GetAccountPolicyApikeysAsync (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = await GetAccountPolicyApikeysAsyncWithHttpInfo(accountID, policyId, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch details of policy&#39;s API keys. An endpoint for fetching detailed information about API keys this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetAccountPolicyApikeysAsyncWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountPolicyApikeys");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->GetAccountPolicyApikeys");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountPolicyApikeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
        }

        /// <summary>
        /// Fetch details of policy&#39;s groups. An endpoint for fetching detailed information about groups this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>GroupSummaryList</returns>
        public GroupSummaryList GetAccountPolicyGroups (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<GroupSummaryList> localVarResponse = GetAccountPolicyGroupsWithHttpInfo(accountID, policyId, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch details of policy&#39;s groups. An endpoint for fetching detailed information about groups this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of GroupSummaryList</returns>
        public ApiResponse< GroupSummaryList > GetAccountPolicyGroupsWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountPolicyGroups");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->GetAccountPolicyGroups");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountPolicyGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummaryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummaryList)));
        }

        /// <summary>
        /// Fetch details of policy&#39;s groups. An endpoint for fetching detailed information about groups this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of GroupSummaryList</returns>
        public async System.Threading.Tasks.Task<GroupSummaryList> GetAccountPolicyGroupsAsync (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<GroupSummaryList> localVarResponse = await GetAccountPolicyGroupsAsyncWithHttpInfo(accountID, policyId, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch details of policy&#39;s groups. An endpoint for fetching detailed information about groups this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose API keys to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummaryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummaryList>> GetAccountPolicyGroupsAsyncWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountPolicyGroups");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->GetAccountPolicyGroups");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountPolicyGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummaryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummaryList)));
        }

        /// <summary>
        /// Fetch details of policy&#39;s users. An endpoint for fetching detailed information about users this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose users to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>UserInfoRespList</returns>
        public UserInfoRespList GetAccountPolicyUsers (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = GetAccountPolicyUsersWithHttpInfo(accountID, policyId, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch details of policy&#39;s users. An endpoint for fetching detailed information about users this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose users to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        public ApiResponse< UserInfoRespList > GetAccountPolicyUsersWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountPolicyUsers");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->GetAccountPolicyUsers");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountPolicyUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
        }

        /// <summary>
        /// Fetch details of policy&#39;s users. An endpoint for fetching detailed information about users this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose users to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        public async System.Threading.Tasks.Task<UserInfoRespList> GetAccountPolicyUsersAsync (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = await GetAccountPolicyUsersAsyncWithHttpInfo(accountID, policyId, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch details of policy&#39;s users. An endpoint for fetching detailed information about users this policy is attached to.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy whose users to be retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetAccountPolicyUsersAsyncWithHttpInfo (string accountID, string policyId, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountPolicyUsers");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->GetAccountPolicyUsers");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountPolicyUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
        }

        /// <summary>
        /// Details of the user. An endpoint for retrieving details of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be retrieved.</param>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <param name="properties">Request to return account specific user property values according to the given property name. (optional)</param>
        /// <returns>MyUserInfoResp</returns>
        public MyUserInfoResp GetAccountUser (string accountID, string userId, string scratchCodes = null, string properties = null)
        {
             ApiResponse<MyUserInfoResp> localVarResponse = GetAccountUserWithHttpInfo(accountID, userId, scratchCodes, properties);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Details of the user. An endpoint for retrieving details of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be retrieved.</param>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <param name="properties">Request to return account specific user property values according to the given property name. (optional)</param>
        /// <returns>ApiResponse of MyUserInfoResp</returns>
        public ApiResponse< MyUserInfoResp > GetAccountUserWithHttpInfo (string accountID, string userId, string scratchCodes = null, string properties = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->GetAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (scratchCodes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scratch_codes", scratchCodes)); // query parameter
            if (properties != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "properties", properties)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyUserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MyUserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyUserInfoResp)));
        }

        /// <summary>
        /// Details of the user. An endpoint for retrieving details of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be retrieved.</param>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <param name="properties">Request to return account specific user property values according to the given property name. (optional)</param>
        /// <returns>Task of MyUserInfoResp</returns>
        public async System.Threading.Tasks.Task<MyUserInfoResp> GetAccountUserAsync (string accountID, string userId, string scratchCodes = null, string properties = null)
        {
             ApiResponse<MyUserInfoResp> localVarResponse = await GetAccountUserAsyncWithHttpInfo(accountID, userId, scratchCodes, properties);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Details of the user. An endpoint for retrieving details of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be retrieved.</param>
        /// <param name="scratchCodes">Request to regenerate new emergency scratch codes. (optional)</param>
        /// <param name="properties">Request to return account specific user property values according to the given property name. (optional)</param>
        /// <returns>Task of ApiResponse (MyUserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MyUserInfoResp>> GetAccountUserAsyncWithHttpInfo (string accountID, string userId, string scratchCodes = null, string properties = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->GetAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (scratchCodes != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scratch_codes", scratchCodes)); // query parameter
            if (properties != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "properties", properties)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MyUserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MyUserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MyUserInfoResp)));
        }

        /// <summary>
        /// Get all API keys. An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="keyEq">API key filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        public ApiKeyInfoRespList GetAllAccountApiKeys (string accountID, int? limit = null, string after = null, string order = null, string include = null, string keyEq = null, string ownerEq = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = GetAllAccountApiKeysWithHttpInfo(accountID, limit, after, order, include, keyEq, ownerEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all API keys. An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="keyEq">API key filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        public ApiResponse< ApiKeyInfoRespList > GetAllAccountApiKeysWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string keyEq = null, string ownerEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAllAccountApiKeys");

            var localVarPath = "/v3/accounts/{accountID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (keyEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key__eq", keyEq)); // query parameter
            if (ownerEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "owner__eq", ownerEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
        }

        /// <summary>
        /// Get all API keys. An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="keyEq">API key filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoRespList> GetAllAccountApiKeysAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string keyEq = null, string ownerEq = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = await GetAllAccountApiKeysAsyncWithHttpInfo(accountID, limit, after, order, include, keyEq, ownerEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all API keys. An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="keyEq">API key filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetAllAccountApiKeysAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string keyEq = null, string ownerEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAllAccountApiKeys");

            var localVarPath = "/v3/accounts/{accountID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (keyEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key__eq", keyEq)); // query parameter
            if (ownerEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "owner__eq", ownerEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for certificate name (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <param name="deviceExecutionModeNeq">Filter for not developer certificates (optional)</param>
        /// <param name="ownerEq">Owner name filter (optional)</param>
        /// <param name="enrollmentModeEq">Enrollment mode filter (optional)</param>
        /// <param name="issuerLike">Filter for issuer (optional)</param>
        /// <param name="subjectLike">Filter for subject (optional)</param>
        /// <returns>TrustedCertificateInternalRespList</returns>
        public TrustedCertificateInternalRespList GetAllAccountCertificates (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, int? deviceExecutionModeNeq = null, string ownerEq = null, bool? enrollmentModeEq = null, string issuerLike = null, string subjectLike = null)
        {
             ApiResponse<TrustedCertificateInternalRespList> localVarResponse = GetAllAccountCertificatesWithHttpInfo(accountID, limit, after, order, include, nameEq, serviceEq, expireEq, deviceExecutionModeEq, deviceExecutionModeNeq, ownerEq, enrollmentModeEq, issuerLike, subjectLike);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for certificate name (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <param name="deviceExecutionModeNeq">Filter for not developer certificates (optional)</param>
        /// <param name="ownerEq">Owner name filter (optional)</param>
        /// <param name="enrollmentModeEq">Enrollment mode filter (optional)</param>
        /// <param name="issuerLike">Filter for issuer (optional)</param>
        /// <param name="subjectLike">Filter for subject (optional)</param>
        /// <returns>ApiResponse of TrustedCertificateInternalRespList</returns>
        public ApiResponse< TrustedCertificateInternalRespList > GetAllAccountCertificatesWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, int? deviceExecutionModeNeq = null, string ownerEq = null, bool? enrollmentModeEq = null, string issuerLike = null, string subjectLike = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAllAccountCertificates");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (nameEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name__eq", nameEq)); // query parameter
            if (serviceEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "service__eq", serviceEq)); // query parameter
            if (expireEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expire__eq", expireEq)); // query parameter
            if (deviceExecutionModeEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "device_execution_mode__eq", deviceExecutionModeEq)); // query parameter
            if (deviceExecutionModeNeq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "device_execution_mode__neq", deviceExecutionModeNeq)); // query parameter
            if (ownerEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "owner__eq", ownerEq)); // query parameter
            if (enrollmentModeEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "enrollment_mode__eq", enrollmentModeEq)); // query parameter
            if (issuerLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "issuer__like", issuerLike)); // query parameter
            if (subjectLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "subject__like", subjectLike)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalRespList)));
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for certificate name (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <param name="deviceExecutionModeNeq">Filter for not developer certificates (optional)</param>
        /// <param name="ownerEq">Owner name filter (optional)</param>
        /// <param name="enrollmentModeEq">Enrollment mode filter (optional)</param>
        /// <param name="issuerLike">Filter for issuer (optional)</param>
        /// <param name="subjectLike">Filter for subject (optional)</param>
        /// <returns>Task of TrustedCertificateInternalRespList</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateInternalRespList> GetAllAccountCertificatesAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, int? deviceExecutionModeNeq = null, string ownerEq = null, bool? enrollmentModeEq = null, string issuerLike = null, string subjectLike = null)
        {
             ApiResponse<TrustedCertificateInternalRespList> localVarResponse = await GetAllAccountCertificatesAsyncWithHttpInfo(accountID, limit, after, order, include, nameEq, serviceEq, expireEq, deviceExecutionModeEq, deviceExecutionModeNeq, ownerEq, enrollmentModeEq, issuerLike, subjectLike);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for certificate name (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <param name="deviceExecutionModeNeq">Filter for not developer certificates (optional)</param>
        /// <param name="ownerEq">Owner name filter (optional)</param>
        /// <param name="enrollmentModeEq">Enrollment mode filter (optional)</param>
        /// <param name="issuerLike">Filter for issuer (optional)</param>
        /// <param name="subjectLike">Filter for subject (optional)</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalRespList>> GetAllAccountCertificatesAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null, int? deviceExecutionModeNeq = null, string ownerEq = null, bool? enrollmentModeEq = null, string issuerLike = null, string subjectLike = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAllAccountCertificates");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (nameEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name__eq", nameEq)); // query parameter
            if (serviceEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "service__eq", serviceEq)); // query parameter
            if (expireEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "expire__eq", expireEq)); // query parameter
            if (deviceExecutionModeEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "device_execution_mode__eq", deviceExecutionModeEq)); // query parameter
            if (deviceExecutionModeNeq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "device_execution_mode__neq", deviceExecutionModeNeq)); // query parameter
            if (ownerEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "owner__eq", ownerEq)); // query parameter
            if (enrollmentModeEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "enrollment_mode__eq", enrollmentModeEq)); // query parameter
            if (issuerLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "issuer__like", issuerLike)); // query parameter
            if (subjectLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "subject__like", subjectLike)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalRespList)));
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for group name (optional)</param>
        /// <returns>List&lt;GroupSummary&gt;</returns>
        public List<GroupSummary> GetAllAccountGroups (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null)
        {
             ApiResponse<List<GroupSummary>> localVarResponse = GetAllAccountGroupsWithHttpInfo(accountID, limit, after, order, include, nameEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for group name (optional)</param>
        /// <returns>ApiResponse of List&lt;GroupSummary&gt;</returns>
        public ApiResponse< List<GroupSummary> > GetAllAccountGroupsWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAllAccountGroups");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (nameEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name__eq", nameEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupSummary>)));
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for group name (optional)</param>
        /// <returns>Task of List&lt;GroupSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupSummary>> GetAllAccountGroupsAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null)
        {
             ApiResponse<List<GroupSummary>> localVarResponse = await GetAllAccountGroupsAsyncWithHttpInfo(accountID, limit, after, order, include, nameEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="nameEq">Filter for group name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GroupSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GroupSummary>>> GetAllAccountGroupsAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string nameEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAllAccountGroups");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (nameEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name__eq", nameEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupSummary>)));
        }

        /// <summary>
        /// Get all policies. An endpoint for retrieving all policies in the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="nameEq">Filter result by policy name. (optional)</param>
        /// <param name="statusEq">Filter for status, ACTIVE or INACTIVE. (optional)</param>
        /// <param name="tagEq">Filter results for tag. (optional)</param>
        /// <param name="userIdEq">Retrieve policies attached to a certain user ID. (optional)</param>
        /// <param name="apikeyIdEq">Retrieve policies attached to a certain API key ID. (optional)</param>
        /// <param name="groupIdEq">Retrieve policies attached to a certain group ID. (optional)</param>
        /// <param name="unbounded">Retrieve policies not attached to any subject in the account. (optional)</param>
        /// <returns>PolicyInfoList</returns>
        public PolicyInfoList GetAllAccountPolicies (string accountID, int? limit = null, string after = null, string order = null, string nameEq = null, string statusEq = null, string tagEq = null, string userIdEq = null, string apikeyIdEq = null, string groupIdEq = null, string unbounded = null)
        {
             ApiResponse<PolicyInfoList> localVarResponse = GetAllAccountPoliciesWithHttpInfo(accountID, limit, after, order, nameEq, statusEq, tagEq, userIdEq, apikeyIdEq, groupIdEq, unbounded);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all policies. An endpoint for retrieving all policies in the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="nameEq">Filter result by policy name. (optional)</param>
        /// <param name="statusEq">Filter for status, ACTIVE or INACTIVE. (optional)</param>
        /// <param name="tagEq">Filter results for tag. (optional)</param>
        /// <param name="userIdEq">Retrieve policies attached to a certain user ID. (optional)</param>
        /// <param name="apikeyIdEq">Retrieve policies attached to a certain API key ID. (optional)</param>
        /// <param name="groupIdEq">Retrieve policies attached to a certain group ID. (optional)</param>
        /// <param name="unbounded">Retrieve policies not attached to any subject in the account. (optional)</param>
        /// <returns>ApiResponse of PolicyInfoList</returns>
        public ApiResponse< PolicyInfoList > GetAllAccountPoliciesWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string nameEq = null, string statusEq = null, string tagEq = null, string userIdEq = null, string apikeyIdEq = null, string groupIdEq = null, string unbounded = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAllAccountPolicies");

            var localVarPath = "/v3/accounts/{accountID}/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (nameEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name__eq", nameEq)); // query parameter
            if (statusEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "status__eq", statusEq)); // query parameter
            if (tagEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tag__eq", tagEq)); // query parameter
            if (userIdEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id__eq", userIdEq)); // query parameter
            if (apikeyIdEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey_id__eq", apikeyIdEq)); // query parameter
            if (groupIdEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "group_id__eq", groupIdEq)); // query parameter
            if (unbounded != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unbounded", unbounded)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyInfoList)));
        }

        /// <summary>
        /// Get all policies. An endpoint for retrieving all policies in the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="nameEq">Filter result by policy name. (optional)</param>
        /// <param name="statusEq">Filter for status, ACTIVE or INACTIVE. (optional)</param>
        /// <param name="tagEq">Filter results for tag. (optional)</param>
        /// <param name="userIdEq">Retrieve policies attached to a certain user ID. (optional)</param>
        /// <param name="apikeyIdEq">Retrieve policies attached to a certain API key ID. (optional)</param>
        /// <param name="groupIdEq">Retrieve policies attached to a certain group ID. (optional)</param>
        /// <param name="unbounded">Retrieve policies not attached to any subject in the account. (optional)</param>
        /// <returns>Task of PolicyInfoList</returns>
        public async System.Threading.Tasks.Task<PolicyInfoList> GetAllAccountPoliciesAsync (string accountID, int? limit = null, string after = null, string order = null, string nameEq = null, string statusEq = null, string tagEq = null, string userIdEq = null, string apikeyIdEq = null, string groupIdEq = null, string unbounded = null)
        {
             ApiResponse<PolicyInfoList> localVarResponse = await GetAllAccountPoliciesAsyncWithHttpInfo(accountID, limit, after, order, nameEq, statusEq, tagEq, userIdEq, apikeyIdEq, groupIdEq, unbounded);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all policies. An endpoint for retrieving all policies in the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="nameEq">Filter result by policy name. (optional)</param>
        /// <param name="statusEq">Filter for status, ACTIVE or INACTIVE. (optional)</param>
        /// <param name="tagEq">Filter results for tag. (optional)</param>
        /// <param name="userIdEq">Retrieve policies attached to a certain user ID. (optional)</param>
        /// <param name="apikeyIdEq">Retrieve policies attached to a certain API key ID. (optional)</param>
        /// <param name="groupIdEq">Retrieve policies attached to a certain group ID. (optional)</param>
        /// <param name="unbounded">Retrieve policies not attached to any subject in the account. (optional)</param>
        /// <returns>Task of ApiResponse (PolicyInfoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyInfoList>> GetAllAccountPoliciesAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string nameEq = null, string statusEq = null, string tagEq = null, string userIdEq = null, string apikeyIdEq = null, string groupIdEq = null, string unbounded = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAllAccountPolicies");

            var localVarPath = "/v3/accounts/{accountID}/policies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (nameEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name__eq", nameEq)); // query parameter
            if (statusEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "status__eq", statusEq)); // query parameter
            if (tagEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tag__eq", tagEq)); // query parameter
            if (userIdEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id__eq", userIdEq)); // query parameter
            if (apikeyIdEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey_id__eq", apikeyIdEq)); // query parameter
            if (groupIdEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "group_id__eq", groupIdEq)); // query parameter
            if (unbounded != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "unbounded", unbounded)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyInfoList)));
        }

        /// <summary>
        /// Get all user details. An endpoint for retrieving details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="emailEq">Filter for email address (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>UserInfoRespList</returns>
        public UserInfoRespList GetAllAccountUsers (string accountID, int? limit = null, string after = null, string order = null, string include = null, string emailEq = null, string statusEq = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = GetAllAccountUsersWithHttpInfo(accountID, limit, after, order, include, emailEq, statusEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user details. An endpoint for retrieving details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="emailEq">Filter for email address (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        public ApiResponse< UserInfoRespList > GetAllAccountUsersWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string emailEq = null, string statusEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAllAccountUsers");

            var localVarPath = "/v3/accounts/{accountID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (emailEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "email__eq", emailEq)); // query parameter
            if (statusEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "status__eq", statusEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
        }

        /// <summary>
        /// Get all user details. An endpoint for retrieving details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="emailEq">Filter for email address (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        public async System.Threading.Tasks.Task<UserInfoRespList> GetAllAccountUsersAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string emailEq = null, string statusEq = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = await GetAllAccountUsersAsyncWithHttpInfo(accountID, limit, after, order, include, emailEq, statusEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user details. An endpoint for retrieving details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="emailEq">Filter for email address (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetAllAccountUsersAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string emailEq = null, string statusEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetAllAccountUsers");

            var localVarPath = "/v3/accounts/{accountID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (emailEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "email__eq", emailEq)); // query parameter
            if (statusEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "status__eq", statusEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="endMarketEq">An optional filter for account end market. (optional)</param>
        /// <param name="countryLike">An optional filter for account country. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000), default is 1000. (optional, default to 1000)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>AccountInfoList</returns>
        public AccountInfoList GetAllAccounts (string statusEq = null, string tierEq = null, string parentEq = null, string endMarketEq = null, string countryLike = null, int? limit = null, string after = null, string order = null, string include = null, string format = null, string properties = null)
        {
             ApiResponse<AccountInfoList> localVarResponse = GetAllAccountsWithHttpInfo(statusEq, tierEq, parentEq, endMarketEq, countryLike, limit, after, order, include, format, properties);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="endMarketEq">An optional filter for account end market. (optional)</param>
        /// <param name="countryLike">An optional filter for account country. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000), default is 1000. (optional, default to 1000)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>ApiResponse of AccountInfoList</returns>
        public ApiResponse< AccountInfoList > GetAllAccountsWithHttpInfo (string statusEq = null, string tierEq = null, string parentEq = null, string endMarketEq = null, string countryLike = null, int? limit = null, string after = null, string order = null, string include = null, string format = null, string properties = null)
        {

            var localVarPath = "/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statusEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "status__eq", statusEq)); // query parameter
            if (tierEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tier__eq", tierEq)); // query parameter
            if (parentEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parent__eq", parentEq)); // query parameter
            if (endMarketEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "end_market__eq", endMarketEq)); // query parameter
            if (countryLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "country__like", countryLike)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (format != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (properties != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "properties", properties)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfoList)));
        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="endMarketEq">An optional filter for account end market. (optional)</param>
        /// <param name="countryLike">An optional filter for account country. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000), default is 1000. (optional, default to 1000)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>Task of AccountInfoList</returns>
        public async System.Threading.Tasks.Task<AccountInfoList> GetAllAccountsAsync (string statusEq = null, string tierEq = null, string parentEq = null, string endMarketEq = null, string countryLike = null, int? limit = null, string after = null, string order = null, string include = null, string format = null, string properties = null)
        {
             ApiResponse<AccountInfoList> localVarResponse = await GetAllAccountsAsyncWithHttpInfo(statusEq, tierEq, parentEq, endMarketEq, countryLike, limit, after, order, include, format, properties);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1, 2, 98, 99 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="endMarketEq">An optional filter for account end market. (optional)</param>
        /// <param name="countryLike">An optional filter for account country. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000), default is 1000. (optional, default to 1000)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <param name="properties">Property name to be returned from account specific properties. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfoList>> GetAllAccountsAsyncWithHttpInfo (string statusEq = null, string tierEq = null, string parentEq = null, string endMarketEq = null, string countryLike = null, int? limit = null, string after = null, string order = null, string include = null, string format = null, string properties = null)
        {

            var localVarPath = "/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (statusEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "status__eq", statusEq)); // query parameter
            if (tierEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tier__eq", tierEq)); // query parameter
            if (parentEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parent__eq", parentEq)); // query parameter
            if (endMarketEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "end_market__eq", endMarketEq)); // query parameter
            if (countryLike != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "country__like", countryLike)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (format != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (properties != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "properties", properties)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfoList)));
        }

        /// <summary>
        /// Get API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        public ApiKeyInfoRespList GetApiKeysOfAccountGroup (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = GetApiKeysOfAccountGroupWithHttpInfo(accountID, groupID, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        public ApiResponse< ApiKeyInfoRespList > GetApiKeysOfAccountGroupWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetApiKeysOfAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->GetApiKeysOfAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiKeysOfAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
        }

        /// <summary>
        /// Get API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoRespList> GetApiKeysOfAccountGroupAsync (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = await GetApiKeysOfAccountGroupAsyncWithHttpInfo(accountID, groupID, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetApiKeysOfAccountGroupAsyncWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetApiKeysOfAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->GetApiKeysOfAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiKeysOfAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
        }

        /// <summary>
        /// Get groups of the API key. An endpoint for retrieving groups of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>GroupSummaryList</returns>
        public GroupSummaryList GetGroupsOfAccountApikey (string accountID, string apiKey, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<GroupSummaryList> localVarResponse = GetGroupsOfAccountApikeyWithHttpInfo(accountID, apiKey, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get groups of the API key. An endpoint for retrieving groups of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of GroupSummaryList</returns>
        public ApiResponse< GroupSummaryList > GetGroupsOfAccountApikeyWithHttpInfo (string accountID, string apiKey, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetGroupsOfAccountApikey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->GetGroupsOfAccountApikey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupsOfAccountApikey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummaryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummaryList)));
        }

        /// <summary>
        /// Get groups of the API key. An endpoint for retrieving groups of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of GroupSummaryList</returns>
        public async System.Threading.Tasks.Task<GroupSummaryList> GetGroupsOfAccountApikeyAsync (string accountID, string apiKey, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<GroupSummaryList> localVarResponse = await GetGroupsOfAccountApikeyAsyncWithHttpInfo(accountID, apiKey, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get groups of the API key. An endpoint for retrieving groups of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummaryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummaryList>> GetGroupsOfAccountApikeyAsyncWithHttpInfo (string accountID, string apiKey, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetGroupsOfAccountApikey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->GetGroupsOfAccountApikey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupsOfAccountApikey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummaryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummaryList)));
        }

        /// <summary>
        /// Get groups of the user. An endpoint for retrieving groups of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>GroupSummaryList</returns>
        public GroupSummaryList GetGroupsOfAccountUser (string accountID, string userId, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<GroupSummaryList> localVarResponse = GetGroupsOfAccountUserWithHttpInfo(accountID, userId, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get groups of the user. An endpoint for retrieving groups of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of GroupSummaryList</returns>
        public ApiResponse< GroupSummaryList > GetGroupsOfAccountUserWithHttpInfo (string accountID, string userId, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetGroupsOfAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->GetGroupsOfAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupsOfAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummaryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummaryList)));
        }

        /// <summary>
        /// Get groups of the user. An endpoint for retrieving groups of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of GroupSummaryList</returns>
        public async System.Threading.Tasks.Task<GroupSummaryList> GetGroupsOfAccountUserAsync (string accountID, string userId, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<GroupSummaryList> localVarResponse = await GetGroupsOfAccountUserAsyncWithHttpInfo(accountID, userId, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get groups of the user. An endpoint for retrieving groups of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose details are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummaryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummaryList>> GetGroupsOfAccountUserAsyncWithHttpInfo (string accountID, string userId, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetGroupsOfAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->GetGroupsOfAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupsOfAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummaryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummaryList)));
        }

        /// <summary>
        /// Get users of a group. An endpoint for listing users of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>UserInfoRespList</returns>
        public UserInfoRespList GetUsersOfAccountGroup (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = GetUsersOfAccountGroupWithHttpInfo(accountID, groupID, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users of a group. An endpoint for listing users of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        public ApiResponse< UserInfoRespList > GetUsersOfAccountGroupWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetUsersOfAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->GetUsersOfAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersOfAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
        }

        /// <summary>
        /// Get users of a group. An endpoint for listing users of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        public async System.Threading.Tasks.Task<UserInfoRespList> GetUsersOfAccountGroupAsync (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = await GetUsersOfAccountGroupAsyncWithHttpInfo(accountID, groupID, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users of a group. An endpoint for listing users of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records based on creation time, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetUsersOfAccountGroupAsyncWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->GetUsersOfAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->GetUsersOfAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersOfAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
        }

        /// <summary>
        /// Remove API key from groups. An endpoint for removing API key from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse RemoveAccountApiKeyFromGroups (string accountID, string apiKey, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = RemoveAccountApiKeyFromGroupsWithHttpInfo(accountID, apiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove API key from groups. An endpoint for removing API key from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > RemoveAccountApiKeyFromGroupsWithHttpInfo (string accountID, string apiKey, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->RemoveAccountApiKeyFromGroups");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->RemoveAccountApiKeyFromGroups");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->RemoveAccountApiKeyFromGroups");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAccountApiKeyFromGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Remove API key from groups. An endpoint for removing API key from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> RemoveAccountApiKeyFromGroupsAsync (string accountID, string apiKey, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await RemoveAccountApiKeyFromGroupsAsyncWithHttpInfo(accountID, apiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove API key from groups. An endpoint for removing API key from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveAccountApiKeyFromGroupsAsyncWithHttpInfo (string accountID, string apiKey, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->RemoveAccountApiKeyFromGroups");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->RemoveAccountApiKeyFromGroups");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->RemoveAccountApiKeyFromGroups");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAccountApiKeyFromGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Remove user from groups. An endpoint for removing user from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse RemoveAccountUserFromGroups (string accountID, string userId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = RemoveAccountUserFromGroupsWithHttpInfo(accountID, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user from groups. An endpoint for removing user from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > RemoveAccountUserFromGroupsWithHttpInfo (string accountID, string userId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->RemoveAccountUserFromGroups");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->RemoveAccountUserFromGroups");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->RemoveAccountUserFromGroups");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAccountUserFromGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Remove user from groups. An endpoint for removing user from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> RemoveAccountUserFromGroupsAsync (string accountID, string userId, List<string> body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await RemoveAccountUserFromGroupsAsyncWithHttpInfo(accountID, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove user from groups. An endpoint for removing user from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be removed from the group.</param>
        /// <param name="body">A list of IDs of the groups to be updated.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveAccountUserFromGroupsAsyncWithHttpInfo (string accountID, string userId, List<string> body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->RemoveAccountUserFromGroups");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->RemoveAccountUserFromGroups");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->RemoveAccountUserFromGroups");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAccountUserFromGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse RemoveApiKeysFromAccountGroup (string accountID, string groupID, SubjectList body = null)
        {
             ApiResponse<UpdatedResponse> localVarResponse = RemoveApiKeysFromAccountGroupWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > RemoveApiKeysFromAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->RemoveApiKeysFromAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->RemoveApiKeysFromAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveApiKeysFromAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> RemoveApiKeysFromAccountGroupAsync (string accountID, string groupID, SubjectList body = null)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await RemoveApiKeysFromAccountGroupAsyncWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveApiKeysFromAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->RemoveApiKeysFromAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->RemoveApiKeysFromAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveApiKeysFromAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse RemoveUsersFromAccountGroup (string accountID, string groupID, SubjectList body = null)
        {
             ApiResponse<UpdatedResponse> localVarResponse = RemoveUsersFromAccountGroupWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > RemoveUsersFromAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->RemoveUsersFromAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->RemoveUsersFromAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsersFromAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> RemoveUsersFromAccountGroupAsync (string accountID, string groupID, SubjectList body = null)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await RemoveUsersFromAccountGroupAsyncWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveUsersFromAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->RemoveUsersFromAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling AggregatorAccountAdminApi->RemoveUsersFromAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsersFromAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
        }

        /// <summary>
        /// Reset the secret key. An endpoint for resetting the secret key of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp ResetAccountApiKeySecret (string accountID, string apiKey)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = ResetAccountApiKeySecretWithHttpInfo(accountID, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the secret key. An endpoint for resetting the secret key of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > ResetAccountApiKeySecretWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->ResetAccountApiKeySecret");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->ResetAccountApiKeySecret");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}/reset-secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetAccountApiKeySecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
        }

        /// <summary>
        /// Reset the secret key. An endpoint for resetting the secret key of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> ResetAccountApiKeySecretAsync (string accountID, string apiKey)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await ResetAccountApiKeySecretAsyncWithHttpInfo(accountID, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset the secret key. An endpoint for resetting the secret key of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> ResetAccountApiKeySecretAsyncWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->ResetAccountApiKeySecret");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->ResetAccountApiKeySecret");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}/reset-secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetAccountApiKeySecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>AccountInfo</returns>
        public AccountInfo UpdateAccount (string accountID, AccountUpdateRootReq body)
        {
             ApiResponse<AccountInfo> localVarResponse = UpdateAccountWithHttpInfo(accountID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        public ApiResponse< AccountInfo > UpdateAccountWithHttpInfo (string accountID, AccountUpdateRootReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->UpdateAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->UpdateAccount");

            var localVarPath = "/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of AccountInfo</returns>
        public async System.Threading.Tasks.Task<AccountInfo> UpdateAccountAsync (string accountID, AccountUpdateRootReq body)
        {
             ApiResponse<AccountInfo> localVarResponse = await UpdateAccountAsyncWithHttpInfo(accountID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfo>> UpdateAccountAsyncWithHttpInfo (string accountID, AccountUpdateRootReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->UpdateAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->UpdateAccount");

            var localVarPath = "/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp UpdateAccountApiKey (string accountID, string apiKey, ApiKeyUpdateReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = UpdateAccountApiKeyWithHttpInfo(accountID, apiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > UpdateAccountApiKeyWithHttpInfo (string accountID, string apiKey, ApiKeyUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->UpdateAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->UpdateAccountApiKey");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->UpdateAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> UpdateAccountApiKeyAsync (string accountID, string apiKey, ApiKeyUpdateReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await UpdateAccountApiKeyAsyncWithHttpInfo(accountID, apiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> UpdateAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey, ApiKeyUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->UpdateAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AggregatorAccountAdminApi->UpdateAccountApiKey");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->UpdateAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>TrustedCertificateInternalResp</returns>
        public TrustedCertificateInternalResp UpdateAccountCertificate (string accountID, string certId, TrustedCertificateUpdateReq body)
        {
             ApiResponse<TrustedCertificateInternalResp> localVarResponse = UpdateAccountCertificateWithHttpInfo(accountID, certId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>ApiResponse of TrustedCertificateInternalResp</returns>
        public ApiResponse< TrustedCertificateInternalResp > UpdateAccountCertificateWithHttpInfo (string accountID, string certId, TrustedCertificateUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->UpdateAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AggregatorAccountAdminApi->UpdateAccountCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->UpdateAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalResp)));
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of TrustedCertificateInternalResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateInternalResp> UpdateAccountCertificateAsync (string accountID, string certId, TrustedCertificateUpdateReq body)
        {
             ApiResponse<TrustedCertificateInternalResp> localVarResponse = await UpdateAccountCertificateAsyncWithHttpInfo(accountID, certId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalResp>> UpdateAccountCertificateAsyncWithHttpInfo (string accountID, string certId, TrustedCertificateUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->UpdateAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling AggregatorAccountAdminApi->UpdateAccountCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->UpdateAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalResp)));
        }

        /// <summary>
        /// Update a policy. An endpoint for updating a policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <param name="body">The details of the policy to be updated.</param>
        /// <returns>PolicyInfo</returns>
        public PolicyInfo UpdateAccountPolicy (string accountID, string policyId, PolicyUpdateReq body)
        {
             ApiResponse<PolicyInfo> localVarResponse = UpdateAccountPolicyWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a policy. An endpoint for updating a policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <param name="body">The details of the policy to be updated.</param>
        /// <returns>ApiResponse of PolicyInfo</returns>
        public ApiResponse< PolicyInfo > UpdateAccountPolicyWithHttpInfo (string accountID, string policyId, PolicyUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->UpdateAccountPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->UpdateAccountPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->UpdateAccountPolicy");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyInfo)));
        }

        /// <summary>
        /// Update a policy. An endpoint for updating a policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <param name="body">The details of the policy to be updated.</param>
        /// <returns>Task of PolicyInfo</returns>
        public async System.Threading.Tasks.Task<PolicyInfo> UpdateAccountPolicyAsync (string accountID, string policyId, PolicyUpdateReq body)
        {
             ApiResponse<PolicyInfo> localVarResponse = await UpdateAccountPolicyAsyncWithHttpInfo(accountID, policyId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a policy. An endpoint for updating a policy.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="policyId">The ID the policy to be retrieved.</param>
        /// <param name="body">The details of the policy to be updated.</param>
        /// <returns>Task of ApiResponse (PolicyInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PolicyInfo>> UpdateAccountPolicyAsyncWithHttpInfo (string accountID, string policyId, PolicyUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->UpdateAccountPolicy");
            // verify the required parameter 'policyId' is set
            if (policyId == null)
                throw new ApiException(400, "Missing required parameter 'policyId' when calling AggregatorAccountAdminApi->UpdateAccountPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->UpdateAccountPolicy");

            var localVarPath = "/v3/accounts/{accountID}/policies/{policy-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (policyId != null) localVarPathParams.Add("policy-id", Configuration.ApiClient.ParameterToString(policyId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PolicyInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PolicyInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PolicyInfo)));
        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>UserUpdateResp</returns>
        public UserUpdateResp UpdateAccountUser (string accountID, string userId, AdminUserUpdateReq body)
        {
             ApiResponse<UserUpdateResp> localVarResponse = UpdateAccountUserWithHttpInfo(accountID, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>ApiResponse of UserUpdateResp</returns>
        public ApiResponse< UserUpdateResp > UpdateAccountUserWithHttpInfo (string accountID, string userId, AdminUserUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->UpdateAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->UpdateAccountUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->UpdateAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserUpdateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserUpdateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserUpdateResp)));
        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>Task of UserUpdateResp</returns>
        public async System.Threading.Tasks.Task<UserUpdateResp> UpdateAccountUserAsync (string accountID, string userId, AdminUserUpdateReq body)
        {
             ApiResponse<UserUpdateResp> localVarResponse = await UpdateAccountUserAsyncWithHttpInfo(accountID, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <returns>Task of ApiResponse (UserUpdateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserUpdateResp>> UpdateAccountUserAsyncWithHttpInfo (string accountID, string userId, AdminUserUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->UpdateAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->UpdateAccountUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AggregatorAccountAdminApi->UpdateAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserUpdateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserUpdateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserUpdateResp)));
        }

        /// <summary>
        /// Validate the user email. An endpoint for validating the user email.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose email is validated.</param>
        /// <returns></returns>
        public void ValidateAccountUserEmail (string accountID, string userId)
        {
             ValidateAccountUserEmailWithHttpInfo(accountID, userId);
        }

        /// <summary>
        /// Validate the user email. An endpoint for validating the user email.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose email is validated.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ValidateAccountUserEmailWithHttpInfo (string accountID, string userId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->ValidateAccountUserEmail");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->ValidateAccountUserEmail");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/validate-email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateAccountUserEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Validate the user email. An endpoint for validating the user email.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose email is validated.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateAccountUserEmailAsync (string accountID, string userId)
        {
             await ValidateAccountUserEmailAsyncWithHttpInfo(accountID, userId);

        }

        /// <summary>
        /// Validate the user email. An endpoint for validating the user email.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose email is validated.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidateAccountUserEmailAsyncWithHttpInfo (string accountID, string userId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling AggregatorAccountAdminApi->ValidateAccountUserEmail");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AggregatorAccountAdminApi->ValidateAccountUserEmail");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/validate-email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateAccountUserEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
