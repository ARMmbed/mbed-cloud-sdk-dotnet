// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 1.0.0
//
// <copyright file="AccountManagementApi.Account.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace MbedCloudSDK.PreSharedKeys.PSK
{
    using MbedCloudSDK.Common;
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using MbedCloudSDK.Client;
    using MbedCloudSDK.Exceptions;
    using RestSharp;
    using MbedCloudSDK.Common.Query;
    using MbedCloudSDK.Common.Extensions;

    /// <summary>
    /// PSK
    /// </summary>
    public partial class PSK : BaseModel
    {
        /// <summary>
        /// The date-time (RFC3339) when this pre-shared key was uploaded to Mbed Cloud.
        /// </summary>
        public DateTime? CreatedAt
        {
            get;
            set;
        }

        /// <summary>
        /// The unique endpoint identifier that this pre-shared key applies to. 16-64 [printable](https://en.wikipedia.org/wiki/ASCII#Printable_characters) (non-control) ASCII characters.
        /// </summary>
        public string EndpointName
        {
            get;
            set;
        }

        public async Task<PSK> Create(string secretHex)
        {
            var renames = new Dictionary<string, string>();
            var data = new
            {
                EndpointName = EndpointName,
                secretHex = secretHex,
            };
            try
            {
                return await MbedCloudSDK.Client.ApiCall.CallApi<PSK>(path: "/v2/device-shared-keys", method: Method.POST, settings: SerializationSettings.GetSettings(renames), populateObject: true, objectToPopulate: this, accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, configuration: Config);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task Delete()
        {
            var renames = new Dictionary<string, string>();
            object data = null;
            try
            {
                await MbedCloudSDK.Client.ApiCall.CallApi<object>(path: "/v2/device-shared-keys/{endpoint_name}", method: Method.DELETE, settings: SerializationSettings.GetSettings(renames), accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, pathParams: new Dictionary<string, object>() { { "EndpointName", EndpointName }, }, configuration: Config);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<PSK> Get()
        {
            var renames = new Dictionary<string, string>();
            object data = null;
            try
            {
                return await MbedCloudSDK.Client.ApiCall.CallApi<PSK>(path: "/v2/device-shared-keys/{endpoint_name}", method: Method.GET, settings: SerializationSettings.GetSettings(renames), populateObject: true, objectToPopulate: this, accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, pathParams: new Dictionary<string, object>() { { "EndpointName", EndpointName }, }, configuration: Config);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public static PaginatedResponse<QueryOptions, PSK> List(string after = null, int? limit = null)
        {
            var renames = new Dictionary<string, string>();
            object data = null;
            var options = new QueryOptions { After = after, Limit = limit, };
            try
            {
                Func<QueryOptions, ResponsePage<PSK>> paginatedFunc = (QueryOptions _options) => { return AsyncHelper.RunSync<ResponsePage<PSK>>(() => MbedCloudSDK.Client.ApiCall.CallApi<ResponsePage<PSK>>(path: "/v2/device-shared-keys", method: Method.GET, settings: SerializationSettings.GetSettings(renames), accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, queryParams: new Dictionary<string, object>() { { "after", after }, { "limit", limit }, }, configuration: Config)); };
                return new PaginatedResponse<QueryOptions, PSK>(paginatedFunc, options);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        /// <summary>
        /// Get human readable string of this object
        /// </summary>
        /// <returns>Serialized string of object</returns>
        public override string ToString()
            => this.DebugDump();
    }
}