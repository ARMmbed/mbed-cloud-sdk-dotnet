// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 1.0.0
//
// <copyright file="AccountManagementApi.Account.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace MbedCloudSDK.Accounts.ApiKey
{
    using MbedCloudSDK.Common;
    using System;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Threading.Tasks;
    using MbedCloudSDK.Client;
    using MbedCloudSDK.Exceptions;
    using RestSharp;
    using MbedCloudSDK.Common.Query;
    using MbedCloudSDK.Accounts.PolicyGroup;
    using MbedCloudSDK.Common.Extensions;

    /// <summary>
    /// ApiKey
    /// </summary>
    public partial class ApiKey : BaseModel
    {
        /// <summary>
        /// Creation UTC time RFC3339.
        /// </summary>
        public DateTime? CreatedAt
        {
            get;
            set;
        }

        /// <summary>
        /// The timestamp of the API key creation in the storage, in milliseconds.
        /// </summary>
        public long? CreationTime
        {
            get;
            set;
        }

        /// <summary>
        /// A list of group IDs this API key belongs to.
        /// </summary>
        public List<string> GroupIds
        {
            get;
            set;
        }

        /// <summary>
        /// The API key.
        /// </summary>
        public string Key
        {
            get;
            set;
        }

        /// <summary>
        /// The timestamp of the latest API key usage, in milliseconds.
        /// </summary>
        public long? LastLoginTime
        {
            get;
            set;
        }

        /// <summary>
        /// The display name for the API key.
        /// </summary>
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// The owner of this API key, who is the creator by default.
        /// </summary>
        public string Owner
        {
            get;
            set;
        }

        /// <summary>
        /// The status of the API key.
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public ApiKeyStatusEnum Status
        {
            get;
            set;
        }

        /// <summary>
        /// Last update UTC time RFC3339.
        /// </summary>
        public DateTime? UpdatedAt
        {
            get;
            set;
        }

        public async Task<ApiKey> Create()
        {
            var renames = new Dictionary<string, string> { { "GroupIds", "groups" }, };
            var data = new
            {
                GroupIds = GroupIds,
                Name = Name,
                Owner = Owner,
                Status = Status,
            };
            try
            {
                return await MbedCloudSDK.Client.ApiCall.CallApi<ApiKey>(path: "/v3/api-keys", method: Method.POST, settings: SerializationSettings.GetSettings(renames), populateObject: true, objectToPopulate: this, accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, configuration: Config);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task Delete()
        {
            var renames = new Dictionary<string, string> { { "GroupIds", "groups" }, };
            object data = null;
            try
            {
                await MbedCloudSDK.Client.ApiCall.CallApi<object>(path: "/v3/api-keys/{apiKey}", method: Method.DELETE, settings: SerializationSettings.GetSettings(renames), accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, pathParams: new Dictionary<string, object>() { { "apiKey", Id }, }, configuration: Config);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<ApiKey> Get()
        {
            var renames = new Dictionary<string, string> { { "GroupIds", "groups" }, };
            object data = null;
            try
            {
                return await MbedCloudSDK.Client.ApiCall.CallApi<ApiKey>(path: "/v3/api-keys/{apiKey}", method: Method.GET, settings: SerializationSettings.GetSettings(renames), populateObject: true, objectToPopulate: this, accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, pathParams: new Dictionary<string, object>() { { "apiKey", Id }, }, configuration: Config);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<QueryOptions, PolicyGroup> Groups(string after = null, string include = null, int? limit = null, string order = null)
        {
            var renames = new Dictionary<string, string> { { "GroupIds", "groups" }, };
            object data = null;
            var options = new QueryOptions { After = after, Include = include, Limit = limit, Order = order, };
            try
            {
                Func<QueryOptions, ResponsePage<PolicyGroup>> paginatedFunc = (QueryOptions _options) => { return AsyncHelper.RunSync<ResponsePage<PolicyGroup>>(() => MbedCloudSDK.Client.ApiCall.CallApi<ResponsePage<PolicyGroup>>(path: "/v3/api-keys/{apiKey}/groups", method: Method.GET, settings: SerializationSettings.GetSettings(renames), accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, pathParams: new Dictionary<string, object>() { { "apiKey", Id }, }, queryParams: new Dictionary<string, object>() { { "after", after }, { "include", include }, { "limit", limit }, { "order", order }, }, configuration: Config)); };
                return new PaginatedResponse<QueryOptions, PolicyGroup>(paginatedFunc, options);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public static PaginatedResponse<QueryOptions, ApiKey> List(string after = null, string include = null, int? limit = null, string order = null)
        {
            var renames = new Dictionary<string, string> { { "GroupIds", "groups" }, };
            object data = null;
            var options = new QueryOptions { After = after, Include = include, Limit = limit, Order = order, };
            try
            {
                Func<QueryOptions, ResponsePage<ApiKey>> paginatedFunc = (QueryOptions _options) => { return AsyncHelper.RunSync<ResponsePage<ApiKey>>(() => MbedCloudSDK.Client.ApiCall.CallApi<ResponsePage<ApiKey>>(path: "/v3/api-keys", method: Method.GET, settings: SerializationSettings.GetSettings(renames), accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, queryParams: new Dictionary<string, object>() { { "after", after }, { "include", include }, { "limit", limit }, { "order", order }, }, configuration: Config)); };
                return new PaginatedResponse<QueryOptions, ApiKey>(paginatedFunc, options);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<ApiKey> ResetSecret(string accountID)
        {
            var renames = new Dictionary<string, string> { { "GroupIds", "groups" }, };
            object data = null;
            try
            {
                return await MbedCloudSDK.Client.ApiCall.CallApi<ApiKey>(path: "/v3/accounts/{accountID}/api-keys/{apiKey}/reset-secret", method: Method.POST, settings: SerializationSettings.GetSettings(renames), populateObject: true, objectToPopulate: this, accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, pathParams: new Dictionary<string, object>() { { "accountID", accountID }, { "apiKey", Id }, }, configuration: Config);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<ApiKey> Update()
        {
            var renames = new Dictionary<string, string> { { "GroupIds", "groups" }, };
            var data = new
            {
                GroupIds = GroupIds,
                Name = Name,
                Owner = Owner,
                Status = Status,
            };
            try
            {
                return await MbedCloudSDK.Client.ApiCall.CallApi<ApiKey>(path: "/v3/api-keys/{apiKey}", method: Method.PUT, settings: SerializationSettings.GetSettings(renames), populateObject: true, objectToPopulate: this, accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, pathParams: new Dictionary<string, object>() { { "apiKey", Id }, }, configuration: Config);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        /// <summary>
        /// Get human readable string of this object
        /// </summary>
        /// <returns>Serialized string of object</returns>
        public override string ToString()
            => this.DebugDump();
    }
}