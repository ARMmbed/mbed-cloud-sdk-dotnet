/* 
 * <auto-generated>
 * Enrollment API
 *
 * Connect Enrollment Service allows users to claim the ownership of a device which is not yet assigned to an account. A device without an assigned account can be a device purchased from the open market (OEM dealer) or a device transferred from an account to another. More information in [Device ownership: First-to-claim](/docs/current/connecting/device-ownership-first-to-claim-by-enrollment-list.html) document. 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using enrollment.Client;
using enrollment.Model;

namespace enrollment.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk upload
        /// </summary>
        /// <remarks>
        /// With bulk upload, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>BulkResponse</returns>
        BulkResponse CreateBulkDeviceEnrollment (System.IO.Stream enrollmentIdentities);

        /// <summary>
        /// Bulk upload
        /// </summary>
        /// <remarks>
        /// With bulk upload, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>ApiResponse of BulkResponse</returns>
        ApiResponse<BulkResponse> CreateBulkDeviceEnrollmentWithHttpInfo (System.IO.Stream enrollmentIdentities);
        /// <summary>
        /// Place an enrollment claim for one or several devices.
        /// </summary>
        /// <remarks>
        /// When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments \\ -d &#39;{\&quot;enrollment_identity\&quot;: \&quot;A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5\&quot;}&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentity"></param>
        /// <returns>EnrollmentIdentity</returns>
        EnrollmentIdentity CreateDeviceEnrollment (EnrollmentId enrollmentIdentity);

        /// <summary>
        /// Place an enrollment claim for one or several devices.
        /// </summary>
        /// <remarks>
        /// When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments \\ -d &#39;{\&quot;enrollment_identity\&quot;: \&quot;A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5\&quot;}&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentity"></param>
        /// <returns>ApiResponse of EnrollmentIdentity</returns>
        ApiResponse<EnrollmentIdentity> CreateDeviceEnrollmentWithHttpInfo (EnrollmentId enrollmentIdentity);
        /// <summary>
        /// Bulk delete
        /// </summary>
        /// <remarks>
        /// With bulk delete, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs to be deleted.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>BulkResponse</returns>
        BulkResponse DeleteBulkDeviceEnrollment (System.IO.Stream enrollmentIdentities);

        /// <summary>
        /// Bulk delete
        /// </summary>
        /// <remarks>
        /// With bulk delete, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs to be deleted.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>ApiResponse of BulkResponse</returns>
        ApiResponse<BulkResponse> DeleteBulkDeviceEnrollmentWithHttpInfo (System.IO.Stream enrollmentIdentities);
        /// <summary>
        /// Delete an enrollment by ID.
        /// </summary>
        /// <remarks>
        /// To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information, see [Transferring the ownership using First-to-Claim](/docs/current/connecting/device-ownership.html). &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns></returns>
        void DeleteDeviceEnrollment (string id);

        /// <summary>
        /// Delete an enrollment by ID.
        /// </summary>
        /// <remarks>
        /// To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information, see [Transferring the ownership using First-to-Claim](/docs/current/connecting/device-ownership.html). &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDeviceEnrollmentWithHttpInfo (string id);
        /// <summary>
        /// Get bulk upload entity
        /// </summary>
        /// <remarks>
        /// Provides information on bulk upload for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk upload reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk create task entity ID</param>
        /// <returns>BulkResponse</returns>
        BulkResponse GetBulkDeviceEnrollment (string id);

        /// <summary>
        /// Get bulk upload entity
        /// </summary>
        /// <remarks>
        /// Provides information on bulk upload for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk upload reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk create task entity ID</param>
        /// <returns>ApiResponse of BulkResponse</returns>
        ApiResponse<BulkResponse> GetBulkDeviceEnrollmentWithHttpInfo (string id);
        /// <summary>
        /// Get bulk delete entity
        /// </summary>
        /// <remarks>
        /// Provides information on bulk delete for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk delete reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk delete task entity ID</param>
        /// <returns>BulkResponse</returns>
        BulkResponse GetBulkDeviceEnrollmentDelete (string id);

        /// <summary>
        /// Get bulk delete entity
        /// </summary>
        /// <remarks>
        /// Provides information on bulk delete for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk delete reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk delete task entity ID</param>
        /// <returns>ApiResponse of BulkResponse</returns>
        ApiResponse<BulkResponse> GetBulkDeviceEnrollmentDeleteWithHttpInfo (string id);
        /// <summary>
        /// Get details of an enrollment by ID.
        /// </summary>
        /// <remarks>
        /// To check the enrollment info in detail, for example date of claim and expiration date. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>EnrollmentIdentity</returns>
        EnrollmentIdentity GetDeviceEnrollment (string id);

        /// <summary>
        /// Get details of an enrollment by ID.
        /// </summary>
        /// <remarks>
        /// To check the enrollment info in detail, for example date of claim and expiration date. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>ApiResponse of EnrollmentIdentity</returns>
        ApiResponse<EnrollmentIdentity> GetDeviceEnrollmentWithHttpInfo (string id);
        /// <summary>
        /// Get enrollment list.
        /// </summary>
        /// <remarks>
        /// Provides a list of pending and claimed enrollments. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments &#x60;&#x60;&#x60; With query parameters: &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ &#39;https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit&#x3D;10&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of results to be returned. Between 2 and 1000, inclusive. (optional)</param>
        /// <param name="after">Entity ID to fetch after. (optional)</param>
        /// <param name="order">ASC or DESC (optional, default to ASC)</param>
        /// <param name="include">Comma-separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <returns>EnrollmentIdentities</returns>
        EnrollmentIdentities GetDeviceEnrollments (int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get enrollment list.
        /// </summary>
        /// <remarks>
        /// Provides a list of pending and claimed enrollments. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments &#x60;&#x60;&#x60; With query parameters: &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ &#39;https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit&#x3D;10&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of results to be returned. Between 2 and 1000, inclusive. (optional)</param>
        /// <param name="after">Entity ID to fetch after. (optional)</param>
        /// <param name="order">ASC or DESC (optional, default to ASC)</param>
        /// <param name="include">Comma-separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <returns>ApiResponse of EnrollmentIdentities</returns>
        ApiResponse<EnrollmentIdentities> GetDeviceEnrollmentsWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Bulk upload
        /// </summary>
        /// <remarks>
        /// With bulk upload, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>Task of BulkResponse</returns>
        System.Threading.Tasks.Task<BulkResponse> CreateBulkDeviceEnrollmentAsync (System.IO.Stream enrollmentIdentities);

        /// <summary>
        /// Bulk upload
        /// </summary>
        /// <remarks>
        /// With bulk upload, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkResponse>> CreateBulkDeviceEnrollmentAsyncWithHttpInfo (System.IO.Stream enrollmentIdentities);
        /// <summary>
        /// Place an enrollment claim for one or several devices.
        /// </summary>
        /// <remarks>
        /// When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments \\ -d &#39;{\&quot;enrollment_identity\&quot;: \&quot;A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5\&quot;}&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentity"></param>
        /// <returns>Task of EnrollmentIdentity</returns>
        System.Threading.Tasks.Task<EnrollmentIdentity> CreateDeviceEnrollmentAsync (EnrollmentId enrollmentIdentity);

        /// <summary>
        /// Place an enrollment claim for one or several devices.
        /// </summary>
        /// <remarks>
        /// When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments \\ -d &#39;{\&quot;enrollment_identity\&quot;: \&quot;A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5\&quot;}&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentity"></param>
        /// <returns>Task of ApiResponse (EnrollmentIdentity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnrollmentIdentity>> CreateDeviceEnrollmentAsyncWithHttpInfo (EnrollmentId enrollmentIdentity);
        /// <summary>
        /// Bulk delete
        /// </summary>
        /// <remarks>
        /// With bulk delete, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs to be deleted.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>Task of BulkResponse</returns>
        System.Threading.Tasks.Task<BulkResponse> DeleteBulkDeviceEnrollmentAsync (System.IO.Stream enrollmentIdentities);

        /// <summary>
        /// Bulk delete
        /// </summary>
        /// <remarks>
        /// With bulk delete, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs to be deleted.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkResponse>> DeleteBulkDeviceEnrollmentAsyncWithHttpInfo (System.IO.Stream enrollmentIdentities);
        /// <summary>
        /// Delete an enrollment by ID.
        /// </summary>
        /// <remarks>
        /// To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information, see [Transferring the ownership using First-to-Claim](/docs/current/connecting/device-ownership.html). &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDeviceEnrollmentAsync (string id);

        /// <summary>
        /// Delete an enrollment by ID.
        /// </summary>
        /// <remarks>
        /// To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information, see [Transferring the ownership using First-to-Claim](/docs/current/connecting/device-ownership.html). &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeviceEnrollmentAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get bulk upload entity
        /// </summary>
        /// <remarks>
        /// Provides information on bulk upload for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk upload reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk create task entity ID</param>
        /// <returns>Task of BulkResponse</returns>
        System.Threading.Tasks.Task<BulkResponse> GetBulkDeviceEnrollmentAsync (string id);

        /// <summary>
        /// Get bulk upload entity
        /// </summary>
        /// <remarks>
        /// Provides information on bulk upload for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk upload reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk create task entity ID</param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkResponse>> GetBulkDeviceEnrollmentAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get bulk delete entity
        /// </summary>
        /// <remarks>
        /// Provides information on bulk delete for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk delete reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk delete task entity ID</param>
        /// <returns>Task of BulkResponse</returns>
        System.Threading.Tasks.Task<BulkResponse> GetBulkDeviceEnrollmentDeleteAsync (string id);

        /// <summary>
        /// Get bulk delete entity
        /// </summary>
        /// <remarks>
        /// Provides information on bulk delete for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk delete reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk delete task entity ID</param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkResponse>> GetBulkDeviceEnrollmentDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get details of an enrollment by ID.
        /// </summary>
        /// <remarks>
        /// To check the enrollment info in detail, for example date of claim and expiration date. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>Task of EnrollmentIdentity</returns>
        System.Threading.Tasks.Task<EnrollmentIdentity> GetDeviceEnrollmentAsync (string id);

        /// <summary>
        /// Get details of an enrollment by ID.
        /// </summary>
        /// <remarks>
        /// To check the enrollment info in detail, for example date of claim and expiration date. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>Task of ApiResponse (EnrollmentIdentity)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnrollmentIdentity>> GetDeviceEnrollmentAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get enrollment list.
        /// </summary>
        /// <remarks>
        /// Provides a list of pending and claimed enrollments. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments &#x60;&#x60;&#x60; With query parameters: &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ &#39;https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit&#x3D;10&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of results to be returned. Between 2 and 1000, inclusive. (optional)</param>
        /// <param name="after">Entity ID to fetch after. (optional)</param>
        /// <param name="order">ASC or DESC (optional, default to ASC)</param>
        /// <param name="include">Comma-separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <returns>Task of EnrollmentIdentities</returns>
        System.Threading.Tasks.Task<EnrollmentIdentities> GetDeviceEnrollmentsAsync (int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get enrollment list.
        /// </summary>
        /// <remarks>
        /// Provides a list of pending and claimed enrollments. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments &#x60;&#x60;&#x60; With query parameters: &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ &#39;https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit&#x3D;10&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of results to be returned. Between 2 and 1000, inclusive. (optional)</param>
        /// <param name="after">Entity ID to fetch after. (optional)</param>
        /// <param name="order">ASC or DESC (optional, default to ASC)</param>
        /// <param name="include">Comma-separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <returns>Task of ApiResponse (EnrollmentIdentities)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnrollmentIdentities>> GetDeviceEnrollmentsAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicAPIApi : IPublicAPIApi
    {
        private enrollment.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicAPIApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = enrollment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicAPIApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = enrollment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public enrollment.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Bulk upload With bulk upload, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>BulkResponse</returns>
        public BulkResponse CreateBulkDeviceEnrollment (System.IO.Stream enrollmentIdentities)
        {
             ApiResponse<BulkResponse> localVarResponse = CreateBulkDeviceEnrollmentWithHttpInfo(enrollmentIdentities);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk upload With bulk upload, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>ApiResponse of BulkResponse</returns>
        public ApiResponse< BulkResponse > CreateBulkDeviceEnrollmentWithHttpInfo (System.IO.Stream enrollmentIdentities)
        {
            // verify the required parameter 'enrollmentIdentities' is set
            if (enrollmentIdentities == null)
                throw new ApiException(400, "Missing required parameter 'enrollmentIdentities' when calling PublicAPIApi->CreateBulkDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments-bulk-uploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enrollmentIdentities != null) localVarFileParams.Add("enrollment_identities", Configuration.ApiClient.ParameterToFile("enrollment_identities", enrollmentIdentities));

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)));
        }

        /// <summary>
        /// Bulk upload With bulk upload, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>Task of BulkResponse</returns>
        public async System.Threading.Tasks.Task<BulkResponse> CreateBulkDeviceEnrollmentAsync (System.IO.Stream enrollmentIdentities)
        {
             ApiResponse<BulkResponse> localVarResponse = await CreateBulkDeviceEnrollmentAsyncWithHttpInfo(enrollmentIdentities);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk upload With bulk upload, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkResponse>> CreateBulkDeviceEnrollmentAsyncWithHttpInfo (System.IO.Stream enrollmentIdentities)
        {
            // verify the required parameter 'enrollmentIdentities' is set
            if (enrollmentIdentities == null)
                throw new ApiException(400, "Missing required parameter 'enrollmentIdentities' when calling PublicAPIApi->CreateBulkDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments-bulk-uploads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enrollmentIdentities != null) localVarFileParams.Add("enrollment_identities", Configuration.ApiClient.ParameterToFile("enrollment_identities", enrollmentIdentities));

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBulkDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)));
        }

        /// <summary>
        /// Place an enrollment claim for one or several devices. When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments \\ -d &#39;{\&quot;enrollment_identity\&quot;: \&quot;A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5\&quot;}&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentity"></param>
        /// <returns>EnrollmentIdentity</returns>
        public EnrollmentIdentity CreateDeviceEnrollment (EnrollmentId enrollmentIdentity)
        {
             ApiResponse<EnrollmentIdentity> localVarResponse = CreateDeviceEnrollmentWithHttpInfo(enrollmentIdentity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place an enrollment claim for one or several devices. When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments \\ -d &#39;{\&quot;enrollment_identity\&quot;: \&quot;A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5\&quot;}&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentity"></param>
        /// <returns>ApiResponse of EnrollmentIdentity</returns>
        public ApiResponse< EnrollmentIdentity > CreateDeviceEnrollmentWithHttpInfo (EnrollmentId enrollmentIdentity)
        {
            // verify the required parameter 'enrollmentIdentity' is set
            if (enrollmentIdentity == null)
                throw new ApiException(400, "Missing required parameter 'enrollmentIdentity' when calling PublicAPIApi->CreateDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enrollmentIdentity != null && enrollmentIdentity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(enrollmentIdentity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enrollmentIdentity; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrollmentIdentity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrollmentIdentity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrollmentIdentity)));
        }

        /// <summary>
        /// Place an enrollment claim for one or several devices. When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments \\ -d &#39;{\&quot;enrollment_identity\&quot;: \&quot;A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5\&quot;}&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentity"></param>
        /// <returns>Task of EnrollmentIdentity</returns>
        public async System.Threading.Tasks.Task<EnrollmentIdentity> CreateDeviceEnrollmentAsync (EnrollmentId enrollmentIdentity)
        {
             ApiResponse<EnrollmentIdentity> localVarResponse = await CreateDeviceEnrollmentAsyncWithHttpInfo(enrollmentIdentity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place an enrollment claim for one or several devices. When the device connects to the bootstrap server and provides the enrollment ID, it will be assigned to your account. &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments \\ -d &#39;{\&quot;enrollment_identity\&quot;: \&quot;A-35:e7:72:8a:07:50:3b:3d:75:96:57:52:72:41:0d:78:cc:c6:e5:53:48:c6:65:58:5b:fa:af:4d:2d:73:95:c5\&quot;}&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentity"></param>
        /// <returns>Task of ApiResponse (EnrollmentIdentity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnrollmentIdentity>> CreateDeviceEnrollmentAsyncWithHttpInfo (EnrollmentId enrollmentIdentity)
        {
            // verify the required parameter 'enrollmentIdentity' is set
            if (enrollmentIdentity == null)
                throw new ApiException(400, "Missing required parameter 'enrollmentIdentity' when calling PublicAPIApi->CreateDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enrollmentIdentity != null && enrollmentIdentity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(enrollmentIdentity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enrollmentIdentity; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrollmentIdentity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrollmentIdentity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrollmentIdentity)));
        }

        /// <summary>
        /// Bulk delete With bulk delete, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs to be deleted.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>BulkResponse</returns>
        public BulkResponse DeleteBulkDeviceEnrollment (System.IO.Stream enrollmentIdentities)
        {
             ApiResponse<BulkResponse> localVarResponse = DeleteBulkDeviceEnrollmentWithHttpInfo(enrollmentIdentities);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk delete With bulk delete, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs to be deleted.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>ApiResponse of BulkResponse</returns>
        public ApiResponse< BulkResponse > DeleteBulkDeviceEnrollmentWithHttpInfo (System.IO.Stream enrollmentIdentities)
        {
            // verify the required parameter 'enrollmentIdentities' is set
            if (enrollmentIdentities == null)
                throw new ApiException(400, "Missing required parameter 'enrollmentIdentities' when calling PublicAPIApi->DeleteBulkDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments-bulk-deletes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enrollmentIdentities != null) localVarFileParams.Add("enrollment_identities", Configuration.ApiClient.ParameterToFile("enrollment_identities", enrollmentIdentities));

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBulkDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)));
        }

        /// <summary>
        /// Bulk delete With bulk delete, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs to be deleted.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>Task of BulkResponse</returns>
        public async System.Threading.Tasks.Task<BulkResponse> DeleteBulkDeviceEnrollmentAsync (System.IO.Stream enrollmentIdentities)
        {
             ApiResponse<BulkResponse> localVarResponse = await DeleteBulkDeviceEnrollmentAsyncWithHttpInfo(enrollmentIdentities);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk delete With bulk delete, you can upload a &#x60;CSV&#x60; file containing a number of enrollment IDs to be deleted.  **Example usage:** &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ -F &#39;enrollment_identities&#x3D;@/path/to/enrollments/enrollments.csv&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes  &#x60;&#x60;&#x60; **An example &#x60;CSV&#x60; file:** 1. The first line is assumed to be the header. The content of the header is not validated. 2. Each line can contain comma-separated values, where the first value is always assumed to be the Enrollment ID. 3. Only one enrollment ID is expected per line. 4. Valid enrollments begin with A followed by a - and 95 characters in the format as below. 5. Valid enrollment identities may be enclosed within quotes. 6. UTF-8 encoding is expected.  &#x60;&#x60;&#x60; \&quot;enrollment_identity\&quot; \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:44:71:93:23:22:15:43:23:12\&quot;, \&quot;A-4E:63:2D:AE:14:BC:D1:09:77:21:95:44:ED:34:06:57:1E:03:B1:EF:0E:F2:59:25:48:44:71:22:15:43:23:12\&quot;,  &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enrollmentIdentities">The &#x60;CSV&#x60; file containing the enrollment IDs. The maximum file size is 10MB. </param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkResponse>> DeleteBulkDeviceEnrollmentAsyncWithHttpInfo (System.IO.Stream enrollmentIdentities)
        {
            // verify the required parameter 'enrollmentIdentities' is set
            if (enrollmentIdentities == null)
                throw new ApiException(400, "Missing required parameter 'enrollmentIdentities' when calling PublicAPIApi->DeleteBulkDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments-bulk-deletes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (enrollmentIdentities != null) localVarFileParams.Add("enrollment_identities", Configuration.ApiClient.ParameterToFile("enrollment_identities", enrollmentIdentities));

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBulkDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)));
        }

        /// <summary>
        /// Delete an enrollment by ID. To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information, see [Transferring the ownership using First-to-Claim](/docs/current/connecting/device-ownership.html). &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns></returns>
        public void DeleteDeviceEnrollment (string id)
        {
             DeleteDeviceEnrollmentWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an enrollment by ID. To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information, see [Transferring the ownership using First-to-Claim](/docs/current/connecting/device-ownership.html). &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDeviceEnrollmentWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAPIApi->DeleteDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an enrollment by ID. To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information, see [Transferring the ownership using First-to-Claim](/docs/current/connecting/device-ownership.html). &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDeviceEnrollmentAsync (string id)
        {
             await DeleteDeviceEnrollmentAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an enrollment by ID. To free a device from your account you can delete the enrollment claim. To bypass the device ownership, you need to delete the enrollment and do a factory reset for the device. For more information, see [Transferring the ownership using First-to-Claim](/docs/current/connecting/device-ownership.html). &lt;br&gt; **Example usage:** &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDeviceEnrollmentAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAPIApi->DeleteDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get bulk upload entity Provides information on bulk upload for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk upload reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk create task entity ID</param>
        /// <returns>BulkResponse</returns>
        public BulkResponse GetBulkDeviceEnrollment (string id)
        {
             ApiResponse<BulkResponse> localVarResponse = GetBulkDeviceEnrollmentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bulk upload entity Provides information on bulk upload for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk upload reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk create task entity ID</param>
        /// <returns>ApiResponse of BulkResponse</returns>
        public ApiResponse< BulkResponse > GetBulkDeviceEnrollmentWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAPIApi->GetBulkDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments-bulk-uploads/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)));
        }

        /// <summary>
        /// Get bulk upload entity Provides information on bulk upload for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk upload reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk create task entity ID</param>
        /// <returns>Task of BulkResponse</returns>
        public async System.Threading.Tasks.Task<BulkResponse> GetBulkDeviceEnrollmentAsync (string id)
        {
             ApiResponse<BulkResponse> localVarResponse = await GetBulkDeviceEnrollmentAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bulk upload entity Provides information on bulk upload for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk upload reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-uploads/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk create task entity ID</param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkResponse>> GetBulkDeviceEnrollmentAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAPIApi->GetBulkDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments-bulk-uploads/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)));
        }

        /// <summary>
        /// Get bulk delete entity Provides information on bulk delete for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk delete reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk delete task entity ID</param>
        /// <returns>BulkResponse</returns>
        public BulkResponse GetBulkDeviceEnrollmentDelete (string id)
        {
             ApiResponse<BulkResponse> localVarResponse = GetBulkDeviceEnrollmentDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bulk delete entity Provides information on bulk delete for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk delete reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk delete task entity ID</param>
        /// <returns>ApiResponse of BulkResponse</returns>
        public ApiResponse< BulkResponse > GetBulkDeviceEnrollmentDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAPIApi->GetBulkDeviceEnrollmentDelete");

            var localVarPath = "/v3/device-enrollments-bulk-deletes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkDeviceEnrollmentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)));
        }

        /// <summary>
        /// Get bulk delete entity Provides information on bulk delete for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk delete reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk delete task entity ID</param>
        /// <returns>Task of BulkResponse</returns>
        public async System.Threading.Tasks.Task<BulkResponse> GetBulkDeviceEnrollmentDeleteAsync (string id)
        {
             ApiResponse<BulkResponse> localVarResponse = await GetBulkDeviceEnrollmentDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bulk delete entity Provides information on bulk delete for the given ID. For example, the bulk status and the number of processed enrollment identities. Also links to the bulk delete reports are provided. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments-bulk-deletes/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Bulk delete task entity ID</param>
        /// <returns>Task of ApiResponse (BulkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkResponse>> GetBulkDeviceEnrollmentDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAPIApi->GetBulkDeviceEnrollmentDelete");

            var localVarPath = "/v3/device-enrollments-bulk-deletes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkDeviceEnrollmentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkResponse)));
        }

        /// <summary>
        /// Get details of an enrollment by ID. To check the enrollment info in detail, for example date of claim and expiration date. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>EnrollmentIdentity</returns>
        public EnrollmentIdentity GetDeviceEnrollment (string id)
        {
             ApiResponse<EnrollmentIdentity> localVarResponse = GetDeviceEnrollmentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details of an enrollment by ID. To check the enrollment info in detail, for example date of claim and expiration date. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>ApiResponse of EnrollmentIdentity</returns>
        public ApiResponse< EnrollmentIdentity > GetDeviceEnrollmentWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAPIApi->GetDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrollmentIdentity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrollmentIdentity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrollmentIdentity)));
        }

        /// <summary>
        /// Get details of an enrollment by ID. To check the enrollment info in detail, for example date of claim and expiration date. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>Task of EnrollmentIdentity</returns>
        public async System.Threading.Tasks.Task<EnrollmentIdentity> GetDeviceEnrollmentAsync (string id)
        {
             ApiResponse<EnrollmentIdentity> localVarResponse = await GetDeviceEnrollmentAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details of an enrollment by ID. To check the enrollment info in detail, for example date of claim and expiration date. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments/{id} &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Enrollment identity.</param>
        /// <returns>Task of ApiResponse (EnrollmentIdentity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnrollmentIdentity>> GetDeviceEnrollmentAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PublicAPIApi->GetDeviceEnrollment");

            var localVarPath = "/v3/device-enrollments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeviceEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrollmentIdentity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrollmentIdentity) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrollmentIdentity)));
        }

        /// <summary>
        /// Get enrollment list. Provides a list of pending and claimed enrollments. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments &#x60;&#x60;&#x60; With query parameters: &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ &#39;https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit&#x3D;10&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of results to be returned. Between 2 and 1000, inclusive. (optional)</param>
        /// <param name="after">Entity ID to fetch after. (optional)</param>
        /// <param name="order">ASC or DESC (optional, default to ASC)</param>
        /// <param name="include">Comma-separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <returns>EnrollmentIdentities</returns>
        public EnrollmentIdentities GetDeviceEnrollments (int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<EnrollmentIdentities> localVarResponse = GetDeviceEnrollmentsWithHttpInfo(limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get enrollment list. Provides a list of pending and claimed enrollments. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments &#x60;&#x60;&#x60; With query parameters: &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ &#39;https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit&#x3D;10&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of results to be returned. Between 2 and 1000, inclusive. (optional)</param>
        /// <param name="after">Entity ID to fetch after. (optional)</param>
        /// <param name="order">ASC or DESC (optional, default to ASC)</param>
        /// <param name="include">Comma-separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <returns>ApiResponse of EnrollmentIdentities</returns>
        public ApiResponse< EnrollmentIdentities > GetDeviceEnrollmentsWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null)
        {

            var localVarPath = "/v3/device-enrollments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeviceEnrollments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrollmentIdentities>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrollmentIdentities) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrollmentIdentities)));
        }

        /// <summary>
        /// Get enrollment list. Provides a list of pending and claimed enrollments. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments &#x60;&#x60;&#x60; With query parameters: &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ &#39;https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit&#x3D;10&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of results to be returned. Between 2 and 1000, inclusive. (optional)</param>
        /// <param name="after">Entity ID to fetch after. (optional)</param>
        /// <param name="order">ASC or DESC (optional, default to ASC)</param>
        /// <param name="include">Comma-separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <returns>Task of EnrollmentIdentities</returns>
        public async System.Threading.Tasks.Task<EnrollmentIdentities> GetDeviceEnrollmentsAsync (int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<EnrollmentIdentities> localVarResponse = await GetDeviceEnrollmentsAsyncWithHttpInfo(limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get enrollment list. Provides a list of pending and claimed enrollments. **Example usage:** &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/device-enrollments &#x60;&#x60;&#x60; With query parameters: &#x60;&#x60;&#x60; curl -X GET \\ -H &#39;Authorization: Bearer &lt;valid access token&gt;&#39; \\ &#39;https://api.us-east-1.mbedcloud.com/v3/device-enrollments?limit&#x3D;10&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="enrollment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of results to be returned. Between 2 and 1000, inclusive. (optional)</param>
        /// <param name="after">Entity ID to fetch after. (optional)</param>
        /// <param name="order">ASC or DESC (optional, default to ASC)</param>
        /// <param name="include">Comma-separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <returns>Task of ApiResponse (EnrollmentIdentities)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnrollmentIdentities>> GetDeviceEnrollmentsAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null)
        {

            var localVarPath = "/v3/device-enrollments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (order != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (include != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeviceEnrollments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrollmentIdentities>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrollmentIdentities) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrollmentIdentities)));
        }

    }
}
