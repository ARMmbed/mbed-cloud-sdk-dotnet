/* 
 * <auto-generated>
 * Connect API
 *
 * Mbed Cloud Connect API allows web applications to communicate with devices. You can subscribe to device resources and read/write values to them. mbed Cloud Connect makes connectivity to devices easy by queuing requests and caching resource values.
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = mds.Client.SwaggerDateConverter;

namespace mds.Model
{
    /// <summary>
    /// DeviceRequest
    /// </summary>
    [DataContract]
    public partial class DeviceRequest :  IEquatable<DeviceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceRequest" /> class.
        /// </summary>
        /// <param name="PayloadB64">The base64 encoded payload to be sent to the device..</param>
        /// <param name="ContentType">The content type of the payload..</param>
        /// <param name="Method">The CoAP request method. Allowed values are GET, POST, PUT and DELETE. (required).</param>
        /// <param name="Accept">The content type of an accepted response..</param>
        /// <param name="Uri">The URI path of the requested resource. (required).</param>
        public DeviceRequest(string PayloadB64 = default(string), string ContentType = default(string), string Method = default(string), string Accept = default(string), string Uri = default(string))
        {
            // to ensure "Method" is required (not null)
            if (Method == null)
            {
                throw new InvalidDataException("Method is a required property for DeviceRequest and cannot be null");
            }
            else
            {
                this.Method = Method;
            }
            // to ensure "Uri" is required (not null)
            if (Uri == null)
            {
                throw new InvalidDataException("Uri is a required property for DeviceRequest and cannot be null");
            }
            else
            {
                this.Uri = Uri;
            }
            this.PayloadB64 = PayloadB64;
            this.ContentType = ContentType;
            this.Accept = Accept;
        }
        
        /// <summary>
        /// The base64 encoded payload to be sent to the device.
        /// </summary>
        /// <value>The base64 encoded payload to be sent to the device.</value>
        [DataMember(Name="payload-b64", EmitDefaultValue=false)]
        public string PayloadB64 { get; set; }

        /// <summary>
        /// The content type of the payload.
        /// </summary>
        /// <value>The content type of the payload.</value>
        [DataMember(Name="content-type", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// The CoAP request method. Allowed values are GET, POST, PUT and DELETE.
        /// </summary>
        /// <value>The CoAP request method. Allowed values are GET, POST, PUT and DELETE.</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// The content type of an accepted response.
        /// </summary>
        /// <value>The content type of an accepted response.</value>
        [DataMember(Name="accept", EmitDefaultValue=false)]
        public string Accept { get; set; }

        /// <summary>
        /// The URI path of the requested resource.
        /// </summary>
        /// <value>The URI path of the requested resource.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceRequest {\n");
            sb.Append("  PayloadB64: ").Append(PayloadB64).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Accept: ").Append(Accept).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceRequest);
        }

        /// <summary>
        /// Returns true if DeviceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayloadB64 == input.PayloadB64 ||
                    (this.PayloadB64 != null &&
                    this.PayloadB64.Equals(input.PayloadB64))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Accept == input.Accept ||
                    (this.Accept != null &&
                    this.Accept.Equals(input.Accept))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayloadB64 != null)
                    hashCode = hashCode * 59 + this.PayloadB64.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Accept != null)
                    hashCode = hashCode * 59 + this.Accept.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
