/* 
 * Deployment Service API
 *
 * This is the API Documentation for the mbed deployment service which is part of the update service.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using deployment_service.Client;
using deployment_service.Model;

namespace deployment_service.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>UpdateCampaign</returns>
        UpdateCampaign UpdateCampaignCreate (UpdateCampaignPostRequest updateCampaign);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>ApiResponse of UpdateCampaign</returns>
        ApiResponse<UpdateCampaign> UpdateCampaignCreateWithHttpInfo (UpdateCampaignPostRequest updateCampaign);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>UpdateCampaign</returns>
        UpdateCampaign UpdateCampaignDestroy (string campaignId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>ApiResponse of UpdateCampaign</returns>
        ApiResponse<UpdateCampaign> UpdateCampaignDestroyWithHttpInfo (string campaignId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-campaign-properties-all-properties-are-filterable\&quot;&gt;By campaign properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;For example: &lt;code&gt;state&#x3D;[draft|scheduled|devicefectch|devicecopy|devicecopycomplete|publishing|deploying|deployed|manifestremoved|expired]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;root_manifest_id&#x3D;43217771234242e594ddb433816c498a&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;deployed&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Ddeployed%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceFilter"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="finished"> (optional)</param>
        /// <param name="finishedLte"> (optional)</param>
        /// <param name="finishedGte"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="rootManifestUrl"> (optional)</param>
        /// <param name="startedAt"> (optional)</param>
        /// <param name="startedAtLte"> (optional)</param>
        /// <param name="statedAtGte"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="when"> (optional)</param>
        /// <param name="whenLte"> (optional)</param>
        /// <param name="whenGte"> (optional)</param>
        /// <returns>UpdateCampaignPage</returns>
        UpdateCampaignPage UpdateCampaignList (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string description = null, string deviceFilter = null, string etag = null, string etagLte = null, string etagGte = null, string finished = null, string finishedLte = null, string finishedGte = null, string id = null, string name = null, string _object = null, string rootManifestId = null, string rootManifestUrl = null, string startedAt = null, string startedAtLte = null, string statedAtGte = null, string state = null, string when = null, string whenLte = null, string whenGte = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-campaign-properties-all-properties-are-filterable\&quot;&gt;By campaign properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;For example: &lt;code&gt;state&#x3D;[draft|scheduled|devicefectch|devicecopy|devicecopycomplete|publishing|deploying|deployed|manifestremoved|expired]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;root_manifest_id&#x3D;43217771234242e594ddb433816c498a&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;deployed&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Ddeployed%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceFilter"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="finished"> (optional)</param>
        /// <param name="finishedLte"> (optional)</param>
        /// <param name="finishedGte"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="rootManifestUrl"> (optional)</param>
        /// <param name="startedAt"> (optional)</param>
        /// <param name="startedAtLte"> (optional)</param>
        /// <param name="statedAtGte"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="when"> (optional)</param>
        /// <param name="whenLte"> (optional)</param>
        /// <param name="whenGte"> (optional)</param>
        /// <returns>ApiResponse of UpdateCampaignPage</returns>
        ApiResponse<UpdateCampaignPage> UpdateCampaignListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string description = null, string deviceFilter = null, string etag = null, string etagLte = null, string etagGte = null, string finished = null, string finishedLte = null, string finishedGte = null, string id = null, string name = null, string _object = null, string rootManifestId = null, string rootManifestUrl = null, string startedAt = null, string startedAtLte = null, string statedAtGte = null, string state = null, string when = null, string whenLte = null, string whenGte = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>UpdateCampaignPatchRequest</returns>
        UpdateCampaignPatchRequest UpdateCampaignPartialUpdate (string campaignId, UpdateCampaignPatchRequest updateCampaign);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>ApiResponse of UpdateCampaignPatchRequest</returns>
        ApiResponse<UpdateCampaignPatchRequest> UpdateCampaignPartialUpdateWithHttpInfo (string campaignId, UpdateCampaignPatchRequest updateCampaign);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>UpdateCampaign</returns>
        UpdateCampaign UpdateCampaignRetrieve (string campaignId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>ApiResponse of UpdateCampaign</returns>
        ApiResponse<UpdateCampaign> UpdateCampaignRetrieveWithHttpInfo (string campaignId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>UpdateCampaign</returns>
        UpdateCampaign UpdateCampaignUpdate (string campaignId, UpdateCampaignPutRequest updateCampaign);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>ApiResponse of UpdateCampaign</returns>
        ApiResponse<UpdateCampaign> UpdateCampaignUpdateWithHttpInfo (string campaignId, UpdateCampaignPutRequest updateCampaign);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of UpdateCampaign</returns>
        System.Threading.Tasks.Task<UpdateCampaign> UpdateCampaignCreateAsync (UpdateCampaignPostRequest updateCampaign);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaign>> UpdateCampaignCreateAsyncWithHttpInfo (UpdateCampaignPostRequest updateCampaign);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of UpdateCampaign</returns>
        System.Threading.Tasks.Task<UpdateCampaign> UpdateCampaignDestroyAsync (string campaignId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaign>> UpdateCampaignDestroyAsyncWithHttpInfo (string campaignId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-campaign-properties-all-properties-are-filterable\&quot;&gt;By campaign properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;For example: &lt;code&gt;state&#x3D;[draft|scheduled|devicefectch|devicecopy|devicecopycomplete|publishing|deploying|deployed|manifestremoved|expired]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;root_manifest_id&#x3D;43217771234242e594ddb433816c498a&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;deployed&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Ddeployed%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceFilter"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="finished"> (optional)</param>
        /// <param name="finishedLte"> (optional)</param>
        /// <param name="finishedGte"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="rootManifestUrl"> (optional)</param>
        /// <param name="startedAt"> (optional)</param>
        /// <param name="startedAtLte"> (optional)</param>
        /// <param name="statedAtGte"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="when"> (optional)</param>
        /// <param name="whenLte"> (optional)</param>
        /// <param name="whenGte"> (optional)</param>
        /// <returns>Task of UpdateCampaignPage</returns>
        System.Threading.Tasks.Task<UpdateCampaignPage> UpdateCampaignListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string description = null, string deviceFilter = null, string etag = null, string etagLte = null, string etagGte = null, string finished = null, string finishedLte = null, string finishedGte = null, string id = null, string name = null, string _object = null, string rootManifestId = null, string rootManifestUrl = null, string startedAt = null, string startedAtLte = null, string statedAtGte = null, string state = null, string when = null, string whenLte = null, string whenGte = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-campaign-properties-all-properties-are-filterable\&quot;&gt;By campaign properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;For example: &lt;code&gt;state&#x3D;[draft|scheduled|devicefectch|devicecopy|devicecopycomplete|publishing|deploying|deployed|manifestremoved|expired]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;root_manifest_id&#x3D;43217771234242e594ddb433816c498a&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;deployed&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Ddeployed%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceFilter"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="finished"> (optional)</param>
        /// <param name="finishedLte"> (optional)</param>
        /// <param name="finishedGte"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="rootManifestUrl"> (optional)</param>
        /// <param name="startedAt"> (optional)</param>
        /// <param name="startedAtLte"> (optional)</param>
        /// <param name="statedAtGte"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="when"> (optional)</param>
        /// <param name="whenLte"> (optional)</param>
        /// <param name="whenGte"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdateCampaignPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaignPage>> UpdateCampaignListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string description = null, string deviceFilter = null, string etag = null, string etagLte = null, string etagGte = null, string finished = null, string finishedLte = null, string finishedGte = null, string id = null, string name = null, string _object = null, string rootManifestId = null, string rootManifestUrl = null, string startedAt = null, string startedAtLte = null, string statedAtGte = null, string state = null, string when = null, string whenLte = null, string whenGte = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of UpdateCampaignPatchRequest</returns>
        System.Threading.Tasks.Task<UpdateCampaignPatchRequest> UpdateCampaignPartialUpdateAsync (string campaignId, UpdateCampaignPatchRequest updateCampaign);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaignPatchRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaignPatchRequest>> UpdateCampaignPartialUpdateAsyncWithHttpInfo (string campaignId, UpdateCampaignPatchRequest updateCampaign);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>Task of UpdateCampaign</returns>
        System.Threading.Tasks.Task<UpdateCampaign> UpdateCampaignRetrieveAsync (string campaignId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaign>> UpdateCampaignRetrieveAsyncWithHttpInfo (string campaignId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of UpdateCampaign</returns>
        System.Threading.Tasks.Task<UpdateCampaign> UpdateCampaignUpdateAsync (string campaignId, UpdateCampaignPutRequest updateCampaign);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaign>> UpdateCampaignUpdateAsyncWithHttpInfo (string campaignId, UpdateCampaignPutRequest updateCampaign);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private deployment_service.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = deployment_service.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = deployment_service.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public deployment_service.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>UpdateCampaign</returns>
        public UpdateCampaign UpdateCampaignCreate (UpdateCampaignPostRequest updateCampaign)
        {
             ApiResponse<UpdateCampaign> localVarResponse = UpdateCampaignCreateWithHttpInfo(updateCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>ApiResponse of UpdateCampaign</returns>
        public ApiResponse< UpdateCampaign > UpdateCampaignCreateWithHttpInfo (UpdateCampaignPostRequest updateCampaign)
        {
            // verify the required parameter 'updateCampaign' is set
            if (updateCampaign == null)
                throw new ApiException(400, "Missing required parameter 'updateCampaign' when calling DefaultApi->UpdateCampaignCreate");

            var localVarPath = "/v3/update-campaigns/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (updateCampaign != null && updateCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCampaign; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaign) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaign)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of UpdateCampaign</returns>
        public async System.Threading.Tasks.Task<UpdateCampaign> UpdateCampaignCreateAsync (UpdateCampaignPostRequest updateCampaign)
        {
             ApiResponse<UpdateCampaign> localVarResponse = await UpdateCampaignCreateAsyncWithHttpInfo(updateCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaign>> UpdateCampaignCreateAsyncWithHttpInfo (UpdateCampaignPostRequest updateCampaign)
        {
            // verify the required parameter 'updateCampaign' is set
            if (updateCampaign == null)
                throw new ApiException(400, "Missing required parameter 'updateCampaign' when calling DefaultApi->UpdateCampaignCreate");

            var localVarPath = "/v3/update-campaigns/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (updateCampaign != null && updateCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCampaign; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaign) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaign)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>UpdateCampaign</returns>
        public UpdateCampaign UpdateCampaignDestroy (string campaignId)
        {
             ApiResponse<UpdateCampaign> localVarResponse = UpdateCampaignDestroyWithHttpInfo(campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>ApiResponse of UpdateCampaign</returns>
        public ApiResponse< UpdateCampaign > UpdateCampaignDestroyWithHttpInfo (string campaignId)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignDestroy");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignDestroy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaign) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaign)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of UpdateCampaign</returns>
        public async System.Threading.Tasks.Task<UpdateCampaign> UpdateCampaignDestroyAsync (string campaignId)
        {
             ApiResponse<UpdateCampaign> localVarResponse = await UpdateCampaignDestroyAsyncWithHttpInfo(campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaign>> UpdateCampaignDestroyAsyncWithHttpInfo (string campaignId)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignDestroy");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignDestroy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaign) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaign)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-campaign-properties-all-properties-are-filterable\&quot;&gt;By campaign properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;For example: &lt;code&gt;state&#x3D;[draft|scheduled|devicefectch|devicecopy|devicecopycomplete|publishing|deploying|deployed|manifestremoved|expired]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;root_manifest_id&#x3D;43217771234242e594ddb433816c498a&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;deployed&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Ddeployed%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceFilter"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="finished"> (optional)</param>
        /// <param name="finishedLte"> (optional)</param>
        /// <param name="finishedGte"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="rootManifestUrl"> (optional)</param>
        /// <param name="startedAt"> (optional)</param>
        /// <param name="startedAtLte"> (optional)</param>
        /// <param name="statedAtGte"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="when"> (optional)</param>
        /// <param name="whenLte"> (optional)</param>
        /// <param name="whenGte"> (optional)</param>
        /// <returns>UpdateCampaignPage</returns>
        public UpdateCampaignPage UpdateCampaignList (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string description = null, string deviceFilter = null, string etag = null, string etagLte = null, string etagGte = null, string finished = null, string finishedLte = null, string finishedGte = null, string id = null, string name = null, string _object = null, string rootManifestId = null, string rootManifestUrl = null, string startedAt = null, string startedAtLte = null, string statedAtGte = null, string state = null, string when = null, string whenLte = null, string whenGte = null)
        {
             ApiResponse<UpdateCampaignPage> localVarResponse = UpdateCampaignListWithHttpInfo(limit, order, after, filter, include, createdAt, createdAtLte, createdAtGte, description, deviceFilter, etag, etagLte, etagGte, finished, finishedLte, finishedGte, id, name, _object, rootManifestId, rootManifestUrl, startedAt, startedAtLte, statedAtGte, state, when, whenLte, whenGte);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-campaign-properties-all-properties-are-filterable\&quot;&gt;By campaign properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;For example: &lt;code&gt;state&#x3D;[draft|scheduled|devicefectch|devicecopy|devicecopycomplete|publishing|deploying|deployed|manifestremoved|expired]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;root_manifest_id&#x3D;43217771234242e594ddb433816c498a&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;deployed&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Ddeployed%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceFilter"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="finished"> (optional)</param>
        /// <param name="finishedLte"> (optional)</param>
        /// <param name="finishedGte"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="rootManifestUrl"> (optional)</param>
        /// <param name="startedAt"> (optional)</param>
        /// <param name="startedAtLte"> (optional)</param>
        /// <param name="statedAtGte"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="when"> (optional)</param>
        /// <param name="whenLte"> (optional)</param>
        /// <param name="whenGte"> (optional)</param>
        /// <returns>ApiResponse of UpdateCampaignPage</returns>
        public ApiResponse< UpdateCampaignPage > UpdateCampaignListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string description = null, string deviceFilter = null, string etag = null, string etagLte = null, string etagGte = null, string finished = null, string finishedLte = null, string finishedGte = null, string id = null, string name = null, string _object = null, string rootManifestId = null, string rootManifestUrl = null, string startedAt = null, string startedAtLte = null, string statedAtGte = null, string state = null, string when = null, string whenLte = null, string whenGte = null)
        {

            var localVarPath = "/v3/update-campaigns/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (createdAt != null) localVarQueryParams.Add("created_at", Configuration.ApiClient.ParameterToString(createdAt)); // query parameter
            if (createdAtLte != null) localVarQueryParams.Add("created_at__lte", Configuration.ApiClient.ParameterToString(createdAtLte)); // query parameter
            if (createdAtGte != null) localVarQueryParams.Add("created_at__gte", Configuration.ApiClient.ParameterToString(createdAtGte)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (deviceFilter != null) localVarQueryParams.Add("device_filter", Configuration.ApiClient.ParameterToString(deviceFilter)); // query parameter
            if (etag != null) localVarQueryParams.Add("etag", Configuration.ApiClient.ParameterToString(etag)); // query parameter
            if (etagLte != null) localVarQueryParams.Add("etag__lte", Configuration.ApiClient.ParameterToString(etagLte)); // query parameter
            if (etagGte != null) localVarQueryParams.Add("etag__gte", Configuration.ApiClient.ParameterToString(etagGte)); // query parameter
            if (finished != null) localVarQueryParams.Add("finished", Configuration.ApiClient.ParameterToString(finished)); // query parameter
            if (finishedLte != null) localVarQueryParams.Add("finished__lte", Configuration.ApiClient.ParameterToString(finishedLte)); // query parameter
            if (finishedGte != null) localVarQueryParams.Add("finished__gte", Configuration.ApiClient.ParameterToString(finishedGte)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (_object != null) localVarQueryParams.Add("object", Configuration.ApiClient.ParameterToString(_object)); // query parameter
            if (rootManifestId != null) localVarQueryParams.Add("root_manifest_id", Configuration.ApiClient.ParameterToString(rootManifestId)); // query parameter
            if (rootManifestUrl != null) localVarQueryParams.Add("root_manifest_url", Configuration.ApiClient.ParameterToString(rootManifestUrl)); // query parameter
            if (startedAt != null) localVarQueryParams.Add("started_at", Configuration.ApiClient.ParameterToString(startedAt)); // query parameter
            if (startedAtLte != null) localVarQueryParams.Add("started_at__lte", Configuration.ApiClient.ParameterToString(startedAtLte)); // query parameter
            if (statedAtGte != null) localVarQueryParams.Add("stated_at__gte", Configuration.ApiClient.ParameterToString(statedAtGte)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (when != null) localVarQueryParams.Add("when", Configuration.ApiClient.ParameterToString(when)); // query parameter
            if (whenLte != null) localVarQueryParams.Add("when__lte", Configuration.ApiClient.ParameterToString(whenLte)); // query parameter
            if (whenGte != null) localVarQueryParams.Add("when_gte", Configuration.ApiClient.ParameterToString(whenGte)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignPage)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-campaign-properties-all-properties-are-filterable\&quot;&gt;By campaign properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;For example: &lt;code&gt;state&#x3D;[draft|scheduled|devicefectch|devicecopy|devicecopycomplete|publishing|deploying|deployed|manifestremoved|expired]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;root_manifest_id&#x3D;43217771234242e594ddb433816c498a&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;deployed&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Ddeployed%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceFilter"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="finished"> (optional)</param>
        /// <param name="finishedLte"> (optional)</param>
        /// <param name="finishedGte"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="rootManifestUrl"> (optional)</param>
        /// <param name="startedAt"> (optional)</param>
        /// <param name="startedAtLte"> (optional)</param>
        /// <param name="statedAtGte"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="when"> (optional)</param>
        /// <param name="whenLte"> (optional)</param>
        /// <param name="whenGte"> (optional)</param>
        /// <returns>Task of UpdateCampaignPage</returns>
        public async System.Threading.Tasks.Task<UpdateCampaignPage> UpdateCampaignListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string description = null, string deviceFilter = null, string etag = null, string etagLte = null, string etagGte = null, string finished = null, string finishedLte = null, string finishedGte = null, string id = null, string name = null, string _object = null, string rootManifestId = null, string rootManifestUrl = null, string startedAt = null, string startedAtLte = null, string statedAtGte = null, string state = null, string when = null, string whenLte = null, string whenGte = null)
        {
             ApiResponse<UpdateCampaignPage> localVarResponse = await UpdateCampaignListAsyncWithHttpInfo(limit, order, after, filter, include, createdAt, createdAtLte, createdAtGte, description, deviceFilter, etag, etagLte, etagGte, finished, finishedLte, finishedGte, id, name, _object, rootManifestId, rootManifestUrl, startedAt, startedAtLte, statedAtGte, state, when, whenLte, whenGte);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-campaign-properties-all-properties-are-filterable\&quot;&gt;By campaign properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;For example: &lt;code&gt;state&#x3D;[draft|scheduled|devicefectch|devicecopy|devicecopycomplete|publishing|deploying|deployed|manifestremoved|expired]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;root_manifest_id&#x3D;43217771234242e594ddb433816c498a&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;deployed&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Ddeployed%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceFilter"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="finished"> (optional)</param>
        /// <param name="finishedLte"> (optional)</param>
        /// <param name="finishedGte"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="rootManifestUrl"> (optional)</param>
        /// <param name="startedAt"> (optional)</param>
        /// <param name="startedAtLte"> (optional)</param>
        /// <param name="statedAtGte"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="when"> (optional)</param>
        /// <param name="whenLte"> (optional)</param>
        /// <param name="whenGte"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdateCampaignPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaignPage>> UpdateCampaignListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string description = null, string deviceFilter = null, string etag = null, string etagLte = null, string etagGte = null, string finished = null, string finishedLte = null, string finishedGte = null, string id = null, string name = null, string _object = null, string rootManifestId = null, string rootManifestUrl = null, string startedAt = null, string startedAtLte = null, string statedAtGte = null, string state = null, string when = null, string whenLte = null, string whenGte = null)
        {

            var localVarPath = "/v3/update-campaigns/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (createdAt != null) localVarQueryParams.Add("created_at", Configuration.ApiClient.ParameterToString(createdAt)); // query parameter
            if (createdAtLte != null) localVarQueryParams.Add("created_at__lte", Configuration.ApiClient.ParameterToString(createdAtLte)); // query parameter
            if (createdAtGte != null) localVarQueryParams.Add("created_at__gte", Configuration.ApiClient.ParameterToString(createdAtGte)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (deviceFilter != null) localVarQueryParams.Add("device_filter", Configuration.ApiClient.ParameterToString(deviceFilter)); // query parameter
            if (etag != null) localVarQueryParams.Add("etag", Configuration.ApiClient.ParameterToString(etag)); // query parameter
            if (etagLte != null) localVarQueryParams.Add("etag__lte", Configuration.ApiClient.ParameterToString(etagLte)); // query parameter
            if (etagGte != null) localVarQueryParams.Add("etag__gte", Configuration.ApiClient.ParameterToString(etagGte)); // query parameter
            if (finished != null) localVarQueryParams.Add("finished", Configuration.ApiClient.ParameterToString(finished)); // query parameter
            if (finishedLte != null) localVarQueryParams.Add("finished__lte", Configuration.ApiClient.ParameterToString(finishedLte)); // query parameter
            if (finishedGte != null) localVarQueryParams.Add("finished__gte", Configuration.ApiClient.ParameterToString(finishedGte)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (_object != null) localVarQueryParams.Add("object", Configuration.ApiClient.ParameterToString(_object)); // query parameter
            if (rootManifestId != null) localVarQueryParams.Add("root_manifest_id", Configuration.ApiClient.ParameterToString(rootManifestId)); // query parameter
            if (rootManifestUrl != null) localVarQueryParams.Add("root_manifest_url", Configuration.ApiClient.ParameterToString(rootManifestUrl)); // query parameter
            if (startedAt != null) localVarQueryParams.Add("started_at", Configuration.ApiClient.ParameterToString(startedAt)); // query parameter
            if (startedAtLte != null) localVarQueryParams.Add("started_at__lte", Configuration.ApiClient.ParameterToString(startedAtLte)); // query parameter
            if (statedAtGte != null) localVarQueryParams.Add("stated_at__gte", Configuration.ApiClient.ParameterToString(statedAtGte)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (when != null) localVarQueryParams.Add("when", Configuration.ApiClient.ParameterToString(when)); // query parameter
            if (whenLte != null) localVarQueryParams.Add("when__lte", Configuration.ApiClient.ParameterToString(whenLte)); // query parameter
            if (whenGte != null) localVarQueryParams.Add("when_gte", Configuration.ApiClient.ParameterToString(whenGte)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignPage)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>UpdateCampaignPatchRequest</returns>
        public UpdateCampaignPatchRequest UpdateCampaignPartialUpdate (string campaignId, UpdateCampaignPatchRequest updateCampaign)
        {
             ApiResponse<UpdateCampaignPatchRequest> localVarResponse = UpdateCampaignPartialUpdateWithHttpInfo(campaignId, updateCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>ApiResponse of UpdateCampaignPatchRequest</returns>
        public ApiResponse< UpdateCampaignPatchRequest > UpdateCampaignPartialUpdateWithHttpInfo (string campaignId, UpdateCampaignPatchRequest updateCampaign)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignPartialUpdate");
            // verify the required parameter 'updateCampaign' is set
            if (updateCampaign == null)
                throw new ApiException(400, "Missing required parameter 'updateCampaign' when calling DefaultApi->UpdateCampaignPartialUpdate");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (updateCampaign != null && updateCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCampaign; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignPatchRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignPatchRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignPatchRequest)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of UpdateCampaignPatchRequest</returns>
        public async System.Threading.Tasks.Task<UpdateCampaignPatchRequest> UpdateCampaignPartialUpdateAsync (string campaignId, UpdateCampaignPatchRequest updateCampaign)
        {
             ApiResponse<UpdateCampaignPatchRequest> localVarResponse = await UpdateCampaignPartialUpdateAsyncWithHttpInfo(campaignId, updateCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaignPatchRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaignPatchRequest>> UpdateCampaignPartialUpdateAsyncWithHttpInfo (string campaignId, UpdateCampaignPatchRequest updateCampaign)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignPartialUpdate");
            // verify the required parameter 'updateCampaign' is set
            if (updateCampaign == null)
                throw new ApiException(400, "Missing required parameter 'updateCampaign' when calling DefaultApi->UpdateCampaignPartialUpdate");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (updateCampaign != null && updateCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCampaign; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignPatchRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignPatchRequest) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignPatchRequest)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>UpdateCampaign</returns>
        public UpdateCampaign UpdateCampaignRetrieve (string campaignId)
        {
             ApiResponse<UpdateCampaign> localVarResponse = UpdateCampaignRetrieveWithHttpInfo(campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>ApiResponse of UpdateCampaign</returns>
        public ApiResponse< UpdateCampaign > UpdateCampaignRetrieveWithHttpInfo (string campaignId)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignRetrieve");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaign) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaign)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>Task of UpdateCampaign</returns>
        public async System.Threading.Tasks.Task<UpdateCampaign> UpdateCampaignRetrieveAsync (string campaignId)
        {
             ApiResponse<UpdateCampaign> localVarResponse = await UpdateCampaignRetrieveAsyncWithHttpInfo(campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaign>> UpdateCampaignRetrieveAsyncWithHttpInfo (string campaignId)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignRetrieve");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaign) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaign)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>UpdateCampaign</returns>
        public UpdateCampaign UpdateCampaignUpdate (string campaignId, UpdateCampaignPutRequest updateCampaign)
        {
             ApiResponse<UpdateCampaign> localVarResponse = UpdateCampaignUpdateWithHttpInfo(campaignId, updateCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>ApiResponse of UpdateCampaign</returns>
        public ApiResponse< UpdateCampaign > UpdateCampaignUpdateWithHttpInfo (string campaignId, UpdateCampaignPutRequest updateCampaign)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignUpdate");
            // verify the required parameter 'updateCampaign' is set
            if (updateCampaign == null)
                throw new ApiException(400, "Missing required parameter 'updateCampaign' when calling DefaultApi->UpdateCampaignUpdate");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (updateCampaign != null && updateCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCampaign; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaign) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaign)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of UpdateCampaign</returns>
        public async System.Threading.Tasks.Task<UpdateCampaign> UpdateCampaignUpdateAsync (string campaignId, UpdateCampaignPutRequest updateCampaign)
        {
             ApiResponse<UpdateCampaign> localVarResponse = await UpdateCampaignUpdateAsyncWithHttpInfo(campaignId, updateCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign">Update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaign>> UpdateCampaignUpdateAsyncWithHttpInfo (string campaignId, UpdateCampaignPutRequest updateCampaign)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignUpdate");
            // verify the required parameter 'updateCampaign' is set
            if (updateCampaign == null)
                throw new ApiException(400, "Missing required parameter 'updateCampaign' when calling DefaultApi->UpdateCampaignUpdate");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (updateCampaign != null && updateCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCampaign; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaign) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaign)));
            
        }

    }
}
