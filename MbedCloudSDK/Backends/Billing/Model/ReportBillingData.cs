/* 
 * <auto-generated>
 * billing REST API documentation
 *
 * This document contains the public REST API definitions of the mbed-billing service.
 *
 * OpenAPI spec version: 1.4.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = billing.Client.SwaggerDateConverter;

namespace billing.Model
{
    /// <summary>
    /// ReportBillingData
    /// </summary>
    [DataContract]
    public partial class ReportBillingData :  IEquatable<ReportBillingData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportBillingData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportBillingData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportBillingData" /> class.
        /// </summary>
        /// <param name="ActiveDevices">ActiveDevices (required).</param>
        /// <param name="FirmwareUpdates">FirmwareUpdates (required).</param>
        /// <param name="Generated">Billing report generated time in RFC3339 date-time with millisecond accuracy and UTC time zone. (required).</param>
        /// <param name="PeriodEnd">Billing report end time in RFC3339 date-time with millisecond accuracy and UTC time zone. (required).</param>
        /// <param name="PeriodStart">Billing report start time in RFC3339 date-time with millisecond accuracy and UTC time zone. (required).</param>
        public ReportBillingData(long? ActiveDevices = default(long?), long? FirmwareUpdates = default(long?), DateTime? Generated = default(DateTime?), DateTime? PeriodEnd = default(DateTime?), DateTime? PeriodStart = default(DateTime?))
        {
            // to ensure "ActiveDevices" is required (not null)
            if (ActiveDevices == null)
            {
                throw new InvalidDataException("ActiveDevices is a required property for ReportBillingData and cannot be null");
            }
            else
            {
                this.ActiveDevices = ActiveDevices;
            }
            // to ensure "FirmwareUpdates" is required (not null)
            if (FirmwareUpdates == null)
            {
                throw new InvalidDataException("FirmwareUpdates is a required property for ReportBillingData and cannot be null");
            }
            else
            {
                this.FirmwareUpdates = FirmwareUpdates;
            }
            // to ensure "Generated" is required (not null)
            if (Generated == null)
            {
                throw new InvalidDataException("Generated is a required property for ReportBillingData and cannot be null");
            }
            else
            {
                this.Generated = Generated;
            }
            // to ensure "PeriodEnd" is required (not null)
            if (PeriodEnd == null)
            {
                throw new InvalidDataException("PeriodEnd is a required property for ReportBillingData and cannot be null");
            }
            else
            {
                this.PeriodEnd = PeriodEnd;
            }
            // to ensure "PeriodStart" is required (not null)
            if (PeriodStart == null)
            {
                throw new InvalidDataException("PeriodStart is a required property for ReportBillingData and cannot be null");
            }
            else
            {
                this.PeriodStart = PeriodStart;
            }
        }
        
        /// <summary>
        /// Gets or Sets ActiveDevices
        /// </summary>
        [DataMember(Name="active_devices", EmitDefaultValue=false)]
        public long? ActiveDevices { get; set; }

        /// <summary>
        /// Gets or Sets FirmwareUpdates
        /// </summary>
        [DataMember(Name="firmware_updates", EmitDefaultValue=false)]
        public long? FirmwareUpdates { get; set; }

        /// <summary>
        /// Billing report generated time in RFC3339 date-time with millisecond accuracy and UTC time zone.
        /// </summary>
        /// <value>Billing report generated time in RFC3339 date-time with millisecond accuracy and UTC time zone.</value>
        [DataMember(Name="generated", EmitDefaultValue=false)]
        public DateTime? Generated { get; set; }

        /// <summary>
        /// Billing report end time in RFC3339 date-time with millisecond accuracy and UTC time zone.
        /// </summary>
        /// <value>Billing report end time in RFC3339 date-time with millisecond accuracy and UTC time zone.</value>
        [DataMember(Name="period_end", EmitDefaultValue=false)]
        public DateTime? PeriodEnd { get; set; }

        /// <summary>
        /// Billing report start time in RFC3339 date-time with millisecond accuracy and UTC time zone.
        /// </summary>
        /// <value>Billing report start time in RFC3339 date-time with millisecond accuracy and UTC time zone.</value>
        [DataMember(Name="period_start", EmitDefaultValue=false)]
        public DateTime? PeriodStart { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportBillingData {\n");
            sb.Append("  ActiveDevices: ").Append(ActiveDevices).Append("\n");
            sb.Append("  FirmwareUpdates: ").Append(FirmwareUpdates).Append("\n");
            sb.Append("  Generated: ").Append(Generated).Append("\n");
            sb.Append("  PeriodEnd: ").Append(PeriodEnd).Append("\n");
            sb.Append("  PeriodStart: ").Append(PeriodStart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportBillingData);
        }

        /// <summary>
        /// Returns true if ReportBillingData instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportBillingData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportBillingData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveDevices == input.ActiveDevices ||
                    (this.ActiveDevices != null &&
                    this.ActiveDevices.Equals(input.ActiveDevices))
                ) && 
                (
                    this.FirmwareUpdates == input.FirmwareUpdates ||
                    (this.FirmwareUpdates != null &&
                    this.FirmwareUpdates.Equals(input.FirmwareUpdates))
                ) && 
                (
                    this.Generated == input.Generated ||
                    (this.Generated != null &&
                    this.Generated.Equals(input.Generated))
                ) && 
                (
                    this.PeriodEnd == input.PeriodEnd ||
                    (this.PeriodEnd != null &&
                    this.PeriodEnd.Equals(input.PeriodEnd))
                ) && 
                (
                    this.PeriodStart == input.PeriodStart ||
                    (this.PeriodStart != null &&
                    this.PeriodStart.Equals(input.PeriodStart))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveDevices != null)
                    hashCode = hashCode * 59 + this.ActiveDevices.GetHashCode();
                if (this.FirmwareUpdates != null)
                    hashCode = hashCode * 59 + this.FirmwareUpdates.GetHashCode();
                if (this.Generated != null)
                    hashCode = hashCode * 59 + this.Generated.GetHashCode();
                if (this.PeriodEnd != null)
                    hashCode = hashCode * 59 + this.PeriodEnd.GetHashCode();
                if (this.PeriodStart != null)
                    hashCode = hashCode * 59 + this.PeriodStart.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ActiveDevices (long?) minimum
            if(this.ActiveDevices < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ActiveDevices, must be a value greater than or equal to 0.", new [] { "ActiveDevices" });
            }

            // FirmwareUpdates (long?) minimum
            if(this.FirmwareUpdates < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirmwareUpdates, must be a value greater than or equal to 0.", new [] { "FirmwareUpdates" });
            }

            yield break;
        }
    }

}
