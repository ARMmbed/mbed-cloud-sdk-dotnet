/* 
 * <auto-generated>
 * Billing API
 *
 * Billing API allows users to retrieve billing reports and service package details.
 *
 * OpenAPI spec version: 1.4.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = billing.Client.SwaggerDateConverter;

namespace billing.Model
{
    /// <summary>
    /// Single field that failed validation
    /// </summary>
    [DataContract]
    public partial class BadRequestErrorResponseField :  IEquatable<BadRequestErrorResponseField>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BadRequestErrorResponseField" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BadRequestErrorResponseField() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BadRequestErrorResponseField" /> class.
        /// </summary>
        /// <param name="Message">A human readable message with detailed validation error. (required).</param>
        /// <param name="Name">Name of the field that failed the validation. If name is set to \&quot;body\&quot; then the validation failed on request body. (required).</param>
        public BadRequestErrorResponseField(string Message = default(string), string Name = default(string))
        {
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for BadRequestErrorResponseField and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for BadRequestErrorResponseField and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
        }
        
        /// <summary>
        /// A human readable message with detailed validation error.
        /// </summary>
        /// <value>A human readable message with detailed validation error.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Name of the field that failed the validation. If name is set to \&quot;body\&quot; then the validation failed on request body.
        /// </summary>
        /// <value>Name of the field that failed the validation. If name is set to \&quot;body\&quot; then the validation failed on request body.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BadRequestErrorResponseField {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BadRequestErrorResponseField);
        }

        /// <summary>
        /// Returns true if BadRequestErrorResponseField instances are equal
        /// </summary>
        /// <param name="input">Instance of BadRequestErrorResponseField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BadRequestErrorResponseField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
