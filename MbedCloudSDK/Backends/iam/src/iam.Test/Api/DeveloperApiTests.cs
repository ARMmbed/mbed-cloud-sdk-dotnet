/* 
 * <auto-generated>
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using iam.Client;
using iam.Api;
using iam.Model;

namespace iam.Test
{
    /// <summary>
    ///  Class for testing DeveloperApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DeveloperApiTests
    {
        private DeveloperApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DeveloperApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DeveloperApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DeveloperApi
            //Assert.IsInstanceOfType(typeof(DeveloperApi), instance, "instance is a DeveloperApi");
        }

        
        /// <summary>
        /// Test CreateApiKey
        /// </summary>
        [Test]
        public void CreateApiKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ApiKeyInfoReq body = null;
            //var response = instance.CreateApiKey(body);
            //Assert.IsInstanceOf<ApiKeyInfoResp> (response, "response is ApiKeyInfoResp");
        }
        
        /// <summary>
        /// Test DeleteApiKey
        /// </summary>
        [Test]
        public void DeleteApiKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //instance.DeleteApiKey(apiKey);
            
        }
        
        /// <summary>
        /// Test DeleteCertificate
        /// </summary>
        [Test]
        public void DeleteCertificateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string certId = null;
            //instance.DeleteCertificate(certId);
            
        }
        
        /// <summary>
        /// Test GetAllApiKeys
        /// </summary>
        [Test]
        public void GetAllApiKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string after = null;
            //string order = null;
            //string include = null;
            //string ownerEq = null;
            //var response = instance.GetAllApiKeys(limit, after, order, include, ownerEq);
            //Assert.IsInstanceOf<ApiKeyInfoRespList> (response, "response is ApiKeyInfoRespList");
        }
        
        /// <summary>
        /// Test GetAllCertificates
        /// </summary>
        [Test]
        public void GetAllCertificatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string after = null;
            //string order = null;
            //string include = null;
            //string serviceEq = null;
            //int? expireEq = null;
            //int? deviceExecutionModeEq = null;
            //string ownerEq = null;
            //var response = instance.GetAllCertificates(limit, after, order, include, serviceEq, expireEq, deviceExecutionModeEq, ownerEq);
            //Assert.IsInstanceOf<TrustedCertificateRespList> (response, "response is TrustedCertificateRespList");
        }
        
        /// <summary>
        /// Test GetAllGroups
        /// </summary>
        [Test]
        public void GetAllGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string after = null;
            //string order = null;
            //string include = null;
            //var response = instance.GetAllGroups(limit, after, order, include);
            //Assert.IsInstanceOf<GroupSummaryList> (response, "response is GroupSummaryList");
        }
        
        /// <summary>
        /// Test GetApiKey
        /// </summary>
        [Test]
        public void GetApiKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //var response = instance.GetApiKey(apiKey);
            //Assert.IsInstanceOf<ApiKeyInfoResp> (response, "response is ApiKeyInfoResp");
        }
        
        /// <summary>
        /// Test GetApiKeysOfGroup
        /// </summary>
        [Test]
        public void GetApiKeysOfGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupID = null;
            //int? limit = null;
            //string after = null;
            //string order = null;
            //string include = null;
            //var response = instance.GetApiKeysOfGroup(groupID, limit, after, order, include);
            //Assert.IsInstanceOf<ApiKeyInfoRespList> (response, "response is ApiKeyInfoRespList");
        }
        
        /// <summary>
        /// Test GetCertificate
        /// </summary>
        [Test]
        public void GetCertificateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string certId = null;
            //var response = instance.GetCertificate(certId);
            //Assert.IsInstanceOf<TrustedCertificateResp> (response, "response is TrustedCertificateResp");
        }
        
        /// <summary>
        /// Test GetGroupSummary
        /// </summary>
        [Test]
        public void GetGroupSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupID = null;
            //var response = instance.GetGroupSummary(groupID);
            //Assert.IsInstanceOf<GroupSummary> (response, "response is GroupSummary");
        }
        
        /// <summary>
        /// Test GetMyAccountInfo
        /// </summary>
        [Test]
        public void GetMyAccountInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string include = null;
            //var response = instance.GetMyAccountInfo(include);
            //Assert.IsInstanceOf<AccountInfo> (response, "response is AccountInfo");
        }
        
        /// <summary>
        /// Test GetMyApiKey
        /// </summary>
        [Test]
        public void GetMyApiKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMyApiKey();
            //Assert.IsInstanceOf<ApiKeyInfoResp> (response, "response is ApiKeyInfoResp");
        }
        
        /// <summary>
        /// Test GetMyUser
        /// </summary>
        [Test]
        public void GetMyUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string scratchCodes = null;
            //var response = instance.GetMyUser(scratchCodes);
            //Assert.IsInstanceOf<MyUserInfoResp> (response, "response is MyUserInfoResp");
        }
        
        /// <summary>
        /// Test RemoveApiKeysFromGroup
        /// </summary>
        [Test]
        public void RemoveApiKeysFromGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupID = null;
            //SubjectList body = null;
            //var response = instance.RemoveApiKeysFromGroup(groupID, body);
            //Assert.IsInstanceOf<UpdatedResponse> (response, "response is UpdatedResponse");
        }
        
        /// <summary>
        /// Test UpdateApiKey
        /// </summary>
        [Test]
        public void UpdateApiKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //ApiKeyUpdateReq body = null;
            //var response = instance.UpdateApiKey(apiKey, body);
            //Assert.IsInstanceOf<ApiKeyInfoResp> (response, "response is ApiKeyInfoResp");
        }
        
        /// <summary>
        /// Test UpdateCertificate
        /// </summary>
        [Test]
        public void UpdateCertificateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string certId = null;
            //TrustedCertificateUpdateReq body = null;
            //var response = instance.UpdateCertificate(certId, body);
            //Assert.IsInstanceOf<TrustedCertificateResp> (response, "response is TrustedCertificateResp");
        }
        
        /// <summary>
        /// Test UpdateMyApiKey
        /// </summary>
        [Test]
        public void UpdateMyApiKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ApiKeyUpdateReq body = null;
            //var response = instance.UpdateMyApiKey(body);
            //Assert.IsInstanceOf<ApiKeyInfoResp> (response, "response is ApiKeyInfoResp");
        }
        
        /// <summary>
        /// Test UpdateMyUser
        /// </summary>
        [Test]
        public void UpdateMyUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserUpdateReq body = null;
            //var response = instance.UpdateMyUser(body);
            //Assert.IsInstanceOf<UserUpdateResp> (response, "response is UserUpdateResp");
        }
        
    }

}
