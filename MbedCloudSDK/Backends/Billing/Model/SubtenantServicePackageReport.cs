/* 
 * <auto-generated>
 * billing REST API documentation
 *
 * This document contains the public REST API definitions of the mbed-billing service.
 *
 * OpenAPI spec version: 1.4.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = billing.Client.SwaggerDateConverter;

namespace billing.Model
{
    /// <summary>
    /// SubtenantServicePackageReport
    /// </summary>
    [DataContract]
    public partial class SubtenantServicePackageReport :  IEquatable<SubtenantServicePackageReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtenantServicePackageReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubtenantServicePackageReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtenantServicePackageReport" /> class.
        /// </summary>
        /// <param name="QuotaUsage">QuotaUsage (required).</param>
        public SubtenantServicePackageReport(List<QuotaUsageReport> QuotaUsage = default(List<QuotaUsageReport>))
        {
            // to ensure "QuotaUsage" is required (not null)
            if (QuotaUsage == null)
            {
                throw new InvalidDataException("QuotaUsage is a required property for SubtenantServicePackageReport and cannot be null");
            }
            else
            {
                this.QuotaUsage = QuotaUsage;
            }
        }
        
        /// <summary>
        /// Gets or Sets QuotaUsage
        /// </summary>
        [DataMember(Name="quota_usage", EmitDefaultValue=false)]
        public List<QuotaUsageReport> QuotaUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubtenantServicePackageReport {\n");
            sb.Append("  QuotaUsage: ").Append(QuotaUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubtenantServicePackageReport);
        }

        /// <summary>
        /// Returns true if SubtenantServicePackageReport instances are equal
        /// </summary>
        /// <param name="input">Instance of SubtenantServicePackageReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubtenantServicePackageReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuotaUsage == input.QuotaUsage ||
                    this.QuotaUsage != null &&
                    this.QuotaUsage.SequenceEqual(input.QuotaUsage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuotaUsage != null)
                    hashCode = hashCode * 59 + this.QuotaUsage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
