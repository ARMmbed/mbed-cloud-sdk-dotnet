/* 
 * <auto-generated>
 * Third party CA management API
 *
 * API for managing third party CA for creating certificates on Pelion Device Management
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using external_ca.Client;
using external_ca.Model;

namespace external_ca.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICertificateIssuersActivationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Configure the certificate issuer to be used when creating the device custom certificates. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ -d &#39;{   \&quot;reference\&quot;: \&quot;customer.dlms\&quot;,   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCertificateIssuerConfig">Certificate issuer configuration request</param>
        /// <returns>CertificateIssuerConfigResponse</returns>
        CertificateIssuerConfigResponse CreateCertificateIssuerConfig (CreateCertificateIssuerConfig createCertificateIssuerConfig);

        /// <summary>
        /// Create certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Configure the certificate issuer to be used when creating the device custom certificates. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ -d &#39;{   \&quot;reference\&quot;: \&quot;customer.dlms\&quot;,   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCertificateIssuerConfig">Certificate issuer configuration request</param>
        /// <returns>ApiResponse of CertificateIssuerConfigResponse</returns>
        ApiResponse<CertificateIssuerConfigResponse> CreateCertificateIssuerConfigWithHttpInfo (CreateCertificateIssuerConfig createCertificateIssuerConfig);
        /// <summary>
        /// Delete certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Delete the configured certificate issuer configuration. You can only delete the configurations of custom certificates. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns></returns>
        void DeleteCertificateIssuerConfigByID (string certificateIssuerConfigurationId);

        /// <summary>
        /// Delete certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Delete the configured certificate issuer configuration. You can only delete the configurations of custom certificates. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCertificateIssuerConfigByIDWithHttpInfo (string certificateIssuerConfigurationId);
        /// <summary>
        /// Get certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Provides the configured certificate issuer to be used when creating device certificates for LwM2M communication.&lt;br&gt; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CertificateIssuerConfigResponse</returns>
        CertificateIssuerConfigResponse GetCertificateIssuerConfig ();

        /// <summary>
        /// Get certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Provides the configured certificate issuer to be used when creating device certificates for LwM2M communication.&lt;br&gt; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CertificateIssuerConfigResponse</returns>
        ApiResponse<CertificateIssuerConfigResponse> GetCertificateIssuerConfigWithHttpInfo ();
        /// <summary>
        /// Get certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Provides the configured certificate issuer. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>CertificateIssuerConfigResponse</returns>
        CertificateIssuerConfigResponse GetCertificateIssuerConfigByID (string certificateIssuerConfigurationId);

        /// <summary>
        /// Get certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Provides the configured certificate issuer. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>ApiResponse of CertificateIssuerConfigResponse</returns>
        ApiResponse<CertificateIssuerConfigResponse> GetCertificateIssuerConfigByIDWithHttpInfo (string certificateIssuerConfigurationId);
        /// <summary>
        /// Get certificate issuer configurations.
        /// </summary>
        /// <remarks>
        /// Get certificate issuer configurations, optionally filtered by reference. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ &#x60;&#x60;&#x60; &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq&#x3D;dlms \\ &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceEq">The certificate name to which the certificate issuer configuration applies. (optional)</param>
        /// <returns>CertificateIssuerConfigListResponse</returns>
        CertificateIssuerConfigListResponse GetCertificateIssuerConfigs (string referenceEq = null);

        /// <summary>
        /// Get certificate issuer configurations.
        /// </summary>
        /// <remarks>
        /// Get certificate issuer configurations, optionally filtered by reference. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ &#x60;&#x60;&#x60; &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq&#x3D;dlms \\ &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceEq">The certificate name to which the certificate issuer configuration applies. (optional)</param>
        /// <returns>ApiResponse of CertificateIssuerConfigListResponse</returns>
        ApiResponse<CertificateIssuerConfigListResponse> GetCertificateIssuerConfigsWithHttpInfo (string referenceEq = null);
        /// <summary>
        /// Update certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Configure the certificate issuer to be used when creating device certificates for LwM2M communication. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m \\ -d &#39;{   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigRequest">Certificate Issuer Configuration Request</param>
        /// <returns>CertificateIssuerConfigResponse</returns>
        CertificateIssuerConfigResponse UpdateCertificateIssuerConfig (CertificateIssuerConfigRequest certificateIssuerConfigRequest);

        /// <summary>
        /// Update certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Configure the certificate issuer to be used when creating device certificates for LwM2M communication. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m \\ -d &#39;{   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigRequest">Certificate Issuer Configuration Request</param>
        /// <returns>ApiResponse of CertificateIssuerConfigResponse</returns>
        ApiResponse<CertificateIssuerConfigResponse> UpdateCertificateIssuerConfigWithHttpInfo (CertificateIssuerConfigRequest certificateIssuerConfigRequest);
        /// <summary>
        /// Update certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Update the configured certificate issuer configuration. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <param name="certificateIssuerConfigRequest">Certificate issuer configuration request</param>
        /// <returns>CertificateIssuerConfigResponse</returns>
        CertificateIssuerConfigResponse UpdateCertificateIssuerConfigByID (string certificateIssuerConfigurationId, CertificateIssuerConfigRequest certificateIssuerConfigRequest);

        /// <summary>
        /// Update certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Update the configured certificate issuer configuration. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <param name="certificateIssuerConfigRequest">Certificate issuer configuration request</param>
        /// <returns>ApiResponse of CertificateIssuerConfigResponse</returns>
        ApiResponse<CertificateIssuerConfigResponse> UpdateCertificateIssuerConfigByIDWithHttpInfo (string certificateIssuerConfigurationId, CertificateIssuerConfigRequest certificateIssuerConfigRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Configure the certificate issuer to be used when creating the device custom certificates. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ -d &#39;{   \&quot;reference\&quot;: \&quot;customer.dlms\&quot;,   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCertificateIssuerConfig">Certificate issuer configuration request</param>
        /// <returns>Task of CertificateIssuerConfigResponse</returns>
        System.Threading.Tasks.Task<CertificateIssuerConfigResponse> CreateCertificateIssuerConfigAsync (CreateCertificateIssuerConfig createCertificateIssuerConfig);

        /// <summary>
        /// Create certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Configure the certificate issuer to be used when creating the device custom certificates. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ -d &#39;{   \&quot;reference\&quot;: \&quot;customer.dlms\&quot;,   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCertificateIssuerConfig">Certificate issuer configuration request</param>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigResponse>> CreateCertificateIssuerConfigAsyncWithHttpInfo (CreateCertificateIssuerConfig createCertificateIssuerConfig);
        /// <summary>
        /// Delete certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Delete the configured certificate issuer configuration. You can only delete the configurations of custom certificates. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCertificateIssuerConfigByIDAsync (string certificateIssuerConfigurationId);

        /// <summary>
        /// Delete certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Delete the configured certificate issuer configuration. You can only delete the configurations of custom certificates. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCertificateIssuerConfigByIDAsyncWithHttpInfo (string certificateIssuerConfigurationId);
        /// <summary>
        /// Get certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Provides the configured certificate issuer to be used when creating device certificates for LwM2M communication.&lt;br&gt; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CertificateIssuerConfigResponse</returns>
        System.Threading.Tasks.Task<CertificateIssuerConfigResponse> GetCertificateIssuerConfigAsync ();

        /// <summary>
        /// Get certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Provides the configured certificate issuer to be used when creating device certificates for LwM2M communication.&lt;br&gt; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigResponse>> GetCertificateIssuerConfigAsyncWithHttpInfo ();
        /// <summary>
        /// Get certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Provides the configured certificate issuer. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>Task of CertificateIssuerConfigResponse</returns>
        System.Threading.Tasks.Task<CertificateIssuerConfigResponse> GetCertificateIssuerConfigByIDAsync (string certificateIssuerConfigurationId);

        /// <summary>
        /// Get certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Provides the configured certificate issuer. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigResponse>> GetCertificateIssuerConfigByIDAsyncWithHttpInfo (string certificateIssuerConfigurationId);
        /// <summary>
        /// Get certificate issuer configurations.
        /// </summary>
        /// <remarks>
        /// Get certificate issuer configurations, optionally filtered by reference. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ &#x60;&#x60;&#x60; &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq&#x3D;dlms \\ &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceEq">The certificate name to which the certificate issuer configuration applies. (optional)</param>
        /// <returns>Task of CertificateIssuerConfigListResponse</returns>
        System.Threading.Tasks.Task<CertificateIssuerConfigListResponse> GetCertificateIssuerConfigsAsync (string referenceEq = null);

        /// <summary>
        /// Get certificate issuer configurations.
        /// </summary>
        /// <remarks>
        /// Get certificate issuer configurations, optionally filtered by reference. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ &#x60;&#x60;&#x60; &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq&#x3D;dlms \\ &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceEq">The certificate name to which the certificate issuer configuration applies. (optional)</param>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigListResponse>> GetCertificateIssuerConfigsAsyncWithHttpInfo (string referenceEq = null);
        /// <summary>
        /// Update certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Configure the certificate issuer to be used when creating device certificates for LwM2M communication. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m \\ -d &#39;{   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigRequest">Certificate Issuer Configuration Request</param>
        /// <returns>Task of CertificateIssuerConfigResponse</returns>
        System.Threading.Tasks.Task<CertificateIssuerConfigResponse> UpdateCertificateIssuerConfigAsync (CertificateIssuerConfigRequest certificateIssuerConfigRequest);

        /// <summary>
        /// Update certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Configure the certificate issuer to be used when creating device certificates for LwM2M communication. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m \\ -d &#39;{   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigRequest">Certificate Issuer Configuration Request</param>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigResponse>> UpdateCertificateIssuerConfigAsyncWithHttpInfo (CertificateIssuerConfigRequest certificateIssuerConfigRequest);
        /// <summary>
        /// Update certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Update the configured certificate issuer configuration. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <param name="certificateIssuerConfigRequest">Certificate issuer configuration request</param>
        /// <returns>Task of CertificateIssuerConfigResponse</returns>
        System.Threading.Tasks.Task<CertificateIssuerConfigResponse> UpdateCertificateIssuerConfigByIDAsync (string certificateIssuerConfigurationId, CertificateIssuerConfigRequest certificateIssuerConfigRequest);

        /// <summary>
        /// Update certificate issuer configuration.
        /// </summary>
        /// <remarks>
        /// Update the configured certificate issuer configuration. 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <param name="certificateIssuerConfigRequest">Certificate issuer configuration request</param>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigResponse>> UpdateCertificateIssuerConfigByIDAsyncWithHttpInfo (string certificateIssuerConfigurationId, CertificateIssuerConfigRequest certificateIssuerConfigRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CertificateIssuersActivationApi : ICertificateIssuersActivationApi
    {
        private external_ca.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssuersActivationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CertificateIssuersActivationApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = external_ca.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssuersActivationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CertificateIssuersActivationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = external_ca.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public external_ca.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create certificate issuer configuration. Configure the certificate issuer to be used when creating the device custom certificates. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ -d &#39;{   \&quot;reference\&quot;: \&quot;customer.dlms\&quot;,   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCertificateIssuerConfig">Certificate issuer configuration request</param>
        /// <returns>CertificateIssuerConfigResponse</returns>
        public CertificateIssuerConfigResponse CreateCertificateIssuerConfig (CreateCertificateIssuerConfig createCertificateIssuerConfig)
        {
             ApiResponse<CertificateIssuerConfigResponse> localVarResponse = CreateCertificateIssuerConfigWithHttpInfo(createCertificateIssuerConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create certificate issuer configuration. Configure the certificate issuer to be used when creating the device custom certificates. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ -d &#39;{   \&quot;reference\&quot;: \&quot;customer.dlms\&quot;,   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCertificateIssuerConfig">Certificate issuer configuration request</param>
        /// <returns>ApiResponse of CertificateIssuerConfigResponse</returns>
        public ApiResponse< CertificateIssuerConfigResponse > CreateCertificateIssuerConfigWithHttpInfo (CreateCertificateIssuerConfig createCertificateIssuerConfig)
        {
            // verify the required parameter 'createCertificateIssuerConfig' is set
            if (createCertificateIssuerConfig == null)
                throw new ApiException(400, "Missing required parameter 'createCertificateIssuerConfig' when calling CertificateIssuersActivationApi->CreateCertificateIssuerConfig");

            var localVarPath = "/v3/certificate-issuer-configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCertificateIssuerConfig != null && createCertificateIssuerConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCertificateIssuerConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCertificateIssuerConfig; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCertificateIssuerConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigResponse)));
        }

        /// <summary>
        /// Create certificate issuer configuration. Configure the certificate issuer to be used when creating the device custom certificates. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ -d &#39;{   \&quot;reference\&quot;: \&quot;customer.dlms\&quot;,   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCertificateIssuerConfig">Certificate issuer configuration request</param>
        /// <returns>Task of CertificateIssuerConfigResponse</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerConfigResponse> CreateCertificateIssuerConfigAsync (CreateCertificateIssuerConfig createCertificateIssuerConfig)
        {
             ApiResponse<CertificateIssuerConfigResponse> localVarResponse = await CreateCertificateIssuerConfigAsyncWithHttpInfo(createCertificateIssuerConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create certificate issuer configuration. Configure the certificate issuer to be used when creating the device custom certificates. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ -d &#39;{   \&quot;reference\&quot;: \&quot;customer.dlms\&quot;,   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCertificateIssuerConfig">Certificate issuer configuration request</param>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigResponse>> CreateCertificateIssuerConfigAsyncWithHttpInfo (CreateCertificateIssuerConfig createCertificateIssuerConfig)
        {
            // verify the required parameter 'createCertificateIssuerConfig' is set
            if (createCertificateIssuerConfig == null)
                throw new ApiException(400, "Missing required parameter 'createCertificateIssuerConfig' when calling CertificateIssuersActivationApi->CreateCertificateIssuerConfig");

            var localVarPath = "/v3/certificate-issuer-configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCertificateIssuerConfig != null && createCertificateIssuerConfig.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCertificateIssuerConfig); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCertificateIssuerConfig; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCertificateIssuerConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigResponse)));
        }

        /// <summary>
        /// Delete certificate issuer configuration. Delete the configured certificate issuer configuration. You can only delete the configurations of custom certificates. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns></returns>
        public void DeleteCertificateIssuerConfigByID (string certificateIssuerConfigurationId)
        {
             DeleteCertificateIssuerConfigByIDWithHttpInfo(certificateIssuerConfigurationId);
        }

        /// <summary>
        /// Delete certificate issuer configuration. Delete the configured certificate issuer configuration. You can only delete the configurations of custom certificates. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCertificateIssuerConfigByIDWithHttpInfo (string certificateIssuerConfigurationId)
        {
            // verify the required parameter 'certificateIssuerConfigurationId' is set
            if (certificateIssuerConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerConfigurationId' when calling CertificateIssuersActivationApi->DeleteCertificateIssuerConfigByID");

            var localVarPath = "/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerConfigurationId != null) localVarPathParams.Add("certificate-issuer-configuration-id", Configuration.ApiClient.ParameterToString(certificateIssuerConfigurationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificateIssuerConfigByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete certificate issuer configuration. Delete the configured certificate issuer configuration. You can only delete the configurations of custom certificates. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCertificateIssuerConfigByIDAsync (string certificateIssuerConfigurationId)
        {
             await DeleteCertificateIssuerConfigByIDAsyncWithHttpInfo(certificateIssuerConfigurationId);

        }

        /// <summary>
        /// Delete certificate issuer configuration. Delete the configured certificate issuer configuration. You can only delete the configurations of custom certificates. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCertificateIssuerConfigByIDAsyncWithHttpInfo (string certificateIssuerConfigurationId)
        {
            // verify the required parameter 'certificateIssuerConfigurationId' is set
            if (certificateIssuerConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerConfigurationId' when calling CertificateIssuersActivationApi->DeleteCertificateIssuerConfigByID");

            var localVarPath = "/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerConfigurationId != null) localVarPathParams.Add("certificate-issuer-configuration-id", Configuration.ApiClient.ParameterToString(certificateIssuerConfigurationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificateIssuerConfigByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get certificate issuer configuration. Provides the configured certificate issuer to be used when creating device certificates for LwM2M communication.&lt;br&gt; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CertificateIssuerConfigResponse</returns>
        public CertificateIssuerConfigResponse GetCertificateIssuerConfig ()
        {
             ApiResponse<CertificateIssuerConfigResponse> localVarResponse = GetCertificateIssuerConfigWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get certificate issuer configuration. Provides the configured certificate issuer to be used when creating device certificates for LwM2M communication.&lt;br&gt; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CertificateIssuerConfigResponse</returns>
        public ApiResponse< CertificateIssuerConfigResponse > GetCertificateIssuerConfigWithHttpInfo ()
        {

            var localVarPath = "/v3/certificate-issuer-configurations/lwm2m";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuerConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigResponse)));
        }

        /// <summary>
        /// Get certificate issuer configuration. Provides the configured certificate issuer to be used when creating device certificates for LwM2M communication.&lt;br&gt; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CertificateIssuerConfigResponse</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerConfigResponse> GetCertificateIssuerConfigAsync ()
        {
             ApiResponse<CertificateIssuerConfigResponse> localVarResponse = await GetCertificateIssuerConfigAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get certificate issuer configuration. Provides the configured certificate issuer to be used when creating device certificates for LwM2M communication.&lt;br&gt; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigResponse>> GetCertificateIssuerConfigAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/certificate-issuer-configurations/lwm2m";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuerConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigResponse)));
        }

        /// <summary>
        /// Get certificate issuer configuration. Provides the configured certificate issuer. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>CertificateIssuerConfigResponse</returns>
        public CertificateIssuerConfigResponse GetCertificateIssuerConfigByID (string certificateIssuerConfigurationId)
        {
             ApiResponse<CertificateIssuerConfigResponse> localVarResponse = GetCertificateIssuerConfigByIDWithHttpInfo(certificateIssuerConfigurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get certificate issuer configuration. Provides the configured certificate issuer. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>ApiResponse of CertificateIssuerConfigResponse</returns>
        public ApiResponse< CertificateIssuerConfigResponse > GetCertificateIssuerConfigByIDWithHttpInfo (string certificateIssuerConfigurationId)
        {
            // verify the required parameter 'certificateIssuerConfigurationId' is set
            if (certificateIssuerConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerConfigurationId' when calling CertificateIssuersActivationApi->GetCertificateIssuerConfigByID");

            var localVarPath = "/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerConfigurationId != null) localVarPathParams.Add("certificate-issuer-configuration-id", Configuration.ApiClient.ParameterToString(certificateIssuerConfigurationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuerConfigByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigResponse)));
        }

        /// <summary>
        /// Get certificate issuer configuration. Provides the configured certificate issuer. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>Task of CertificateIssuerConfigResponse</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerConfigResponse> GetCertificateIssuerConfigByIDAsync (string certificateIssuerConfigurationId)
        {
             ApiResponse<CertificateIssuerConfigResponse> localVarResponse = await GetCertificateIssuerConfigByIDAsyncWithHttpInfo(certificateIssuerConfigurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get certificate issuer configuration. Provides the configured certificate issuer. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigResponse>> GetCertificateIssuerConfigByIDAsyncWithHttpInfo (string certificateIssuerConfigurationId)
        {
            // verify the required parameter 'certificateIssuerConfigurationId' is set
            if (certificateIssuerConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerConfigurationId' when calling CertificateIssuersActivationApi->GetCertificateIssuerConfigByID");

            var localVarPath = "/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerConfigurationId != null) localVarPathParams.Add("certificate-issuer-configuration-id", Configuration.ApiClient.ParameterToString(certificateIssuerConfigurationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuerConfigByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigResponse)));
        }

        /// <summary>
        /// Get certificate issuer configurations. Get certificate issuer configurations, optionally filtered by reference. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ &#x60;&#x60;&#x60; &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq&#x3D;dlms \\ &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceEq">The certificate name to which the certificate issuer configuration applies. (optional)</param>
        /// <returns>CertificateIssuerConfigListResponse</returns>
        public CertificateIssuerConfigListResponse GetCertificateIssuerConfigs (string referenceEq = null)
        {
             ApiResponse<CertificateIssuerConfigListResponse> localVarResponse = GetCertificateIssuerConfigsWithHttpInfo(referenceEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get certificate issuer configurations. Get certificate issuer configurations, optionally filtered by reference. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ &#x60;&#x60;&#x60; &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq&#x3D;dlms \\ &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceEq">The certificate name to which the certificate issuer configuration applies. (optional)</param>
        /// <returns>ApiResponse of CertificateIssuerConfigListResponse</returns>
        public ApiResponse< CertificateIssuerConfigListResponse > GetCertificateIssuerConfigsWithHttpInfo (string referenceEq = null)
        {

            var localVarPath = "/v3/certificate-issuer-configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "reference__eq", referenceEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuerConfigs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigListResponse)));
        }

        /// <summary>
        /// Get certificate issuer configurations. Get certificate issuer configurations, optionally filtered by reference. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ &#x60;&#x60;&#x60; &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq&#x3D;dlms \\ &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceEq">The certificate name to which the certificate issuer configuration applies. (optional)</param>
        /// <returns>Task of CertificateIssuerConfigListResponse</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerConfigListResponse> GetCertificateIssuerConfigsAsync (string referenceEq = null)
        {
             ApiResponse<CertificateIssuerConfigListResponse> localVarResponse = await GetCertificateIssuerConfigsAsyncWithHttpInfo(referenceEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get certificate issuer configurations. Get certificate issuer configurations, optionally filtered by reference. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations \\ &#x60;&#x60;&#x60; &#x60;&#x60;&#x60; curl \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations?reference__eq&#x3D;dlms \\ &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceEq">The certificate name to which the certificate issuer configuration applies. (optional)</param>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigListResponse>> GetCertificateIssuerConfigsAsyncWithHttpInfo (string referenceEq = null)
        {

            var localVarPath = "/v3/certificate-issuer-configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceEq != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "reference__eq", referenceEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuerConfigs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigListResponse)));
        }

        /// <summary>
        /// Update certificate issuer configuration. Configure the certificate issuer to be used when creating device certificates for LwM2M communication. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m \\ -d &#39;{   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigRequest">Certificate Issuer Configuration Request</param>
        /// <returns>CertificateIssuerConfigResponse</returns>
        public CertificateIssuerConfigResponse UpdateCertificateIssuerConfig (CertificateIssuerConfigRequest certificateIssuerConfigRequest)
        {
             ApiResponse<CertificateIssuerConfigResponse> localVarResponse = UpdateCertificateIssuerConfigWithHttpInfo(certificateIssuerConfigRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update certificate issuer configuration. Configure the certificate issuer to be used when creating device certificates for LwM2M communication. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m \\ -d &#39;{   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigRequest">Certificate Issuer Configuration Request</param>
        /// <returns>ApiResponse of CertificateIssuerConfigResponse</returns>
        public ApiResponse< CertificateIssuerConfigResponse > UpdateCertificateIssuerConfigWithHttpInfo (CertificateIssuerConfigRequest certificateIssuerConfigRequest)
        {
            // verify the required parameter 'certificateIssuerConfigRequest' is set
            if (certificateIssuerConfigRequest == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerConfigRequest' when calling CertificateIssuersActivationApi->UpdateCertificateIssuerConfig");

            var localVarPath = "/v3/certificate-issuer-configurations/lwm2m";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerConfigRequest != null && certificateIssuerConfigRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificateIssuerConfigRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificateIssuerConfigRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificateIssuerConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigResponse)));
        }

        /// <summary>
        /// Update certificate issuer configuration. Configure the certificate issuer to be used when creating device certificates for LwM2M communication. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m \\ -d &#39;{   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigRequest">Certificate Issuer Configuration Request</param>
        /// <returns>Task of CertificateIssuerConfigResponse</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerConfigResponse> UpdateCertificateIssuerConfigAsync (CertificateIssuerConfigRequest certificateIssuerConfigRequest)
        {
             ApiResponse<CertificateIssuerConfigResponse> localVarResponse = await UpdateCertificateIssuerConfigAsyncWithHttpInfo(certificateIssuerConfigRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update certificate issuer configuration. Configure the certificate issuer to be used when creating device certificates for LwM2M communication. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuer-configurations/lwm2m \\ -d &#39;{   \&quot;certificate_issuer_id\&quot;: \&quot;01621a36719d507b9d48a91b00000000\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigRequest">Certificate Issuer Configuration Request</param>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigResponse>> UpdateCertificateIssuerConfigAsyncWithHttpInfo (CertificateIssuerConfigRequest certificateIssuerConfigRequest)
        {
            // verify the required parameter 'certificateIssuerConfigRequest' is set
            if (certificateIssuerConfigRequest == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerConfigRequest' when calling CertificateIssuersActivationApi->UpdateCertificateIssuerConfig");

            var localVarPath = "/v3/certificate-issuer-configurations/lwm2m";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerConfigRequest != null && certificateIssuerConfigRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificateIssuerConfigRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificateIssuerConfigRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificateIssuerConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigResponse)));
        }

        /// <summary>
        /// Update certificate issuer configuration. Update the configured certificate issuer configuration. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <param name="certificateIssuerConfigRequest">Certificate issuer configuration request</param>
        /// <returns>CertificateIssuerConfigResponse</returns>
        public CertificateIssuerConfigResponse UpdateCertificateIssuerConfigByID (string certificateIssuerConfigurationId, CertificateIssuerConfigRequest certificateIssuerConfigRequest)
        {
             ApiResponse<CertificateIssuerConfigResponse> localVarResponse = UpdateCertificateIssuerConfigByIDWithHttpInfo(certificateIssuerConfigurationId, certificateIssuerConfigRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update certificate issuer configuration. Update the configured certificate issuer configuration. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <param name="certificateIssuerConfigRequest">Certificate issuer configuration request</param>
        /// <returns>ApiResponse of CertificateIssuerConfigResponse</returns>
        public ApiResponse< CertificateIssuerConfigResponse > UpdateCertificateIssuerConfigByIDWithHttpInfo (string certificateIssuerConfigurationId, CertificateIssuerConfigRequest certificateIssuerConfigRequest)
        {
            // verify the required parameter 'certificateIssuerConfigurationId' is set
            if (certificateIssuerConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerConfigurationId' when calling CertificateIssuersActivationApi->UpdateCertificateIssuerConfigByID");
            // verify the required parameter 'certificateIssuerConfigRequest' is set
            if (certificateIssuerConfigRequest == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerConfigRequest' when calling CertificateIssuersActivationApi->UpdateCertificateIssuerConfigByID");

            var localVarPath = "/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerConfigurationId != null) localVarPathParams.Add("certificate-issuer-configuration-id", Configuration.ApiClient.ParameterToString(certificateIssuerConfigurationId)); // path parameter
            if (certificateIssuerConfigRequest != null && certificateIssuerConfigRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificateIssuerConfigRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificateIssuerConfigRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificateIssuerConfigByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigResponse)));
        }

        /// <summary>
        /// Update certificate issuer configuration. Update the configured certificate issuer configuration. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <param name="certificateIssuerConfigRequest">Certificate issuer configuration request</param>
        /// <returns>Task of CertificateIssuerConfigResponse</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerConfigResponse> UpdateCertificateIssuerConfigByIDAsync (string certificateIssuerConfigurationId, CertificateIssuerConfigRequest certificateIssuerConfigRequest)
        {
             ApiResponse<CertificateIssuerConfigResponse> localVarResponse = await UpdateCertificateIssuerConfigByIDAsyncWithHttpInfo(certificateIssuerConfigurationId, certificateIssuerConfigRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update certificate issuer configuration. Update the configured certificate issuer configuration. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerConfigurationId">The ID of the certificate issuer configuration. </param>
        /// <param name="certificateIssuerConfigRequest">Certificate issuer configuration request</param>
        /// <returns>Task of ApiResponse (CertificateIssuerConfigResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerConfigResponse>> UpdateCertificateIssuerConfigByIDAsyncWithHttpInfo (string certificateIssuerConfigurationId, CertificateIssuerConfigRequest certificateIssuerConfigRequest)
        {
            // verify the required parameter 'certificateIssuerConfigurationId' is set
            if (certificateIssuerConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerConfigurationId' when calling CertificateIssuersActivationApi->UpdateCertificateIssuerConfigByID");
            // verify the required parameter 'certificateIssuerConfigRequest' is set
            if (certificateIssuerConfigRequest == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerConfigRequest' when calling CertificateIssuersActivationApi->UpdateCertificateIssuerConfigByID");

            var localVarPath = "/v3/certificate-issuer-configurations/{certificate-issuer-configuration-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerConfigurationId != null) localVarPathParams.Add("certificate-issuer-configuration-id", Configuration.ApiClient.ParameterToString(certificateIssuerConfigurationId)); // path parameter
            if (certificateIssuerConfigRequest != null && certificateIssuerConfigRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificateIssuerConfigRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificateIssuerConfigRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificateIssuerConfigByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerConfigResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerConfigResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerConfigResponse)));
        }

    }
}
