/* 
 * <auto-generated>
 * Third party CA management API
 *
 * API for managing third party CA for creating certificates on Pelion Device Management
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = external_ca.Client.SwaggerDateConverter;

namespace external_ca.Model
{
    /// <summary>
    /// CertificateIssuerRequest
    /// </summary>
    [DataContract]
    public partial class CertificateIssuerRequest :  IEquatable<CertificateIssuerRequest>, IValidatableObject
    {
        /// <summary>
        /// The type of the certificate issuer. - GLOBAL_SIGN:   Certificates are issued by GlobalSign service. The users must provide their own GlobalSign account credentials. - CFSSL_AUTH:   Certificates are issued by CFSSL authenticated signing service.   The users must provide their own CFSSL host_url and credentials. 
        /// </summary>
        /// <value>The type of the certificate issuer. - GLOBAL_SIGN:   Certificates are issued by GlobalSign service. The users must provide their own GlobalSign account credentials. - CFSSL_AUTH:   Certificates are issued by CFSSL authenticated signing service.   The users must provide their own CFSSL host_url and credentials. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IssuerTypeEnum
        {
            
            /// <summary>
            /// Enum GLOBALSIGN for "GLOBAL_SIGN"
            /// </summary>
            [EnumMember(Value = "GLOBAL_SIGN")]
            GLOBALSIGN,
            
            /// <summary>
            /// Enum CFSSLAUTH for "CFSSL_AUTH"
            /// </summary>
            [EnumMember(Value = "CFSSL_AUTH")]
            CFSSLAUTH
        }

        /// <summary>
        /// The type of the certificate issuer. - GLOBAL_SIGN:   Certificates are issued by GlobalSign service. The users must provide their own GlobalSign account credentials. - CFSSL_AUTH:   Certificates are issued by CFSSL authenticated signing service.   The users must provide their own CFSSL host_url and credentials. 
        /// </summary>
        /// <value>The type of the certificate issuer. - GLOBAL_SIGN:   Certificates are issued by GlobalSign service. The users must provide their own GlobalSign account credentials. - CFSSL_AUTH:   Certificates are issued by CFSSL authenticated signing service.   The users must provide their own CFSSL host_url and credentials. </value>
        [DataMember(Name="issuer_type", EmitDefaultValue=false)]
        public IssuerTypeEnum? IssuerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssuerRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CertificateIssuerRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssuerRequest" /> class.
        /// </summary>
        /// <param name="Description">General description for the certificate issuer..</param>
        /// <param name="IssuerAttributes">General attributes for connecting the certificate issuer. When the issuer_type is GLOBAL_SIGN, the value shall be empty. When the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes. .</param>
        /// <param name="IssuerCredentials">The credentials required for connecting to the certificate issuer. When the issuer_type is GLOBAL_SIGN, see definition of GlobalSignCredentials. When the issuer_type is CFSSL_AUTH, see definition of CfsslAuthCredentials. .</param>
        /// <param name="IssuerType">The type of the certificate issuer. - GLOBAL_SIGN:   Certificates are issued by GlobalSign service. The users must provide their own GlobalSign account credentials. - CFSSL_AUTH:   Certificates are issued by CFSSL authenticated signing service.   The users must provide their own CFSSL host_url and credentials.  (required).</param>
        /// <param name="Name">Certificate issuer name, unique per account. (required).</param>
        public CertificateIssuerRequest(string Description = default(string), Dictionary<string, string> IssuerAttributes = default(Dictionary<string, string>), Dictionary<string, string> IssuerCredentials = default(Dictionary<string, string>), IssuerTypeEnum? IssuerType = default(IssuerTypeEnum?), string Name = default(string))
        {
            // to ensure "IssuerType" is required (not null)
            if (IssuerType == null)
            {
                throw new InvalidDataException("IssuerType is a required property for CertificateIssuerRequest and cannot be null");
            }
            else
            {
                this.IssuerType = IssuerType;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CertificateIssuerRequest and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Description = Description;
            this.IssuerAttributes = IssuerAttributes;
            this.IssuerCredentials = IssuerCredentials;
        }
        
        /// <summary>
        /// General description for the certificate issuer.
        /// </summary>
        /// <value>General description for the certificate issuer.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// General attributes for connecting the certificate issuer. When the issuer_type is GLOBAL_SIGN, the value shall be empty. When the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes. 
        /// </summary>
        /// <value>General attributes for connecting the certificate issuer. When the issuer_type is GLOBAL_SIGN, the value shall be empty. When the issuer_type is CFSSL_AUTH, see definition of CfsslAttributes. </value>
        [DataMember(Name="issuer_attributes", EmitDefaultValue=false)]
        public Dictionary<string, string> IssuerAttributes { get; set; }

        /// <summary>
        /// The credentials required for connecting to the certificate issuer. When the issuer_type is GLOBAL_SIGN, see definition of GlobalSignCredentials. When the issuer_type is CFSSL_AUTH, see definition of CfsslAuthCredentials. 
        /// </summary>
        /// <value>The credentials required for connecting to the certificate issuer. When the issuer_type is GLOBAL_SIGN, see definition of GlobalSignCredentials. When the issuer_type is CFSSL_AUTH, see definition of CfsslAuthCredentials. </value>
        [DataMember(Name="issuer_credentials", EmitDefaultValue=false)]
        public Dictionary<string, string> IssuerCredentials { get; set; }


        /// <summary>
        /// Certificate issuer name, unique per account.
        /// </summary>
        /// <value>Certificate issuer name, unique per account.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateIssuerRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IssuerAttributes: ").Append(IssuerAttributes).Append("\n");
            sb.Append("  IssuerCredentials: ").Append(IssuerCredentials).Append("\n");
            sb.Append("  IssuerType: ").Append(IssuerType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateIssuerRequest);
        }

        /// <summary>
        /// Returns true if CertificateIssuerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateIssuerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateIssuerRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IssuerAttributes == input.IssuerAttributes ||
                    this.IssuerAttributes != null &&
                    this.IssuerAttributes.SequenceEqual(input.IssuerAttributes)
                ) && 
                (
                    this.IssuerCredentials == input.IssuerCredentials ||
                    this.IssuerCredentials != null &&
                    this.IssuerCredentials.SequenceEqual(input.IssuerCredentials)
                ) && 
                (
                    this.IssuerType == input.IssuerType ||
                    (this.IssuerType != null &&
                    this.IssuerType.Equals(input.IssuerType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IssuerAttributes != null)
                    hashCode = hashCode * 59 + this.IssuerAttributes.GetHashCode();
                if (this.IssuerCredentials != null)
                    hashCode = hashCode * 59 + this.IssuerCredentials.GetHashCode();
                if (this.IssuerType != null)
                    hashCode = hashCode * 59 + this.IssuerType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 100.", new [] { "Description" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 50.", new [] { "Name" });
            }

            yield break;
        }
    }

}
