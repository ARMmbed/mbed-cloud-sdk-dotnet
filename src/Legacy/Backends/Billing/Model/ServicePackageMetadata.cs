/* 
 * <auto-generated>
 * Billing API
 *
 * Billing API allows users to retrieve billing reports and service package details.
 *
 * OpenAPI spec version: 1.4.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = billing.Client.SwaggerDateConverter;

namespace billing.Model
{
    /// <summary>
    /// Account&#39;s service package metadata.
    /// </summary>
    [DataContract]
    public partial class ServicePackageMetadata :  IEquatable<ServicePackageMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePackageMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServicePackageMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePackageMetadata" /> class.
        /// </summary>
        /// <param name="EndTime">Service package end time in RFC3339 date-time with millisecond accuracy and UTC time zone. (required).</param>
        /// <param name="RemainingQuota">Current available service package quota. (required).</param>
        /// <param name="ReservedQuota">Sum of all open reservations for this account. (required).</param>
        /// <param name="StartTime">Service package start time in RFC3339 date-time with millisecond accuracy and UTC time zone. (required).</param>
        public ServicePackageMetadata(DateTime? EndTime = default(DateTime?), long? RemainingQuota = default(long?), long? ReservedQuota = default(long?), DateTime? StartTime = default(DateTime?))
        {
            // to ensure "EndTime" is required (not null)
            if (EndTime == null)
            {
                throw new InvalidDataException("EndTime is a required property for ServicePackageMetadata and cannot be null");
            }
            else
            {
                this.EndTime = EndTime;
            }
            // to ensure "RemainingQuota" is required (not null)
            if (RemainingQuota == null)
            {
                throw new InvalidDataException("RemainingQuota is a required property for ServicePackageMetadata and cannot be null");
            }
            else
            {
                this.RemainingQuota = RemainingQuota;
            }
            // to ensure "ReservedQuota" is required (not null)
            if (ReservedQuota == null)
            {
                throw new InvalidDataException("ReservedQuota is a required property for ServicePackageMetadata and cannot be null");
            }
            else
            {
                this.ReservedQuota = ReservedQuota;
            }
            // to ensure "StartTime" is required (not null)
            if (StartTime == null)
            {
                throw new InvalidDataException("StartTime is a required property for ServicePackageMetadata and cannot be null");
            }
            else
            {
                this.StartTime = StartTime;
            }
        }
        
        /// <summary>
        /// Service package end time in RFC3339 date-time with millisecond accuracy and UTC time zone.
        /// </summary>
        /// <value>Service package end time in RFC3339 date-time with millisecond accuracy and UTC time zone.</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Current available service package quota.
        /// </summary>
        /// <value>Current available service package quota.</value>
        [DataMember(Name="remaining_quota", EmitDefaultValue=false)]
        public long? RemainingQuota { get; set; }

        /// <summary>
        /// Sum of all open reservations for this account.
        /// </summary>
        /// <value>Sum of all open reservations for this account.</value>
        [DataMember(Name="reserved_quota", EmitDefaultValue=false)]
        public long? ReservedQuota { get; set; }

        /// <summary>
        /// Service package start time in RFC3339 date-time with millisecond accuracy and UTC time zone.
        /// </summary>
        /// <value>Service package start time in RFC3339 date-time with millisecond accuracy and UTC time zone.</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServicePackageMetadata {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  RemainingQuota: ").Append(RemainingQuota).Append("\n");
            sb.Append("  ReservedQuota: ").Append(ReservedQuota).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServicePackageMetadata);
        }

        /// <summary>
        /// Returns true if ServicePackageMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of ServicePackageMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServicePackageMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.RemainingQuota == input.RemainingQuota ||
                    (this.RemainingQuota != null &&
                    this.RemainingQuota.Equals(input.RemainingQuota))
                ) && 
                (
                    this.ReservedQuota == input.ReservedQuota ||
                    (this.ReservedQuota != null &&
                    this.ReservedQuota.Equals(input.ReservedQuota))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.RemainingQuota != null)
                    hashCode = hashCode * 59 + this.RemainingQuota.GetHashCode();
                if (this.ReservedQuota != null)
                    hashCode = hashCode * 59 + this.ReservedQuota.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RemainingQuota (long?) minimum
            if(this.RemainingQuota < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RemainingQuota, must be a value greater than or equal to 0.", new [] { "RemainingQuota" });
            }

            // ReservedQuota (long?) minimum
            if(this.ReservedQuota < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReservedQuota, must be a value greater than or equal to 0.", new [] { "ReservedQuota" });
            }

            yield break;
        }
    }

}
