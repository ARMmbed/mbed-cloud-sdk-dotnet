/* 
 * <auto-generated>
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = iam.Client.SwaggerDateConverter;

namespace iam.Model
{
    /// <summary>
    /// This object represents arrays of user and API key IDs.
    /// </summary>
    [DataContract]
    public partial class SubjectList :  IEquatable<SubjectList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubjectList" /> class.
        /// </summary>
        /// <param name="Apikeys">An array of API key IDs..</param>
        /// <param name="Users">An array of user IDs..</param>
        public SubjectList(List<string> Apikeys = default(List<string>), List<string> Users = default(List<string>))
        {
            this.Apikeys = Apikeys;
            this.Users = Users;
        }
        
        /// <summary>
        /// An array of API key IDs.
        /// </summary>
        /// <value>An array of API key IDs.</value>
        [DataMember(Name="apikeys", EmitDefaultValue=false)]
        public List<string> Apikeys { get; set; }

        /// <summary>
        /// An array of user IDs.
        /// </summary>
        /// <value>An array of user IDs.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<string> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubjectList {\n");
            sb.Append("  Apikeys: ").Append(Apikeys).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubjectList);
        }

        /// <summary>
        /// Returns true if SubjectList instances are equal
        /// </summary>
        /// <param name="input">Instance of SubjectList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubjectList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Apikeys == input.Apikeys ||
                    this.Apikeys != null &&
                    this.Apikeys.SequenceEqual(input.Apikeys)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Apikeys != null)
                    hashCode = hashCode * 59 + this.Apikeys.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
