// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 2.0.0
//
// <copyright file="SubtenantUserRepository.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace Mbed.Cloud.Foundation
{
    using Mbed.Cloud.Common;
    using Mbed.Cloud.Foundation;
    using System.Threading.Tasks;
    using MbedCloudSDK.Exceptions;
    using System.Collections.Generic;
    using System;
    using Mbed.Cloud.RestClient;

    /// <summary>
    /// SubtenantUserRepository
    /// </summary>
    public class SubtenantUserRepository : Repository, ISubtenantUserRepository
    {
        public SubtenantUserRepository()
        {
        }

        public SubtenantUserRepository(Config config, Client client = null) : base(config, client)
        {
        }

        public async Task<SubtenantUser> Create(string accountId, SubtenantUser request, string action = null)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", accountId }, };
                var queryParams = new Dictionary<string, object> { { "action", action }, };
                var bodyParams = new SubtenantUser { Address = request.Address, Email = request.Email, FullName = request.FullName, Groups = request.Groups, IsGtcAccepted = request.IsGtcAccepted, IsMarketingAccepted = request.IsMarketingAccepted, LoginProfiles = request.LoginProfiles, Password = request.Password, PhoneNumber = request.PhoneNumber, Username = request.Username, };
                return await Client.CallApi<SubtenantUser>(path: "/v3/accounts/{account_id}/users", pathParams: pathParams, queryParams: queryParams, bodyParams: bodyParams, objectToUnpack: request, method: HttpMethods.POST);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task Delete(string accountId, string id)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", accountId }, { "user_id", id }, };
                await Client.CallApi<SubtenantUser>(path: "/v3/accounts/{account_id}/users/{user_id}", pathParams: pathParams, method: HttpMethods.DELETE);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<ISubtenantUserSubtenantPolicyGroupListOptions, SubtenantPolicyGroup> PolicyGroups(string accountId, string id, ISubtenantUserSubtenantPolicyGroupListOptions options = null)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", accountId }, { "user_id", id }, };
                if (options == null)
                {
                    options = new SubtenantUserSubtenantPolicyGroupListOptions();
                }

                Func<ISubtenantUserSubtenantPolicyGroupListOptions, Task<ResponsePage<SubtenantPolicyGroup>>> paginatedFunc = async (ISubtenantUserSubtenantPolicyGroupListOptions _options) => { var queryParams = new Dictionary<string, object> { { "after", _options.After }, { "include", _options.Include }, { "limit", _options.Limit }, { "order", _options.Order }, }; return await Client.CallApi<ResponsePage<SubtenantPolicyGroup>>(path: "/v3/accounts/{account_id}/users/{user_id}/groups", pathParams: pathParams, queryParams: queryParams, method: HttpMethods.GET); };
                return new PaginatedResponse<ISubtenantUserSubtenantPolicyGroupListOptions, SubtenantPolicyGroup>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<SubtenantUser> Read(string accountId, string id)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", accountId }, { "user_id", id }, };
                return await Client.CallApi<SubtenantUser>(path: "/v3/accounts/{account_id}/users/{user_id}", pathParams: pathParams, method: HttpMethods.GET);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<SubtenantUser> Update(string accountId, string id, SubtenantUser request)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", accountId }, { "user_id", id }, };
                var bodyParams = new SubtenantUser { Address = request.Address, FullName = request.FullName, Groups = request.Groups, IsGtcAccepted = request.IsGtcAccepted, IsMarketingAccepted = request.IsMarketingAccepted, IsTotpEnabled = request.IsTotpEnabled, LoginProfiles = request.LoginProfiles, PhoneNumber = request.PhoneNumber, Username = request.Username, };
                return await Client.CallApi<SubtenantUser>(path: "/v3/accounts/{account_id}/users/{user_id}", pathParams: pathParams, bodyParams: bodyParams, objectToUnpack: request, method: HttpMethods.PUT);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<SubtenantUser> ValidateEmail(string accountId, string id)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", accountId }, { "user_id", id }, };
                return await Client.CallApi<SubtenantUser>(path: "/v3/accounts/{account_id}/users/{user_id}/validate-email", pathParams: pathParams, method: HttpMethods.POST);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }
    }
}