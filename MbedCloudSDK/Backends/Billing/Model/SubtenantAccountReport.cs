/* 
 * <auto-generated>
 * billing REST API documentation
 *
 * This document contains the public REST API definitions of the mbed-billing service.
 *
 * OpenAPI spec version: 1.4.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = billing.Client.SwaggerDateConverter;

namespace billing.Model
{
    /// <summary>
    /// Billing report for subtenant account.
    /// </summary>
    [DataContract]
    public partial class SubtenantAccountReport :  IEquatable<SubtenantAccountReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtenantAccountReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubtenantAccountReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtenantAccountReport" /> class.
        /// </summary>
        /// <param name="Account">Subtenant account contact information. (required).</param>
        /// <param name="BillingData">Report billing data. (required).</param>
        /// <param name="ServicePackage">Report service package for subtenant account..</param>
        public SubtenantAccountReport(SubtenantReportAccountContactInfo Account = default(SubtenantReportAccountContactInfo), ReportBillingData BillingData = default(ReportBillingData), SubtenantServicePackageReport ServicePackage = default(SubtenantServicePackageReport))
        {
            // to ensure "Account" is required (not null)
            if (Account == null)
            {
                throw new InvalidDataException("Account is a required property for SubtenantAccountReport and cannot be null");
            }
            else
            {
                this.Account = Account;
            }
            // to ensure "BillingData" is required (not null)
            if (BillingData == null)
            {
                throw new InvalidDataException("BillingData is a required property for SubtenantAccountReport and cannot be null");
            }
            else
            {
                this.BillingData = BillingData;
            }
            this.ServicePackage = ServicePackage;
        }
        
        /// <summary>
        /// Subtenant account contact information.
        /// </summary>
        /// <value>Subtenant account contact information.</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public SubtenantReportAccountContactInfo Account { get; set; }

        /// <summary>
        /// Report billing data.
        /// </summary>
        /// <value>Report billing data.</value>
        [DataMember(Name="billing_data", EmitDefaultValue=false)]
        public ReportBillingData BillingData { get; set; }

        /// <summary>
        /// Report service package for subtenant account.
        /// </summary>
        /// <value>Report service package for subtenant account.</value>
        [DataMember(Name="service_package", EmitDefaultValue=false)]
        public SubtenantServicePackageReport ServicePackage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubtenantAccountReport {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  BillingData: ").Append(BillingData).Append("\n");
            sb.Append("  ServicePackage: ").Append(ServicePackage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubtenantAccountReport);
        }

        /// <summary>
        /// Returns true if SubtenantAccountReport instances are equal
        /// </summary>
        /// <param name="input">Instance of SubtenantAccountReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubtenantAccountReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.BillingData == input.BillingData ||
                    (this.BillingData != null &&
                    this.BillingData.Equals(input.BillingData))
                ) && 
                (
                    this.ServicePackage == input.ServicePackage ||
                    (this.ServicePackage != null &&
                    this.ServicePackage.Equals(input.ServicePackage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.BillingData != null)
                    hashCode = hashCode * 59 + this.BillingData.GetHashCode();
                if (this.ServicePackage != null)
                    hashCode = hashCode * 59 + this.ServicePackage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
