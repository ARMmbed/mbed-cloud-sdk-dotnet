// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 2.0.0
//
// <copyright file="PolicyGroupRepository.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace Mbed.Cloud.Foundation
{
    using Mbed.Cloud.Common;
    using Mbed.Cloud.Foundation;
    using System.Threading.Tasks;
    using MbedCloudSDK.Exceptions;
    using System.Collections.Generic;
    using System;
    using Mbed.Cloud.RestClient;

    /// <summary>
    /// PolicyGroupRepository
    /// </summary>
    public class PolicyGroupRepository : Repository, IPolicyGroupRepository
    {
        public PolicyGroupRepository()
        {
        }

        public PolicyGroupRepository(Config config, Client client = null) : base(config, client)
        {
        }

        public PaginatedResponse<IPolicyGroupApiKeyListOptions, ApiKey> ApiKeys(string id, IPolicyGroupApiKeyListOptions options = null)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "group_id", id }, };
                if (options == null)
                {
                    options = new PolicyGroupApiKeyListOptions();
                }

                Func<IPolicyGroupApiKeyListOptions, Task<ResponsePage<ApiKey>>> paginatedFunc = async (IPolicyGroupApiKeyListOptions _options) => { var queryParams = new Dictionary<string, object> { { "after", _options.After }, { "include", _options.Include }, { "limit", _options.Limit }, { "order", _options.Order }, }; return await Client.CallApi<ResponsePage<ApiKey>>(path: "/v3/policy-groups/{group_id}/api-keys", pathParams: pathParams, queryParams: queryParams, method: HttpMethods.GET); };
                return new PaginatedResponse<IPolicyGroupApiKeyListOptions, ApiKey>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<IPolicyGroupListOptions, PolicyGroup> List(IPolicyGroupListOptions options = null)
        {
            try
            {
                if (options == null)
                {
                    options = new PolicyGroupListOptions();
                }

                Func<IPolicyGroupListOptions, Task<ResponsePage<PolicyGroup>>> paginatedFunc = async (IPolicyGroupListOptions _options) => { var queryParams = new Dictionary<string, object> { { "after", _options.After }, { "include", _options.Include }, { "limit", _options.Limit }, { "order", _options.Order }, { "name__eq", _options.Filter.GetEncodedValue("name", "$eq") }, }; return await Client.CallApi<ResponsePage<PolicyGroup>>(path: "/v3/policy-groups", queryParams: queryParams, method: HttpMethods.GET); };
                return new PaginatedResponse<IPolicyGroupListOptions, PolicyGroup>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<PolicyGroup> Read(string id)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "group_id", id }, };
                return await Client.CallApi<PolicyGroup>(path: "/v3/policy-groups/{group_id}", pathParams: pathParams, method: HttpMethods.GET);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<IPolicyGroupUserListOptions, User> Users(string id, IPolicyGroupUserListOptions options = null)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "group_id", id }, };
                if (options == null)
                {
                    options = new PolicyGroupUserListOptions();
                }

                Func<IPolicyGroupUserListOptions, Task<ResponsePage<User>>> paginatedFunc = async (IPolicyGroupUserListOptions _options) => { var queryParams = new Dictionary<string, object> { { "after", _options.After }, { "include", _options.Include }, { "limit", _options.Limit }, { "order", _options.Order }, { "status__eq", _options.Filter.GetEncodedValue("status", "$eq") }, { "status__in", _options.Filter.GetEncodedValue("status", "$in") }, { "status__nin", _options.Filter.GetEncodedValue("status", "$nin") }, }; return await Client.CallApi<ResponsePage<User>>(path: "/v3/policy-groups/{group_id}/users", pathParams: pathParams, queryParams: queryParams, method: HttpMethods.GET); };
                return new PaginatedResponse<IPolicyGroupUserListOptions, User>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }
    }
}