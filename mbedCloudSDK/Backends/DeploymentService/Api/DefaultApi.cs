/* 
 * Deployment Service API
 *
 * This is the API Documentation for the mbed deployment service which is part of the update service.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using deployment_service.Client;
using deployment_service.Model;

namespace deployment_service.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object DeployInfoGET ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeployInfoGETWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>UpdateCampaignSerializer</returns>
        UpdateCampaignSerializer UpdateCampaignCreate (WriteUpdateCampaignSerializer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>ApiResponse of UpdateCampaignSerializer</returns>
        ApiResponse<UpdateCampaignSerializer> UpdateCampaignCreateWithHttpInfo (WriteUpdateCampaignSerializer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>UpdateCampaignSerializer</returns>
        UpdateCampaignSerializer UpdateCampaignDestroy (string campaignId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>ApiResponse of UpdateCampaignSerializer</returns>
        ApiResponse<UpdateCampaignSerializer> UpdateCampaignDestroyWithHttpInfo (string campaignId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>UpdateCampaignPage</returns>
        UpdateCampaignPage UpdateCampaignList (int? limit = null, string order = null, string after = null, string filter = null, string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>ApiResponse of UpdateCampaignPage</returns>
        ApiResponse<UpdateCampaignPage> UpdateCampaignListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">DEPRECATED: The ID of the campaign (optional)</param>
        /// <param name="description">An optional description of the campaign (optional)</param>
        /// <param name="deviceFilter">The filter for the devices the campaign will target (optional)</param>
        /// <param name="finished">The timestamp when the update campaign finished (optional)</param>
        /// <param name="name">A name for this campaign (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="state">The state of the campaign (optional)</param>
        /// <param name="when">The timestamp at which update campaign scheduled to start (optional)</param>
        /// <returns>UpdateCampaignSerializer</returns>
        UpdateCampaignSerializer UpdateCampaignPartialUpdate (string campaignId = null, string description = null, string deviceFilter = null, DateTime? finished = null, string name = null, string _object = null, string rootManifestId = null, string state = null, DateTime? when = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">DEPRECATED: The ID of the campaign (optional)</param>
        /// <param name="description">An optional description of the campaign (optional)</param>
        /// <param name="deviceFilter">The filter for the devices the campaign will target (optional)</param>
        /// <param name="finished">The timestamp when the update campaign finished (optional)</param>
        /// <param name="name">A name for this campaign (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="state">The state of the campaign (optional)</param>
        /// <param name="when">The timestamp at which update campaign scheduled to start (optional)</param>
        /// <returns>ApiResponse of UpdateCampaignSerializer</returns>
        ApiResponse<UpdateCampaignSerializer> UpdateCampaignPartialUpdateWithHttpInfo (string campaignId = null, string description = null, string deviceFilter = null, DateTime? finished = null, string name = null, string _object = null, string rootManifestId = null, string state = null, DateTime? when = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>UpdateCampaignSerializer</returns>
        UpdateCampaignSerializer UpdateCampaignRetrieve (string campaignId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>ApiResponse of UpdateCampaignSerializer</returns>
        ApiResponse<UpdateCampaignSerializer> UpdateCampaignRetrieveWithHttpInfo (string campaignId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Show the status of an update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>UpdateCampaignStatusSerializer</returns>
        UpdateCampaignStatusSerializer UpdateCampaignStatus (string campaignId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Show the status of an update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>ApiResponse of UpdateCampaignStatusSerializer</returns>
        ApiResponse<UpdateCampaignStatusSerializer> UpdateCampaignStatusWithHttpInfo (string campaignId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Campaign ID to update</param>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>UpdateCampaignSerializer</returns>
        UpdateCampaignSerializer UpdateCampaignUpdate (string campaignId, WriteUpdateCampaignSerializer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Campaign ID to update</param>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>ApiResponse of UpdateCampaignSerializer</returns>
        ApiResponse<UpdateCampaignSerializer> UpdateCampaignUpdateWithHttpInfo (string campaignId, WriteUpdateCampaignSerializer body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeployInfoGETAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeployInfoGETAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>Task of UpdateCampaignSerializer</returns>
        System.Threading.Tasks.Task<UpdateCampaignSerializer> UpdateCampaignCreateAsync (WriteUpdateCampaignSerializer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>Task of ApiResponse (UpdateCampaignSerializer)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaignSerializer>> UpdateCampaignCreateAsyncWithHttpInfo (WriteUpdateCampaignSerializer body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of UpdateCampaignSerializer</returns>
        System.Threading.Tasks.Task<UpdateCampaignSerializer> UpdateCampaignDestroyAsync (string campaignId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaignSerializer)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaignSerializer>> UpdateCampaignDestroyAsyncWithHttpInfo (string campaignId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of UpdateCampaignPage</returns>
        System.Threading.Tasks.Task<UpdateCampaignPage> UpdateCampaignListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdateCampaignPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaignPage>> UpdateCampaignListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">DEPRECATED: The ID of the campaign (optional)</param>
        /// <param name="description">An optional description of the campaign (optional)</param>
        /// <param name="deviceFilter">The filter for the devices the campaign will target (optional)</param>
        /// <param name="finished">The timestamp when the update campaign finished (optional)</param>
        /// <param name="name">A name for this campaign (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="state">The state of the campaign (optional)</param>
        /// <param name="when">The timestamp at which update campaign scheduled to start (optional)</param>
        /// <returns>Task of UpdateCampaignSerializer</returns>
        System.Threading.Tasks.Task<UpdateCampaignSerializer> UpdateCampaignPartialUpdateAsync (string campaignId = null, string description = null, string deviceFilter = null, DateTime? finished = null, string name = null, string _object = null, string rootManifestId = null, string state = null, DateTime? when = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">DEPRECATED: The ID of the campaign (optional)</param>
        /// <param name="description">An optional description of the campaign (optional)</param>
        /// <param name="deviceFilter">The filter for the devices the campaign will target (optional)</param>
        /// <param name="finished">The timestamp when the update campaign finished (optional)</param>
        /// <param name="name">A name for this campaign (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="state">The state of the campaign (optional)</param>
        /// <param name="when">The timestamp at which update campaign scheduled to start (optional)</param>
        /// <returns>Task of ApiResponse (UpdateCampaignSerializer)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaignSerializer>> UpdateCampaignPartialUpdateAsyncWithHttpInfo (string campaignId = null, string description = null, string deviceFilter = null, DateTime? finished = null, string name = null, string _object = null, string rootManifestId = null, string state = null, DateTime? when = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>Task of UpdateCampaignSerializer</returns>
        System.Threading.Tasks.Task<UpdateCampaignSerializer> UpdateCampaignRetrieveAsync (string campaignId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaignSerializer)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaignSerializer>> UpdateCampaignRetrieveAsyncWithHttpInfo (string campaignId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Show the status of an update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of UpdateCampaignStatusSerializer</returns>
        System.Threading.Tasks.Task<UpdateCampaignStatusSerializer> UpdateCampaignStatusAsync (string campaignId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Show the status of an update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaignStatusSerializer)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaignStatusSerializer>> UpdateCampaignStatusAsyncWithHttpInfo (string campaignId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Campaign ID to update</param>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>Task of UpdateCampaignSerializer</returns>
        System.Threading.Tasks.Task<UpdateCampaignSerializer> UpdateCampaignUpdateAsync (string campaignId, WriteUpdateCampaignSerializer body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </remarks>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Campaign ID to update</param>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>Task of ApiResponse (UpdateCampaignSerializer)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCampaignSerializer>> UpdateCampaignUpdateAsyncWithHttpInfo (string campaignId, WriteUpdateCampaignSerializer body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private deployment_service.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = deployment_service.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = deployment_service.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public deployment_service.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object DeployInfoGET ()
        {
             ApiResponse<Object> localVarResponse = DeployInfoGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeployInfoGETWithHttpInfo ()
        {

            var localVarPath = "/v3/ds_deploy_info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeployInfoGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeployInfoGETAsync ()
        {
             ApiResponse<Object> localVarResponse = await DeployInfoGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;Reads the deploy_info.json file and returns the Build and Git ID to the caller.&lt;/p&gt; &lt;p&gt;Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeployInfoGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/ds_deploy_info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeployInfoGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>UpdateCampaignSerializer</returns>
        public UpdateCampaignSerializer UpdateCampaignCreate (WriteUpdateCampaignSerializer body)
        {
             ApiResponse<UpdateCampaignSerializer> localVarResponse = UpdateCampaignCreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>ApiResponse of UpdateCampaignSerializer</returns>
        public ApiResponse< UpdateCampaignSerializer > UpdateCampaignCreateWithHttpInfo (WriteUpdateCampaignSerializer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateCampaignCreate");

            var localVarPath = "/v3/update-campaigns/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>Task of UpdateCampaignSerializer</returns>
        public async System.Threading.Tasks.Task<UpdateCampaignSerializer> UpdateCampaignCreateAsync (WriteUpdateCampaignSerializer body)
        {
             ApiResponse<UpdateCampaignSerializer> localVarResponse = await UpdateCampaignCreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Create update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>Task of ApiResponse (UpdateCampaignSerializer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaignSerializer>> UpdateCampaignCreateAsyncWithHttpInfo (WriteUpdateCampaignSerializer body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateCampaignCreate");

            var localVarPath = "/v3/update-campaigns/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>UpdateCampaignSerializer</returns>
        public UpdateCampaignSerializer UpdateCampaignDestroy (string campaignId)
        {
             ApiResponse<UpdateCampaignSerializer> localVarResponse = UpdateCampaignDestroyWithHttpInfo(campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>ApiResponse of UpdateCampaignSerializer</returns>
        public ApiResponse< UpdateCampaignSerializer > UpdateCampaignDestroyWithHttpInfo (string campaignId)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignDestroy");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignDestroy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of UpdateCampaignSerializer</returns>
        public async System.Threading.Tasks.Task<UpdateCampaignSerializer> UpdateCampaignDestroyAsync (string campaignId)
        {
             ApiResponse<UpdateCampaignSerializer> localVarResponse = await UpdateCampaignDestroyAsyncWithHttpInfo(campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Delete update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaignSerializer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaignSerializer>> UpdateCampaignDestroyAsyncWithHttpInfo (string campaignId)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignDestroy");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignDestroy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>UpdateCampaignPage</returns>
        public UpdateCampaignPage UpdateCampaignList (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {
             ApiResponse<UpdateCampaignPage> localVarResponse = UpdateCampaignListWithHttpInfo(limit, order, after, filter, include);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>ApiResponse of UpdateCampaignPage</returns>
        public ApiResponse< UpdateCampaignPage > UpdateCampaignListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {

            var localVarPath = "/v3/update-campaigns/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignPage)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of UpdateCampaignPage</returns>
        public async System.Threading.Tasks.Task<UpdateCampaignPage> UpdateCampaignListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {
             ApiResponse<UpdateCampaignPage> localVarResponse = await UpdateCampaignListAsyncWithHttpInfo(limit, order, after, filter, include);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;List all update campaigns&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdateCampaignPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaignPage>> UpdateCampaignListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {

            var localVarPath = "/v3/update-campaigns/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignPage)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">DEPRECATED: The ID of the campaign (optional)</param>
        /// <param name="description">An optional description of the campaign (optional)</param>
        /// <param name="deviceFilter">The filter for the devices the campaign will target (optional)</param>
        /// <param name="finished">The timestamp when the update campaign finished (optional)</param>
        /// <param name="name">A name for this campaign (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="state">The state of the campaign (optional)</param>
        /// <param name="when">The timestamp at which update campaign scheduled to start (optional)</param>
        /// <returns>UpdateCampaignSerializer</returns>
        public UpdateCampaignSerializer UpdateCampaignPartialUpdate (string campaignId = null, string description = null, string deviceFilter = null, DateTime? finished = null, string name = null, string _object = null, string rootManifestId = null, string state = null, DateTime? when = null)
        {
             ApiResponse<UpdateCampaignSerializer> localVarResponse = UpdateCampaignPartialUpdateWithHttpInfo(campaignId, description, deviceFilter, finished, name, _object, rootManifestId, state, when);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">DEPRECATED: The ID of the campaign (optional)</param>
        /// <param name="description">An optional description of the campaign (optional)</param>
        /// <param name="deviceFilter">The filter for the devices the campaign will target (optional)</param>
        /// <param name="finished">The timestamp when the update campaign finished (optional)</param>
        /// <param name="name">A name for this campaign (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="state">The state of the campaign (optional)</param>
        /// <param name="when">The timestamp at which update campaign scheduled to start (optional)</param>
        /// <returns>ApiResponse of UpdateCampaignSerializer</returns>
        public ApiResponse< UpdateCampaignSerializer > UpdateCampaignPartialUpdateWithHttpInfo (string campaignId = null, string description = null, string deviceFilter = null, DateTime? finished = null, string name = null, string _object = null, string rootManifestId = null, string state = null, DateTime? when = null)
        {

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarFormParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (deviceFilter != null) localVarFormParams.Add("device_filter", Configuration.ApiClient.ParameterToString(deviceFilter)); // form parameter
            if (finished != null) localVarFormParams.Add("finished", Configuration.ApiClient.ParameterToString(finished)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (_object != null) localVarFormParams.Add("object", Configuration.ApiClient.ParameterToString(_object)); // form parameter
            if (rootManifestId != null) localVarFormParams.Add("root_manifest_id", Configuration.ApiClient.ParameterToString(rootManifestId)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (when != null) localVarFormParams.Add("when", Configuration.ApiClient.ParameterToString(when)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">DEPRECATED: The ID of the campaign (optional)</param>
        /// <param name="description">An optional description of the campaign (optional)</param>
        /// <param name="deviceFilter">The filter for the devices the campaign will target (optional)</param>
        /// <param name="finished">The timestamp when the update campaign finished (optional)</param>
        /// <param name="name">A name for this campaign (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="state">The state of the campaign (optional)</param>
        /// <param name="when">The timestamp at which update campaign scheduled to start (optional)</param>
        /// <returns>Task of UpdateCampaignSerializer</returns>
        public async System.Threading.Tasks.Task<UpdateCampaignSerializer> UpdateCampaignPartialUpdateAsync (string campaignId = null, string description = null, string deviceFilter = null, DateTime? finished = null, string name = null, string _object = null, string rootManifestId = null, string state = null, DateTime? when = null)
        {
             ApiResponse<UpdateCampaignSerializer> localVarResponse = await UpdateCampaignPartialUpdateAsyncWithHttpInfo(campaignId, description, deviceFilter, finished, name, _object, rootManifestId, state, when);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">DEPRECATED: The ID of the campaign (optional)</param>
        /// <param name="description">An optional description of the campaign (optional)</param>
        /// <param name="deviceFilter">The filter for the devices the campaign will target (optional)</param>
        /// <param name="finished">The timestamp when the update campaign finished (optional)</param>
        /// <param name="name">A name for this campaign (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="rootManifestId"> (optional)</param>
        /// <param name="state">The state of the campaign (optional)</param>
        /// <param name="when">The timestamp at which update campaign scheduled to start (optional)</param>
        /// <returns>Task of ApiResponse (UpdateCampaignSerializer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaignSerializer>> UpdateCampaignPartialUpdateAsyncWithHttpInfo (string campaignId = null, string description = null, string deviceFilter = null, DateTime? finished = null, string name = null, string _object = null, string rootManifestId = null, string state = null, DateTime? when = null)
        {

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarFormParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (deviceFilter != null) localVarFormParams.Add("device_filter", Configuration.ApiClient.ParameterToString(deviceFilter)); // form parameter
            if (finished != null) localVarFormParams.Add("finished", Configuration.ApiClient.ParameterToString(finished)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (_object != null) localVarFormParams.Add("object", Configuration.ApiClient.ParameterToString(_object)); // form parameter
            if (rootManifestId != null) localVarFormParams.Add("root_manifest_id", Configuration.ApiClient.ParameterToString(rootManifestId)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (when != null) localVarFormParams.Add("when", Configuration.ApiClient.ParameterToString(when)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>UpdateCampaignSerializer</returns>
        public UpdateCampaignSerializer UpdateCampaignRetrieve (string campaignId)
        {
             ApiResponse<UpdateCampaignSerializer> localVarResponse = UpdateCampaignRetrieveWithHttpInfo(campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>ApiResponse of UpdateCampaignSerializer</returns>
        public ApiResponse< UpdateCampaignSerializer > UpdateCampaignRetrieveWithHttpInfo (string campaignId)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignRetrieve");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>Task of UpdateCampaignSerializer</returns>
        public async System.Threading.Tasks.Task<UpdateCampaignSerializer> UpdateCampaignRetrieveAsync (string campaignId)
        {
             ApiResponse<UpdateCampaignSerializer> localVarResponse = await UpdateCampaignRetrieveAsyncWithHttpInfo(campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Retrieve campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaignSerializer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaignSerializer>> UpdateCampaignRetrieveAsyncWithHttpInfo (string campaignId)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignRetrieve");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Show the status of an update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>UpdateCampaignStatusSerializer</returns>
        public UpdateCampaignStatusSerializer UpdateCampaignStatus (string campaignId)
        {
             ApiResponse<UpdateCampaignStatusSerializer> localVarResponse = UpdateCampaignStatusWithHttpInfo(campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Show the status of an update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>ApiResponse of UpdateCampaignStatusSerializer</returns>
        public ApiResponse< UpdateCampaignStatusSerializer > UpdateCampaignStatusWithHttpInfo (string campaignId)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignStatus");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignStatusSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignStatusSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignStatusSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Show the status of an update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of UpdateCampaignStatusSerializer</returns>
        public async System.Threading.Tasks.Task<UpdateCampaignStatusSerializer> UpdateCampaignStatusAsync (string campaignId)
        {
             ApiResponse<UpdateCampaignStatusSerializer> localVarResponse = await UpdateCampaignStatusAsyncWithHttpInfo(campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Show the status of an update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of the update campaign</param>
        /// <returns>Task of ApiResponse (UpdateCampaignStatusSerializer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaignStatusSerializer>> UpdateCampaignStatusAsyncWithHttpInfo (string campaignId)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignStatus");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/status/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignStatusSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignStatusSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignStatusSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Campaign ID to update</param>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>UpdateCampaignSerializer</returns>
        public UpdateCampaignSerializer UpdateCampaignUpdate (string campaignId, WriteUpdateCampaignSerializer body)
        {
             ApiResponse<UpdateCampaignSerializer> localVarResponse = UpdateCampaignUpdateWithHttpInfo(campaignId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Campaign ID to update</param>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>ApiResponse of UpdateCampaignSerializer</returns>
        public ApiResponse< UpdateCampaignSerializer > UpdateCampaignUpdateWithHttpInfo (string campaignId, WriteUpdateCampaignSerializer body)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignUpdate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateCampaignUpdate");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Campaign ID to update</param>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>Task of UpdateCampaignSerializer</returns>
        public async System.Threading.Tasks.Task<UpdateCampaignSerializer> UpdateCampaignUpdateAsync (string campaignId, WriteUpdateCampaignSerializer body)
        {
             ApiResponse<UpdateCampaignSerializer> localVarResponse = await UpdateCampaignUpdateAsyncWithHttpInfo(campaignId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  &lt;/p&gt; &lt;p&gt;Update campaign&lt;/p&gt;
        /// </summary>
        /// <exception cref="deployment_service.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Campaign ID to update</param>
        /// <param name="body">Update campaign object to create</param>
        /// <returns>Task of ApiResponse (UpdateCampaignSerializer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCampaignSerializer>> UpdateCampaignUpdateAsyncWithHttpInfo (string campaignId, WriteUpdateCampaignSerializer body)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling DefaultApi->UpdateCampaignUpdate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateCampaignUpdate");

            var localVarPath = "/v3/update-campaigns/{campaign_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (campaignId != null) localVarPathParams.Add("campaign_id", Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaignUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCampaignSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCampaignSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCampaignSerializer)));
            
        }

    }
}
