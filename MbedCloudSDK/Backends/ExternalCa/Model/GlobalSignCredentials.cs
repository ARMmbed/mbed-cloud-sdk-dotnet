/* 
 * <auto-generated>
 * Third party CA management API
 *
 * API for managing third party CA for creating certificates on Pelion Device Management
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = external_ca.Client.SwaggerDateConverter;

namespace external_ca.Model
{
    /// <summary>
    /// Describes the credentials required to connect to the GlobalSign account. The values should be taken from GlobalSign support upon account creation. 
    /// </summary>
    [DataContract]
    public partial class GlobalSignCredentials :  IEquatable<GlobalSignCredentials>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalSignCredentials" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GlobalSignCredentials() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalSignCredentials" /> class.
        /// </summary>
        /// <param name="ApiKey">Unique ID for API client (provided by GlobalSign).  (required).</param>
        /// <param name="ApiSecret">API Secret matching the API key (provided by GlobalSign).  (required).</param>
        /// <param name="ClientCertificate">The client certificate provided by GlobalSign to allow HTTPS connection over TLS/SSL. The certificate wraps a public key that matches a private key provided by the customer. The certificate must be in PEM format.  (required).</param>
        /// <param name="Passphrase">The passphrase to decrypt the private key in case it is encrypted. Empty if the private key is not encrypted. .</param>
        /// <param name="PrivateKey">The private key that matches the client certificate to allow HTTPS connection over TLS/SSL. The private key may be encrypted using a symmetric encryption key derived from a passphrase. The private key must be in PEM format.  (required).</param>
        public GlobalSignCredentials(string ApiKey = default(string), string ApiSecret = default(string), string ClientCertificate = default(string), string Passphrase = default(string), string PrivateKey = default(string))
        {
            // to ensure "ApiKey" is required (not null)
            if (ApiKey == null)
            {
                throw new InvalidDataException("ApiKey is a required property for GlobalSignCredentials and cannot be null");
            }
            else
            {
                this.ApiKey = ApiKey;
            }
            // to ensure "ApiSecret" is required (not null)
            if (ApiSecret == null)
            {
                throw new InvalidDataException("ApiSecret is a required property for GlobalSignCredentials and cannot be null");
            }
            else
            {
                this.ApiSecret = ApiSecret;
            }
            // to ensure "ClientCertificate" is required (not null)
            if (ClientCertificate == null)
            {
                throw new InvalidDataException("ClientCertificate is a required property for GlobalSignCredentials and cannot be null");
            }
            else
            {
                this.ClientCertificate = ClientCertificate;
            }
            // to ensure "PrivateKey" is required (not null)
            if (PrivateKey == null)
            {
                throw new InvalidDataException("PrivateKey is a required property for GlobalSignCredentials and cannot be null");
            }
            else
            {
                this.PrivateKey = PrivateKey;
            }
            this.Passphrase = Passphrase;
        }
        
        /// <summary>
        /// Unique ID for API client (provided by GlobalSign). 
        /// </summary>
        /// <value>Unique ID for API client (provided by GlobalSign). </value>
        [DataMember(Name="api_key", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// API Secret matching the API key (provided by GlobalSign). 
        /// </summary>
        /// <value>API Secret matching the API key (provided by GlobalSign). </value>
        [DataMember(Name="api_secret", EmitDefaultValue=false)]
        public string ApiSecret { get; set; }

        /// <summary>
        /// The client certificate provided by GlobalSign to allow HTTPS connection over TLS/SSL. The certificate wraps a public key that matches a private key provided by the customer. The certificate must be in PEM format. 
        /// </summary>
        /// <value>The client certificate provided by GlobalSign to allow HTTPS connection over TLS/SSL. The certificate wraps a public key that matches a private key provided by the customer. The certificate must be in PEM format. </value>
        [DataMember(Name="client_certificate", EmitDefaultValue=false)]
        public string ClientCertificate { get; set; }

        /// <summary>
        /// The passphrase to decrypt the private key in case it is encrypted. Empty if the private key is not encrypted. 
        /// </summary>
        /// <value>The passphrase to decrypt the private key in case it is encrypted. Empty if the private key is not encrypted. </value>
        [DataMember(Name="passphrase", EmitDefaultValue=false)]
        public string Passphrase { get; set; }

        /// <summary>
        /// The private key that matches the client certificate to allow HTTPS connection over TLS/SSL. The private key may be encrypted using a symmetric encryption key derived from a passphrase. The private key must be in PEM format. 
        /// </summary>
        /// <value>The private key that matches the client certificate to allow HTTPS connection over TLS/SSL. The private key may be encrypted using a symmetric encryption key derived from a passphrase. The private key must be in PEM format. </value>
        [DataMember(Name="private_key", EmitDefaultValue=false)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GlobalSignCredentials {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ApiSecret: ").Append(ApiSecret).Append("\n");
            sb.Append("  ClientCertificate: ").Append(ClientCertificate).Append("\n");
            sb.Append("  Passphrase: ").Append(Passphrase).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlobalSignCredentials);
        }

        /// <summary>
        /// Returns true if GlobalSignCredentials instances are equal
        /// </summary>
        /// <param name="input">Instance of GlobalSignCredentials to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlobalSignCredentials input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.ApiSecret == input.ApiSecret ||
                    (this.ApiSecret != null &&
                    this.ApiSecret.Equals(input.ApiSecret))
                ) && 
                (
                    this.ClientCertificate == input.ClientCertificate ||
                    (this.ClientCertificate != null &&
                    this.ClientCertificate.Equals(input.ClientCertificate))
                ) && 
                (
                    this.Passphrase == input.Passphrase ||
                    (this.Passphrase != null &&
                    this.Passphrase.Equals(input.Passphrase))
                ) && 
                (
                    this.PrivateKey == input.PrivateKey ||
                    (this.PrivateKey != null &&
                    this.PrivateKey.Equals(input.PrivateKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.ApiSecret != null)
                    hashCode = hashCode * 59 + this.ApiSecret.GetHashCode();
                if (this.ClientCertificate != null)
                    hashCode = hashCode * 59 + this.ClientCertificate.GetHashCode();
                if (this.Passphrase != null)
                    hashCode = hashCode * 59 + this.Passphrase.GetHashCode();
                if (this.PrivateKey != null)
                    hashCode = hashCode * 59 + this.PrivateKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ApiKey (string) maxLength
            if(this.ApiKey != null && this.ApiKey.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApiKey, length must be less than 1000.", new [] { "ApiKey" });
            }

            // ApiSecret (string) maxLength
            if(this.ApiSecret != null && this.ApiSecret.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApiSecret, length must be less than 250.", new [] { "ApiSecret" });
            }

            // ClientCertificate (string) maxLength
            if(this.ClientCertificate != null && this.ClientCertificate.Length > 3000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientCertificate, length must be less than 3000.", new [] { "ClientCertificate" });
            }

            // Passphrase (string) maxLength
            if(this.Passphrase != null && this.Passphrase.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Passphrase, length must be less than 1000.", new [] { "Passphrase" });
            }

            // PrivateKey (string) maxLength
            if(this.PrivateKey != null && this.PrivateKey.Length > 3000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrivateKey, length must be less than 3000.", new [] { "PrivateKey" });
            }

            yield break;
        }
    }

}
