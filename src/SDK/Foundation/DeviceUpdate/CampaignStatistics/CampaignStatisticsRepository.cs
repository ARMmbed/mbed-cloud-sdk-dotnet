// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 2.0.0
//
// <copyright file="CampaignStatisticsRepository.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace Mbed.Cloud.Foundation
{
    using Mbed.Cloud.Common;
    using Mbed.Cloud.Foundation;
    using System.Threading.Tasks;
    using MbedCloudSDK.Exceptions;
    using System.Collections.Generic;
    using System;
    using Mbed.Cloud.RestClient;

    /// <summary>
    /// CampaignStatisticsRepository
    /// </summary>
    public class CampaignStatisticsRepository : Repository, ICampaignStatisticsRepository
    {
        public CampaignStatisticsRepository()
        {
        }

        public CampaignStatisticsRepository(Config config, Client client = null) : base(config, client)
        {
        }

        public PaginatedResponse<ICampaignStatisticsCampaignStatisticsEventsListOptions, CampaignStatisticsEvents> Events(string campaignId, string id, ICampaignStatisticsCampaignStatisticsEventsListOptions options = null)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "campaign_id", campaignId }, { "summary_status_id", id }, };
                if (options == null)
                {
                    options = new CampaignStatisticsCampaignStatisticsEventsListOptions();
                }

                Func<ICampaignStatisticsCampaignStatisticsEventsListOptions, Task<ResponsePage<CampaignStatisticsEvents>>> paginatedFunc = async (ICampaignStatisticsCampaignStatisticsEventsListOptions _options) => { return await Client.CallApi<ResponsePage<CampaignStatisticsEvents>>(path: "/v3/update-campaigns/{campaign_id}/statistics/{summary_status_id}/event_types/", pathParams: pathParams, method: HttpMethods.GET); };
                return new PaginatedResponse<ICampaignStatisticsCampaignStatisticsEventsListOptions, CampaignStatisticsEvents>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<ICampaignStatisticsCampaignStatisticsListOptions, CampaignStatistics> List(string campaignId, ICampaignStatisticsCampaignStatisticsListOptions options = null)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "campaign_id", campaignId }, };
                if (options == null)
                {
                    options = new CampaignStatisticsCampaignStatisticsListOptions();
                }

                Func<ICampaignStatisticsCampaignStatisticsListOptions, Task<ResponsePage<CampaignStatistics>>> paginatedFunc = async (ICampaignStatisticsCampaignStatisticsListOptions _options) => { return await Client.CallApi<ResponsePage<CampaignStatistics>>(path: "/v3/update-campaigns/{campaign_id}/statistics/", pathParams: pathParams, method: HttpMethods.GET); };
                return new PaginatedResponse<ICampaignStatisticsCampaignStatisticsListOptions, CampaignStatistics>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<CampaignStatistics> Read(string campaignId, string id)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "campaign_id", campaignId }, { "summary_status_id", id }, };
                return await Client.CallApi<CampaignStatistics>(path: "/v3/update-campaigns/{campaign_id}/statistics/{summary_status_id}", pathParams: pathParams, method: HttpMethods.GET);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }
    }
}