/* 
 * <auto-generated>
 * Connect API
 *
 * Pelion Device Management Connect API allows web applications to communicate with devices. You can subscribe to device resources and read/write values to them. Device Management Connect allows connectivity to devices by queueing requests and caching resource values.
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = mds.Client.SwaggerDateConverter;

namespace mds.Model
{
    /// <summary>
    /// WebsocketChannel
    /// </summary>
    [DataContract]
    public partial class WebsocketChannel :  IEquatable<WebsocketChannel>, IValidatableObject
    {
        /// <summary>
        /// Channel status will be &#39;connected&#39; when the channel has an active WebSocket bound to it. The state will be &#39;disconnected&#39; when either the channel or the WebSocket bound to it is closed. 
        /// </summary>
        /// <value>Channel status will be &#39;connected&#39; when the channel has an active WebSocket bound to it. The state will be &#39;disconnected&#39; when either the channel or the WebSocket bound to it is closed. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Connected for "connected"
            /// </summary>
            [EnumMember(Value = "connected")]
            Connected,
            
            /// <summary>
            /// Enum Disconnected for "disconnected"
            /// </summary>
            [EnumMember(Value = "disconnected")]
            Disconnected
        }

        /// <summary>
        /// Channel status will be &#39;connected&#39; when the channel has an active WebSocket bound to it. The state will be &#39;disconnected&#39; when either the channel or the WebSocket bound to it is closed. 
        /// </summary>
        /// <value>Channel status will be &#39;connected&#39; when the channel has an active WebSocket bound to it. The state will be &#39;disconnected&#39; when either the channel or the WebSocket bound to it is closed. </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebsocketChannel" /> class.
        /// </summary>
        /// <param name="ChannelId">Unique identifier of the channel.</param>
        /// <param name="QueueSize">Number of events in the channel&#39;s event queue waiting to be delivered..</param>
        /// <param name="Status">Channel status will be &#39;connected&#39; when the channel has an active WebSocket bound to it. The state will be &#39;disconnected&#39; when either the channel or the WebSocket bound to it is closed.  (default to StatusEnum.Disconnected).</param>
        public WebsocketChannel(string ChannelId = default(string), int? QueueSize = default(int?), StatusEnum? Status = StatusEnum.Disconnected)
        {
            this.ChannelId = ChannelId;
            this.QueueSize = QueueSize;
            // use default value if no "Status" provided
            if (Status == null)
            {
                this.Status = StatusEnum.Disconnected;
            }
            else
            {
                this.Status = Status;
            }
        }
        
        /// <summary>
        /// Unique identifier of the channel
        /// </summary>
        /// <value>Unique identifier of the channel</value>
        [DataMember(Name="channelId", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Number of events in the channel&#39;s event queue waiting to be delivered.
        /// </summary>
        /// <value>Number of events in the channel&#39;s event queue waiting to be delivered.</value>
        [DataMember(Name="queueSize", EmitDefaultValue=false)]
        public int? QueueSize { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebsocketChannel {\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  QueueSize: ").Append(QueueSize).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebsocketChannel);
        }

        /// <summary>
        /// Returns true if WebsocketChannel instances are equal
        /// </summary>
        /// <param name="input">Instance of WebsocketChannel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebsocketChannel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.QueueSize == input.QueueSize ||
                    (this.QueueSize != null &&
                    this.QueueSize.Equals(input.QueueSize))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.QueueSize != null)
                    hashCode = hashCode * 59 + this.QueueSize.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
