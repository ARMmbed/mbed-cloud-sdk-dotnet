/* 
 * <auto-generated>
 * Third party CA management API
 *
 * API for managing third party CA for creating certificates on Pelion Device Management
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = external_ca.Client.SwaggerDateConverter;

namespace external_ca.Model
{
    /// <summary>
    /// Describes the credentials required when using CFSSL authenticated signing. 
    /// </summary>
    [DataContract]
    public partial class CfsslAuthCredentials :  IEquatable<CfsslAuthCredentials>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CfsslAuthCredentials" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CfsslAuthCredentials() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CfsslAuthCredentials" /> class.
        /// </summary>
        /// <param name="HmacHexKey">The key that is used to compute the HMAC of the request using the HMAC-SHA-256 algorithm. Must contain an even number of hexadecimal characters.  (required).</param>
        public CfsslAuthCredentials(string HmacHexKey = default(string))
        {
            // to ensure "HmacHexKey" is required (not null)
            if (HmacHexKey == null)
            {
                throw new InvalidDataException("HmacHexKey is a required property for CfsslAuthCredentials and cannot be null");
            }
            else
            {
                this.HmacHexKey = HmacHexKey;
            }
        }
        
        /// <summary>
        /// The key that is used to compute the HMAC of the request using the HMAC-SHA-256 algorithm. Must contain an even number of hexadecimal characters. 
        /// </summary>
        /// <value>The key that is used to compute the HMAC of the request using the HMAC-SHA-256 algorithm. Must contain an even number of hexadecimal characters. </value>
        [DataMember(Name="hmac_hex_key", EmitDefaultValue=false)]
        public string HmacHexKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CfsslAuthCredentials {\n");
            sb.Append("  HmacHexKey: ").Append(HmacHexKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CfsslAuthCredentials);
        }

        /// <summary>
        /// Returns true if CfsslAuthCredentials instances are equal
        /// </summary>
        /// <param name="input">Instance of CfsslAuthCredentials to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CfsslAuthCredentials input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HmacHexKey == input.HmacHexKey ||
                    (this.HmacHexKey != null &&
                    this.HmacHexKey.Equals(input.HmacHexKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HmacHexKey != null)
                    hashCode = hashCode * 59 + this.HmacHexKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // HmacHexKey (string) maxLength
            if(this.HmacHexKey != null && this.HmacHexKey.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HmacHexKey, length must be less than 64.", new [] { "HmacHexKey" });
            }

            // HmacHexKey (string) pattern
            Regex regexHmacHexKey = new Regex(@"^([a-fA-F0-9][a-fA-F0-9]){1,32}$", RegexOptions.CultureInvariant);
            if (false == regexHmacHexKey.Match(this.HmacHexKey).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HmacHexKey, must match a pattern of " + regexHmacHexKey, new [] { "HmacHexKey" });
            }

            yield break;
        }
    }

}
