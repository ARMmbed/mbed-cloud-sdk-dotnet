/* 
 * <auto-generated>
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = iam.Client.SwaggerDateConverter;

namespace iam.Model
{
    /// <summary>
    /// This object represents an account in requests and responses.
    /// </summary>
    [DataContract]
    public partial class AccountInfo :  IEquatable<AccountInfo>, IValidatableObject
    {
        /// <summary>
        /// The enforcement status of the multi-factor authentication, either &#39;enforced&#39; or &#39;optional&#39;.
        /// </summary>
        /// <value>The enforcement status of the multi-factor authentication, either &#39;enforced&#39; or &#39;optional&#39;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MfaStatusEnum
        {
            
            /// <summary>
            /// Enum Enforced for "enforced"
            /// </summary>
            [EnumMember(Value = "enforced")]
            Enforced,
            
            /// <summary>
            /// Enum Optional for "optional"
            /// </summary>
            [EnumMember(Value = "optional")]
            Optional
        }

        /// <summary>
        /// Entity name: always &#39;account&#39;
        /// </summary>
        /// <value>Entity name: always &#39;account&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum Account for "account"
            /// </summary>
            [EnumMember(Value = "account")]
            Account
        }

        /// <summary>
        /// The status of the account.
        /// </summary>
        /// <value>The status of the account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ENROLLING for "ENROLLING"
            /// </summary>
            [EnumMember(Value = "ENROLLING")]
            ENROLLING,
            
            /// <summary>
            /// Enum ACTIVE for "ACTIVE"
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE,
            
            /// <summary>
            /// Enum RESTRICTED for "RESTRICTED"
            /// </summary>
            [EnumMember(Value = "RESTRICTED")]
            RESTRICTED,
            
            /// <summary>
            /// Enum SUSPENDED for "SUSPENDED"
            /// </summary>
            [EnumMember(Value = "SUSPENDED")]
            SUSPENDED
        }

        /// <summary>
        /// The enforcement status of the multi-factor authentication, either &#39;enforced&#39; or &#39;optional&#39;.
        /// </summary>
        /// <value>The enforcement status of the multi-factor authentication, either &#39;enforced&#39; or &#39;optional&#39;.</value>
        [DataMember(Name="mfa_status", EmitDefaultValue=false)]
        public MfaStatusEnum? MfaStatus { get; set; }
        /// <summary>
        /// Entity name: always &#39;account&#39;
        /// </summary>
        /// <value>Entity name: always &#39;account&#39;</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum? _Object { get; set; }
        /// <summary>
        /// The status of the account.
        /// </summary>
        /// <value>The status of the account.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInfo" /> class.
        /// </summary>
        /// <param name="AddressLine1">Postal address line 1..</param>
        /// <param name="AddressLine2">Postal address line 2..</param>
        /// <param name="Aliases">An array of aliases. (required).</param>
        /// <param name="City">The city part of the postal address..</param>
        /// <param name="Company">The name of the company..</param>
        /// <param name="Contact">The name of the contact person for this account..</param>
        /// <param name="ContractNumber">Contract number of the customer..</param>
        /// <param name="Country">The country part of the postal address..</param>
        /// <param name="CreatedAt">Creation UTC time RFC3339..</param>
        /// <param name="CustomFields">Account&#39;s custom properties as key-value pairs..</param>
        /// <param name="CustomerNumber">Customer number of the customer..</param>
        /// <param name="DisplayName">The display name for the account..</param>
        /// <param name="Email">The company email address for this account..</param>
        /// <param name="EndMarket">Account end market. (required).</param>
        /// <param name="Etag">API resource entity version. (required).</param>
        /// <param name="ExpirationWarningThreshold">Indicates how many days (1-180) before account expiration a notification email should be sent..</param>
        /// <param name="Id">Account ID. (required).</param>
        /// <param name="IdleTimeout">The reference token expiration time in minutes for this account..</param>
        /// <param name="Limits">List of limits as key-value pairs if requested..</param>
        /// <param name="MfaStatus">The enforcement status of the multi-factor authentication, either &#39;enforced&#39; or &#39;optional&#39;..</param>
        /// <param name="NotificationEmails">A list of notification email addresses..</param>
        /// <param name="_Object">Entity name: always &#39;account&#39; (required).</param>
        /// <param name="ParentId">The ID of the parent account, if it has any..</param>
        /// <param name="PasswordPolicy">The password policy for this account..</param>
        /// <param name="PhoneNumber">The phone number of a representative of the company..</param>
        /// <param name="Policies">List of policies if requested..</param>
        /// <param name="PostalCode">The postal code part of the postal address..</param>
        /// <param name="Reason">A reason note for updating the status of the account.</param>
        /// <param name="ReferenceNote">A reference note for updating the status of the account.</param>
        /// <param name="SalesContact">Email address of the sales contact..</param>
        /// <param name="State">The state part of the postal address..</param>
        /// <param name="Status">The status of the account. (required).</param>
        /// <param name="SubAccounts">List of sub accounts. Not available for developer users..</param>
        /// <param name="TemplateId">Account template ID..</param>
        /// <param name="Tier">The tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account, &#39;2&#39;: partner tier. Other values are reserved for the future. (required).</param>
        /// <param name="UpdatedAt">Last update UTC time RFC3339..</param>
        /// <param name="UpgradedAt">Time when upgraded to commercial account in UTC format RFC3339..</param>
        public AccountInfo(string AddressLine1 = default(string), string AddressLine2 = default(string), List<string> Aliases = default(List<string>), string City = default(string), string Company = default(string), string Contact = default(string), string ContractNumber = default(string), string Country = default(string), DateTime? CreatedAt = default(DateTime?), Dictionary<string, string> CustomFields = default(Dictionary<string, string>), string CustomerNumber = default(string), string DisplayName = default(string), string Email = default(string), string EndMarket = default(string), string Etag = default(string), string ExpirationWarningThreshold = default(string), string Id = default(string), string IdleTimeout = default(string), Dictionary<string, string> Limits = default(Dictionary<string, string>), MfaStatusEnum? MfaStatus = default(MfaStatusEnum?), List<string> NotificationEmails = default(List<string>), ObjectEnum? _Object = default(ObjectEnum?), string ParentId = default(string), PasswordPolicy PasswordPolicy = default(PasswordPolicy), string PhoneNumber = default(string), List<FeaturePolicy> Policies = default(List<FeaturePolicy>), string PostalCode = default(string), string Reason = default(string), string ReferenceNote = default(string), string SalesContact = default(string), string State = default(string), StatusEnum? Status = default(StatusEnum?), List<AccountInfo> SubAccounts = default(List<AccountInfo>), string TemplateId = default(string), string Tier = default(string), DateTime? UpdatedAt = default(DateTime?), DateTime? UpgradedAt = default(DateTime?))
        {
            // to ensure "Aliases" is required (not null)
            if (Aliases == null)
            {
                throw new InvalidDataException("Aliases is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Aliases = Aliases;
            }
            // to ensure "EndMarket" is required (not null)
            if (EndMarket == null)
            {
                throw new InvalidDataException("EndMarket is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.EndMarket = EndMarket;
            }
            // to ensure "Etag" is required (not null)
            if (Etag == null)
            {
                throw new InvalidDataException("Etag is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Etag = Etag;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "_Object" is required (not null)
            if (_Object == null)
            {
                throw new InvalidDataException("_Object is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this._Object = _Object;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "Tier" is required (not null)
            if (Tier == null)
            {
                throw new InvalidDataException("Tier is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Tier = Tier;
            }
            this.AddressLine1 = AddressLine1;
            this.AddressLine2 = AddressLine2;
            this.City = City;
            this.Company = Company;
            this.Contact = Contact;
            this.ContractNumber = ContractNumber;
            this.Country = Country;
            this.CreatedAt = CreatedAt;
            this.CustomFields = CustomFields;
            this.CustomerNumber = CustomerNumber;
            this.DisplayName = DisplayName;
            this.Email = Email;
            this.ExpirationWarningThreshold = ExpirationWarningThreshold;
            this.IdleTimeout = IdleTimeout;
            this.Limits = Limits;
            this.MfaStatus = MfaStatus;
            this.NotificationEmails = NotificationEmails;
            this.ParentId = ParentId;
            this.PasswordPolicy = PasswordPolicy;
            this.PhoneNumber = PhoneNumber;
            this.Policies = Policies;
            this.PostalCode = PostalCode;
            this.Reason = Reason;
            this.ReferenceNote = ReferenceNote;
            this.SalesContact = SalesContact;
            this.State = State;
            this.SubAccounts = SubAccounts;
            this.TemplateId = TemplateId;
            this.UpdatedAt = UpdatedAt;
            this.UpgradedAt = UpgradedAt;
        }
        
        /// <summary>
        /// Postal address line 1.
        /// </summary>
        /// <value>Postal address line 1.</value>
        [DataMember(Name="address_line1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Postal address line 2.
        /// </summary>
        /// <value>Postal address line 2.</value>
        [DataMember(Name="address_line2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// An array of aliases.
        /// </summary>
        /// <value>An array of aliases.</value>
        [DataMember(Name="aliases", EmitDefaultValue=false)]
        public List<string> Aliases { get; set; }

        /// <summary>
        /// The city part of the postal address.
        /// </summary>
        /// <value>The city part of the postal address.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// The name of the company.
        /// </summary>
        /// <value>The name of the company.</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// The name of the contact person for this account.
        /// </summary>
        /// <value>The name of the contact person for this account.</value>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public string Contact { get; set; }

        /// <summary>
        /// Contract number of the customer.
        /// </summary>
        /// <value>Contract number of the customer.</value>
        [DataMember(Name="contract_number", EmitDefaultValue=false)]
        public string ContractNumber { get; set; }

        /// <summary>
        /// The country part of the postal address.
        /// </summary>
        /// <value>The country part of the postal address.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Creation UTC time RFC3339.
        /// </summary>
        /// <value>Creation UTC time RFC3339.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Account&#39;s custom properties as key-value pairs.
        /// </summary>
        /// <value>Account&#39;s custom properties as key-value pairs.</value>
        [DataMember(Name="custom_fields", EmitDefaultValue=false)]
        public Dictionary<string, string> CustomFields { get; set; }

        /// <summary>
        /// Customer number of the customer.
        /// </summary>
        /// <value>Customer number of the customer.</value>
        [DataMember(Name="customer_number", EmitDefaultValue=false)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// The display name for the account.
        /// </summary>
        /// <value>The display name for the account.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The company email address for this account.
        /// </summary>
        /// <value>The company email address for this account.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Account end market.
        /// </summary>
        /// <value>Account end market.</value>
        [DataMember(Name="end_market", EmitDefaultValue=false)]
        public string EndMarket { get; set; }

        /// <summary>
        /// API resource entity version.
        /// </summary>
        /// <value>API resource entity version.</value>
        [DataMember(Name="etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Indicates how many days (1-180) before account expiration a notification email should be sent.
        /// </summary>
        /// <value>Indicates how many days (1-180) before account expiration a notification email should be sent.</value>
        [DataMember(Name="expiration_warning_threshold", EmitDefaultValue=false)]
        public string ExpirationWarningThreshold { get; set; }

        /// <summary>
        /// Account ID.
        /// </summary>
        /// <value>Account ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The reference token expiration time in minutes for this account.
        /// </summary>
        /// <value>The reference token expiration time in minutes for this account.</value>
        [DataMember(Name="idle_timeout", EmitDefaultValue=false)]
        public string IdleTimeout { get; set; }

        /// <summary>
        /// List of limits as key-value pairs if requested.
        /// </summary>
        /// <value>List of limits as key-value pairs if requested.</value>
        [DataMember(Name="limits", EmitDefaultValue=false)]
        public Dictionary<string, string> Limits { get; set; }


        /// <summary>
        /// A list of notification email addresses.
        /// </summary>
        /// <value>A list of notification email addresses.</value>
        [DataMember(Name="notification_emails", EmitDefaultValue=false)]
        public List<string> NotificationEmails { get; set; }


        /// <summary>
        /// The ID of the parent account, if it has any.
        /// </summary>
        /// <value>The ID of the parent account, if it has any.</value>
        [DataMember(Name="parent_id", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// The password policy for this account.
        /// </summary>
        /// <value>The password policy for this account.</value>
        [DataMember(Name="password_policy", EmitDefaultValue=false)]
        public PasswordPolicy PasswordPolicy { get; set; }

        /// <summary>
        /// The phone number of a representative of the company.
        /// </summary>
        /// <value>The phone number of a representative of the company.</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// List of policies if requested.
        /// </summary>
        /// <value>List of policies if requested.</value>
        [DataMember(Name="policies", EmitDefaultValue=false)]
        public List<FeaturePolicy> Policies { get; set; }

        /// <summary>
        /// The postal code part of the postal address.
        /// </summary>
        /// <value>The postal code part of the postal address.</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// A reason note for updating the status of the account
        /// </summary>
        /// <value>A reason note for updating the status of the account</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// A reference note for updating the status of the account
        /// </summary>
        /// <value>A reference note for updating the status of the account</value>
        [DataMember(Name="reference_note", EmitDefaultValue=false)]
        public string ReferenceNote { get; set; }

        /// <summary>
        /// Email address of the sales contact.
        /// </summary>
        /// <value>Email address of the sales contact.</value>
        [DataMember(Name="sales_contact", EmitDefaultValue=false)]
        public string SalesContact { get; set; }

        /// <summary>
        /// The state part of the postal address.
        /// </summary>
        /// <value>The state part of the postal address.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }


        /// <summary>
        /// List of sub accounts. Not available for developer users.
        /// </summary>
        /// <value>List of sub accounts. Not available for developer users.</value>
        [DataMember(Name="sub_accounts", EmitDefaultValue=false)]
        public List<AccountInfo> SubAccounts { get; set; }

        /// <summary>
        /// Account template ID.
        /// </summary>
        /// <value>Account template ID.</value>
        [DataMember(Name="template_id", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// The tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account, &#39;2&#39;: partner tier. Other values are reserved for the future.
        /// </summary>
        /// <value>The tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account, &#39;2&#39;: partner tier. Other values are reserved for the future.</value>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public string Tier { get; set; }

        /// <summary>
        /// Last update UTC time RFC3339.
        /// </summary>
        /// <value>Last update UTC time RFC3339.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Time when upgraded to commercial account in UTC format RFC3339.
        /// </summary>
        /// <value>Time when upgraded to commercial account in UTC format RFC3339.</value>
        [DataMember(Name="upgraded_at", EmitDefaultValue=false)]
        public DateTime? UpgradedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountInfo {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EndMarket: ").Append(EndMarket).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  ExpirationWarningThreshold: ").Append(ExpirationWarningThreshold).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdleTimeout: ").Append(IdleTimeout).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  MfaStatus: ").Append(MfaStatus).Append("\n");
            sb.Append("  NotificationEmails: ").Append(NotificationEmails).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  PasswordPolicy: ").Append(PasswordPolicy).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ReferenceNote: ").Append(ReferenceNote).Append("\n");
            sb.Append("  SalesContact: ").Append(SalesContact).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubAccounts: ").Append(SubAccounts).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UpgradedAt: ").Append(UpgradedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountInfo);
        }

        /// <summary>
        /// Returns true if AccountInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.Aliases == input.Aliases ||
                    this.Aliases != null &&
                    this.Aliases.SequenceEqual(input.Aliases)
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.ContractNumber == input.ContractNumber ||
                    (this.ContractNumber != null &&
                    this.ContractNumber.Equals(input.ContractNumber))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    (this.CustomerNumber != null &&
                    this.CustomerNumber.Equals(input.CustomerNumber))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EndMarket == input.EndMarket ||
                    (this.EndMarket != null &&
                    this.EndMarket.Equals(input.EndMarket))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.ExpirationWarningThreshold == input.ExpirationWarningThreshold ||
                    (this.ExpirationWarningThreshold != null &&
                    this.ExpirationWarningThreshold.Equals(input.ExpirationWarningThreshold))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdleTimeout == input.IdleTimeout ||
                    (this.IdleTimeout != null &&
                    this.IdleTimeout.Equals(input.IdleTimeout))
                ) && 
                (
                    this.Limits == input.Limits ||
                    this.Limits != null &&
                    this.Limits.SequenceEqual(input.Limits)
                ) && 
                (
                    this.MfaStatus == input.MfaStatus ||
                    (this.MfaStatus != null &&
                    this.MfaStatus.Equals(input.MfaStatus))
                ) && 
                (
                    this.NotificationEmails == input.NotificationEmails ||
                    this.NotificationEmails != null &&
                    this.NotificationEmails.SequenceEqual(input.NotificationEmails)
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.PasswordPolicy == input.PasswordPolicy ||
                    (this.PasswordPolicy != null &&
                    this.PasswordPolicy.Equals(input.PasswordPolicy))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Policies == input.Policies ||
                    this.Policies != null &&
                    this.Policies.SequenceEqual(input.Policies)
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ReferenceNote == input.ReferenceNote ||
                    (this.ReferenceNote != null &&
                    this.ReferenceNote.Equals(input.ReferenceNote))
                ) && 
                (
                    this.SalesContact == input.SalesContact ||
                    (this.SalesContact != null &&
                    this.SalesContact.Equals(input.SalesContact))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubAccounts == input.SubAccounts ||
                    this.SubAccounts != null &&
                    this.SubAccounts.SequenceEqual(input.SubAccounts)
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UpgradedAt == input.UpgradedAt ||
                    (this.UpgradedAt != null &&
                    this.UpgradedAt.Equals(input.UpgradedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.Aliases != null)
                    hashCode = hashCode * 59 + this.Aliases.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.ContractNumber != null)
                    hashCode = hashCode * 59 + this.ContractNumber.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.CustomerNumber != null)
                    hashCode = hashCode * 59 + this.CustomerNumber.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.EndMarket != null)
                    hashCode = hashCode * 59 + this.EndMarket.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.ExpirationWarningThreshold != null)
                    hashCode = hashCode * 59 + this.ExpirationWarningThreshold.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdleTimeout != null)
                    hashCode = hashCode * 59 + this.IdleTimeout.GetHashCode();
                if (this.Limits != null)
                    hashCode = hashCode * 59 + this.Limits.GetHashCode();
                if (this.MfaStatus != null)
                    hashCode = hashCode * 59 + this.MfaStatus.GetHashCode();
                if (this.NotificationEmails != null)
                    hashCode = hashCode * 59 + this.NotificationEmails.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.PasswordPolicy != null)
                    hashCode = hashCode * 59 + this.PasswordPolicy.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Policies != null)
                    hashCode = hashCode * 59 + this.Policies.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ReferenceNote != null)
                    hashCode = hashCode * 59 + this.ReferenceNote.GetHashCode();
                if (this.SalesContact != null)
                    hashCode = hashCode * 59 + this.SalesContact.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SubAccounts != null)
                    hashCode = hashCode * 59 + this.SubAccounts.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.UpgradedAt != null)
                    hashCode = hashCode * 59 + this.UpgradedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
