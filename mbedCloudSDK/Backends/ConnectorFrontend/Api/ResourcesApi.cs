/* 
 * Connect-Synchronizer REST API
 *
 * Connect-Synchronizer REST API simplyfies async requests for Service Portal, hiding the async behaviour and making those look like synchronous. 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using connector_frontend.Client;

namespace connector_frontend.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourcesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a resource
        /// </summary>
        /// <remarks>
        /// A request to delete a resource must be handled by both mbed Client and mbed Device Connector. The resource is not deleted from mbed Device Connector until the delete is handled by mbed Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url. </param>
        /// <param name="noResp">** Non-confirmable requests **  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns></returns>
        void V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDelete (string endpointName, string resourcePath, bool? noResp = null, string pri = null);

        /// <summary>
        /// Delete a resource
        /// </summary>
        /// <remarks>
        /// A request to delete a resource must be handled by both mbed Client and mbed Device Connector. The resource is not deleted from mbed Device Connector until the delete is handled by mbed Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url. </param>
        /// <param name="noResp">** Non-confirmable requests **  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDeleteWithHttpInfo (string endpointName, string resourcePath, bool? noResp = null, string pri = null);
        /// <summary>
        /// Read from a resource
        /// </summary>
        /// <remarks>
        /// Requests the resource value and when the response is available, a json object with the resource value will be returned.  Note that these APIs will only respond if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="cacheOnly">Decides if the response comes only from the cache or from the device. Default value is false. (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values [0 - 7 ] are interpreted as matching to the corresponding CS value. This is an optional field.  (optional)</param>
        /// <returns>string</returns>
        string V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGet (string endpointName, string resourcePath, bool? cacheOnly = null, string pri = null);

        /// <summary>
        /// Read from a resource
        /// </summary>
        /// <remarks>
        /// Requests the resource value and when the response is available, a json object with the resource value will be returned.  Note that these APIs will only respond if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="cacheOnly">Decides if the response comes only from the cache or from the device. Default value is false. (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values [0 - 7 ] are interpreted as matching to the corresponding CS value. This is an optional field.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGetWithHttpInfo (string endpointName, string resourcePath, bool? cacheOnly = null, string pri = null);
        /// <summary>
        /// Execute a function on a resource
        /// </summary>
        /// <remarks>
        /// With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceFunction">This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Client.  (optional)</param>
        /// <param name="noResp">**Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true,mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns></returns>
        void V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPost (string endpointName, string resourcePath, string resourceFunction = null, bool? noResp = null, string pri = null);

        /// <summary>
        /// Execute a function on a resource
        /// </summary>
        /// <remarks>
        /// With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceFunction">This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Client.  (optional)</param>
        /// <param name="noResp">**Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true,mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPostWithHttpInfo (string endpointName, string resourcePath, string resourceFunction = null, bool? noResp = null, string pri = null);
        /// <summary>
        /// Write to a resource
        /// </summary>
        /// <remarks>
        /// With this API, you can write new values to existing resources, or create new resources on the device. The resource-path does not have to exist - it can be created by the call.  Note that these APIs respond only if the device is turned on and connected to mbed Device Connector.  Also note that query parameters defined in OMA specification such as step/lt/ gt/pmax/ pmin can also be included with relvant values and will be passed to the device as they are defined. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceValue">Value to be set to the resource. (Check accceptable content-types)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns></returns>
        void V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPut (string endpointName, string resourcePath, string resourceValue, string pri = null);

        /// <summary>
        /// Write to a resource
        /// </summary>
        /// <remarks>
        /// With this API, you can write new values to existing resources, or create new resources on the device. The resource-path does not have to exist - it can be created by the call.  Note that these APIs respond only if the device is turned on and connected to mbed Device Connector.  Also note that query parameters defined in OMA specification such as step/lt/ gt/pmax/ pmin can also be included with relvant values and will be passed to the device as they are defined. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceValue">Value to be set to the resource. (Check accceptable content-types)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPutWithHttpInfo (string endpointName, string resourcePath, string resourceValue, string pri = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a resource
        /// </summary>
        /// <remarks>
        /// A request to delete a resource must be handled by both mbed Client and mbed Device Connector. The resource is not deleted from mbed Device Connector until the delete is handled by mbed Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url. </param>
        /// <param name="noResp">** Non-confirmable requests **  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDeleteAsync (string endpointName, string resourcePath, bool? noResp = null, string pri = null);

        /// <summary>
        /// Delete a resource
        /// </summary>
        /// <remarks>
        /// A request to delete a resource must be handled by both mbed Client and mbed Device Connector. The resource is not deleted from mbed Device Connector until the delete is handled by mbed Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url. </param>
        /// <param name="noResp">** Non-confirmable requests **  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDeleteAsyncWithHttpInfo (string endpointName, string resourcePath, bool? noResp = null, string pri = null);
        /// <summary>
        /// Read from a resource
        /// </summary>
        /// <remarks>
        /// Requests the resource value and when the response is available, a json object with the resource value will be returned.  Note that these APIs will only respond if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="cacheOnly">Decides if the response comes only from the cache or from the device. Default value is false. (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values [0 - 7 ] are interpreted as matching to the corresponding CS value. This is an optional field.  (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGetAsync (string endpointName, string resourcePath, bool? cacheOnly = null, string pri = null);

        /// <summary>
        /// Read from a resource
        /// </summary>
        /// <remarks>
        /// Requests the resource value and when the response is available, a json object with the resource value will be returned.  Note that these APIs will only respond if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="cacheOnly">Decides if the response comes only from the cache or from the device. Default value is false. (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values [0 - 7 ] are interpreted as matching to the corresponding CS value. This is an optional field.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGetAsyncWithHttpInfo (string endpointName, string resourcePath, bool? cacheOnly = null, string pri = null);
        /// <summary>
        /// Execute a function on a resource
        /// </summary>
        /// <remarks>
        /// With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceFunction">This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Client.  (optional)</param>
        /// <param name="noResp">**Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true,mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPostAsync (string endpointName, string resourcePath, string resourceFunction = null, bool? noResp = null, string pri = null);

        /// <summary>
        /// Execute a function on a resource
        /// </summary>
        /// <remarks>
        /// With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceFunction">This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Client.  (optional)</param>
        /// <param name="noResp">**Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true,mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPostAsyncWithHttpInfo (string endpointName, string resourcePath, string resourceFunction = null, bool? noResp = null, string pri = null);
        /// <summary>
        /// Write to a resource
        /// </summary>
        /// <remarks>
        /// With this API, you can write new values to existing resources, or create new resources on the device. The resource-path does not have to exist - it can be created by the call.  Note that these APIs respond only if the device is turned on and connected to mbed Device Connector.  Also note that query parameters defined in OMA specification such as step/lt/ gt/pmax/ pmin can also be included with relvant values and will be passed to the device as they are defined. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceValue">Value to be set to the resource. (Check accceptable content-types)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPutAsync (string endpointName, string resourcePath, string resourceValue, string pri = null);

        /// <summary>
        /// Write to a resource
        /// </summary>
        /// <remarks>
        /// With this API, you can write new values to existing resources, or create new resources on the device. The resource-path does not have to exist - it can be created by the call.  Note that these APIs respond only if the device is turned on and connected to mbed Device Connector.  Also note that query parameters defined in OMA specification such as step/lt/ gt/pmax/ pmin can also be included with relvant values and will be passed to the device as they are defined. 
        /// </remarks>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceValue">Value to be set to the resource. (Check accceptable content-types)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPutAsyncWithHttpInfo (string endpointName, string resourcePath, string resourceValue, string pri = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResourcesApi : IResourcesApi
    {
        private connector_frontend.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResourcesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = connector_frontend.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ResourcesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = connector_frontend.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public connector_frontend.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a resource A request to delete a resource must be handled by both mbed Client and mbed Device Connector. The resource is not deleted from mbed Device Connector until the delete is handled by mbed Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url. </param>
        /// <param name="noResp">** Non-confirmable requests **  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns></returns>
        public void V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDelete (string endpointName, string resourcePath, bool? noResp = null, string pri = null)
        {
             V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDeleteWithHttpInfo(endpointName, resourcePath, noResp, pri);
        }

        /// <summary>
        /// Delete a resource A request to delete a resource must be handled by both mbed Client and mbed Device Connector. The resource is not deleted from mbed Device Connector until the delete is handled by mbed Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url. </param>
        /// <param name="noResp">** Non-confirmable requests **  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDeleteWithHttpInfo (string endpointName, string resourcePath, bool? noResp = null, string pri = null)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDelete");
            // verify the required parameter 'resourcePath' is set
            if (resourcePath == null)
                throw new ApiException(400, "Missing required parameter 'resourcePath' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDelete");

            var localVarPath = "/v3/connect-synchronizer/proxy/endpoint/{endpointName}/{resourcePath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (endpointName != null) localVarPathParams.Add("endpointName", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter
            if (resourcePath != null) localVarPathParams.Add("resourcePath", Configuration.ApiClient.ParameterToString(resourcePath)); // path parameter
            if (noResp != null) localVarQueryParams.Add("noResp", Configuration.ApiClient.ParameterToString(noResp)); // query parameter
            if (pri != null) localVarQueryParams.Add("pri", Configuration.ApiClient.ParameterToString(pri)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a resource A request to delete a resource must be handled by both mbed Client and mbed Device Connector. The resource is not deleted from mbed Device Connector until the delete is handled by mbed Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url. </param>
        /// <param name="noResp">** Non-confirmable requests **  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDeleteAsync (string endpointName, string resourcePath, bool? noResp = null, string pri = null)
        {
             await V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDeleteAsyncWithHttpInfo(endpointName, resourcePath, noResp, pri);

        }

        /// <summary>
        /// Delete a resource A request to delete a resource must be handled by both mbed Client and mbed Device Connector. The resource is not deleted from mbed Device Connector until the delete is handled by mbed Client.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url. </param>
        /// <param name="noResp">** Non-confirmable requests **  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true, mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDeleteAsyncWithHttpInfo (string endpointName, string resourcePath, bool? noResp = null, string pri = null)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDelete");
            // verify the required parameter 'resourcePath' is set
            if (resourcePath == null)
                throw new ApiException(400, "Missing required parameter 'resourcePath' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDelete");

            var localVarPath = "/v3/connect-synchronizer/proxy/endpoint/{endpointName}/{resourcePath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (endpointName != null) localVarPathParams.Add("endpointName", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter
            if (resourcePath != null) localVarPathParams.Add("resourcePath", Configuration.ApiClient.ParameterToString(resourcePath)); // path parameter
            if (noResp != null) localVarQueryParams.Add("noResp", Configuration.ApiClient.ParameterToString(noResp)); // query parameter
            if (pri != null) localVarQueryParams.Add("pri", Configuration.ApiClient.ParameterToString(pri)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Read from a resource Requests the resource value and when the response is available, a json object with the resource value will be returned.  Note that these APIs will only respond if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="cacheOnly">Decides if the response comes only from the cache or from the device. Default value is false. (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values [0 - 7 ] are interpreted as matching to the corresponding CS value. This is an optional field.  (optional)</param>
        /// <returns>string</returns>
        public string V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGet (string endpointName, string resourcePath, bool? cacheOnly = null, string pri = null)
        {
             ApiResponse<string> localVarResponse = V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGetWithHttpInfo(endpointName, resourcePath, cacheOnly, pri);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read from a resource Requests the resource value and when the response is available, a json object with the resource value will be returned.  Note that these APIs will only respond if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="cacheOnly">Decides if the response comes only from the cache or from the device. Default value is false. (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values [0 - 7 ] are interpreted as matching to the corresponding CS value. This is an optional field.  (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGetWithHttpInfo (string endpointName, string resourcePath, bool? cacheOnly = null, string pri = null)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGet");
            // verify the required parameter 'resourcePath' is set
            if (resourcePath == null)
                throw new ApiException(400, "Missing required parameter 'resourcePath' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGet");

            var localVarPath = "/v3/connect-synchronizer/proxy/endpoint/{endpointName}/{resourcePath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (endpointName != null) localVarPathParams.Add("endpointName", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter
            if (resourcePath != null) localVarPathParams.Add("resourcePath", Configuration.ApiClient.ParameterToString(resourcePath)); // path parameter
            if (cacheOnly != null) localVarQueryParams.Add("cacheOnly", Configuration.ApiClient.ParameterToString(cacheOnly)); // query parameter
            if (pri != null) localVarQueryParams.Add("pri", Configuration.ApiClient.ParameterToString(pri)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Read from a resource Requests the resource value and when the response is available, a json object with the resource value will be returned.  Note that these APIs will only respond if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="cacheOnly">Decides if the response comes only from the cache or from the device. Default value is false. (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values [0 - 7 ] are interpreted as matching to the corresponding CS value. This is an optional field.  (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGetAsync (string endpointName, string resourcePath, bool? cacheOnly = null, string pri = null)
        {
             ApiResponse<string> localVarResponse = await V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGetAsyncWithHttpInfo(endpointName, resourcePath, cacheOnly, pri);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read from a resource Requests the resource value and when the response is available, a json object with the resource value will be returned.  Note that these APIs will only respond if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">Unique identifier for the endpoint. Note that the endpoint name needs to be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="cacheOnly">Decides if the response comes only from the cache or from the device. Default value is false. (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values [0 - 7 ] are interpreted as matching to the corresponding CS value. This is an optional field.  (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGetAsyncWithHttpInfo (string endpointName, string resourcePath, bool? cacheOnly = null, string pri = null)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGet");
            // verify the required parameter 'resourcePath' is set
            if (resourcePath == null)
                throw new ApiException(400, "Missing required parameter 'resourcePath' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGet");

            var localVarPath = "/v3/connect-synchronizer/proxy/endpoint/{endpointName}/{resourcePath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (endpointName != null) localVarPathParams.Add("endpointName", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter
            if (resourcePath != null) localVarPathParams.Add("resourcePath", Configuration.ApiClient.ParameterToString(resourcePath)); // path parameter
            if (cacheOnly != null) localVarQueryParams.Add("cacheOnly", Configuration.ApiClient.ParameterToString(cacheOnly)); // query parameter
            if (pri != null) localVarQueryParams.Add("pri", Configuration.ApiClient.ParameterToString(pri)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Execute a function on a resource With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceFunction">This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Client.  (optional)</param>
        /// <param name="noResp">**Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true,mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns></returns>
        public void V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPost (string endpointName, string resourcePath, string resourceFunction = null, bool? noResp = null, string pri = null)
        {
             V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPostWithHttpInfo(endpointName, resourcePath, resourceFunction, noResp, pri);
        }

        /// <summary>
        /// Execute a function on a resource With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceFunction">This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Client.  (optional)</param>
        /// <param name="noResp">**Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true,mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPostWithHttpInfo (string endpointName, string resourcePath, string resourceFunction = null, bool? noResp = null, string pri = null)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPost");
            // verify the required parameter 'resourcePath' is set
            if (resourcePath == null)
                throw new ApiException(400, "Missing required parameter 'resourcePath' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPost");

            var localVarPath = "/v3/connect-synchronizer/proxy/endpoint/{endpointName}/{resourcePath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain", 
                "application/xml", 
                "application/octet-stream", 
                "application/exi", 
                "application/json", 
                "application/link-format", 
                "application/senml+json", 
                "application/nanoservice-tlv", 
                "application/vnd.oma.lwm2m+text", 
                "application/vnd.oma.lwm2m+opaq", 
                "application/vnd.oma.lwm2m+tlv", 
                "application/vnd.oma.lwm2m+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (endpointName != null) localVarPathParams.Add("endpointName", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter
            if (resourcePath != null) localVarPathParams.Add("resourcePath", Configuration.ApiClient.ParameterToString(resourcePath)); // path parameter
            if (noResp != null) localVarQueryParams.Add("noResp", Configuration.ApiClient.ParameterToString(noResp)); // query parameter
            if (pri != null) localVarQueryParams.Add("pri", Configuration.ApiClient.ParameterToString(pri)); // query parameter
            if (resourceFunction != null && resourceFunction.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceFunction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceFunction; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Execute a function on a resource With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceFunction">This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Client.  (optional)</param>
        /// <param name="noResp">**Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true,mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPostAsync (string endpointName, string resourcePath, string resourceFunction = null, bool? noResp = null, string pri = null)
        {
             await V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPostAsyncWithHttpInfo(endpointName, resourcePath, resourceFunction, noResp, pri);

        }

        /// <summary>
        /// Execute a function on a resource With this API, you can execute a function on an existing resource.  All resource APIs are asynchronous. Note that these APIs respond only if the device is turned on and connected to mbed Device Connector. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint-name must be an exact match. You cannot use wildcards here. </param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceFunction">This value is not needed. Most of the time resources do not accept a function but they have their own functions predefined. You can use this to trigger them.  If a function is included, the body of this request is passed as a char* to the function in mbed Client.  (optional)</param>
        /// <param name="noResp">**Non-confirmable requests**  All resource APIs have the parameter noResp. If you make a request with noResp&#x3D;true,mbed Device Connector makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.  If calls with this parameter enabled succeed, they return with the status code 204 No Content. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code 409 Conflict.  (optional)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPostAsyncWithHttpInfo (string endpointName, string resourcePath, string resourceFunction = null, bool? noResp = null, string pri = null)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPost");
            // verify the required parameter 'resourcePath' is set
            if (resourcePath == null)
                throw new ApiException(400, "Missing required parameter 'resourcePath' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPost");

            var localVarPath = "/v3/connect-synchronizer/proxy/endpoint/{endpointName}/{resourcePath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain", 
                "application/xml", 
                "application/octet-stream", 
                "application/exi", 
                "application/json", 
                "application/link-format", 
                "application/senml+json", 
                "application/nanoservice-tlv", 
                "application/vnd.oma.lwm2m+text", 
                "application/vnd.oma.lwm2m+opaq", 
                "application/vnd.oma.lwm2m+tlv", 
                "application/vnd.oma.lwm2m+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (endpointName != null) localVarPathParams.Add("endpointName", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter
            if (resourcePath != null) localVarPathParams.Add("resourcePath", Configuration.ApiClient.ParameterToString(resourcePath)); // path parameter
            if (noResp != null) localVarQueryParams.Add("noResp", Configuration.ApiClient.ParameterToString(noResp)); // query parameter
            if (pri != null) localVarQueryParams.Add("pri", Configuration.ApiClient.ParameterToString(pri)); // query parameter
            if (resourceFunction != null && resourceFunction.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceFunction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceFunction; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Write to a resource With this API, you can write new values to existing resources, or create new resources on the device. The resource-path does not have to exist - it can be created by the call.  Note that these APIs respond only if the device is turned on and connected to mbed Device Connector.  Also note that query parameters defined in OMA specification such as step/lt/ gt/pmax/ pmin can also be included with relvant values and will be passed to the device as they are defined. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceValue">Value to be set to the resource. (Check accceptable content-types)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns></returns>
        public void V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPut (string endpointName, string resourcePath, string resourceValue, string pri = null)
        {
             V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPutWithHttpInfo(endpointName, resourcePath, resourceValue, pri);
        }

        /// <summary>
        /// Write to a resource With this API, you can write new values to existing resources, or create new resources on the device. The resource-path does not have to exist - it can be created by the call.  Note that these APIs respond only if the device is turned on and connected to mbed Device Connector.  Also note that query parameters defined in OMA specification such as step/lt/ gt/pmax/ pmin can also be included with relvant values and will be passed to the device as they are defined. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceValue">Value to be set to the resource. (Check accceptable content-types)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPutWithHttpInfo (string endpointName, string resourcePath, string resourceValue, string pri = null)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPut");
            // verify the required parameter 'resourcePath' is set
            if (resourcePath == null)
                throw new ApiException(400, "Missing required parameter 'resourcePath' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPut");
            // verify the required parameter 'resourceValue' is set
            if (resourceValue == null)
                throw new ApiException(400, "Missing required parameter 'resourceValue' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPut");

            var localVarPath = "/v3/connect-synchronizer/proxy/endpoint/{endpointName}/{resourcePath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain", 
                "application/xml", 
                "application/octet-stream", 
                "application/exi", 
                "application/json", 
                "application/link-format", 
                "application/senml+json", 
                "application/nanoservice-tlv", 
                "application/vnd.oma.lwm2m+text", 
                "application/vnd.oma.lwm2m+opaq", 
                "application/vnd.oma.lwm2m+tlv", 
                "application/vnd.oma.lwm2m+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (endpointName != null) localVarPathParams.Add("endpointName", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter
            if (resourcePath != null) localVarPathParams.Add("resourcePath", Configuration.ApiClient.ParameterToString(resourcePath)); // path parameter
            if (pri != null) localVarQueryParams.Add("pri", Configuration.ApiClient.ParameterToString(pri)); // query parameter
            if (resourceValue != null && resourceValue.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceValue); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceValue; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Write to a resource With this API, you can write new values to existing resources, or create new resources on the device. The resource-path does not have to exist - it can be created by the call.  Note that these APIs respond only if the device is turned on and connected to mbed Device Connector.  Also note that query parameters defined in OMA specification such as step/lt/ gt/pmax/ pmin can also be included with relvant values and will be passed to the device as they are defined. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceValue">Value to be set to the resource. (Check accceptable content-types)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPutAsync (string endpointName, string resourcePath, string resourceValue, string pri = null)
        {
             await V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPutAsyncWithHttpInfo(endpointName, resourcePath, resourceValue, pri);

        }

        /// <summary>
        /// Write to a resource With this API, you can write new values to existing resources, or create new resources on the device. The resource-path does not have to exist - it can be created by the call.  Note that these APIs respond only if the device is turned on and connected to mbed Device Connector.  Also note that query parameters defined in OMA specification such as step/lt/ gt/pmax/ pmin can also be included with relvant values and will be passed to the device as they are defined. 
        /// </summary>
        /// <exception cref="connector_frontend.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">A unique identifier for the endpoint. Note that the endpoint name must be an exact match. You cannot use wildcards here.</param>
        /// <param name="resourcePath">Resource&#39;s url.</param>
        /// <param name="resourceValue">Value to be set to the resource. (Check accceptable content-types)</param>
        /// <param name="pri">Priority message. Adds traffic-class for outgoing IPv6 message (only UDP). Network should this header and  Accepted values are AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, VA, EF, CS0, CS1, CS2,CS3, CS4, CS5, CS6, CS7 and DF. Numeric values 0-7 are interpreted as matching to the corresponding CS value. Optional. Default: 0  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPutAsyncWithHttpInfo (string endpointName, string resourcePath, string resourceValue, string pri = null)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPut");
            // verify the required parameter 'resourcePath' is set
            if (resourcePath == null)
                throw new ApiException(400, "Missing required parameter 'resourcePath' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPut");
            // verify the required parameter 'resourceValue' is set
            if (resourceValue == null)
                throw new ApiException(400, "Missing required parameter 'resourceValue' when calling ResourcesApi->V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPut");

            var localVarPath = "/v3/connect-synchronizer/proxy/endpoint/{endpointName}/{resourcePath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain", 
                "application/xml", 
                "application/octet-stream", 
                "application/exi", 
                "application/json", 
                "application/link-format", 
                "application/senml+json", 
                "application/nanoservice-tlv", 
                "application/vnd.oma.lwm2m+text", 
                "application/vnd.oma.lwm2m+opaq", 
                "application/vnd.oma.lwm2m+tlv", 
                "application/vnd.oma.lwm2m+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (endpointName != null) localVarPathParams.Add("endpointName", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter
            if (resourcePath != null) localVarPathParams.Add("resourcePath", Configuration.ApiClient.ParameterToString(resourcePath)); // path parameter
            if (pri != null) localVarQueryParams.Add("pri", Configuration.ApiClient.ParameterToString(pri)); // query parameter
            if (resourceValue != null && resourceValue.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(resourceValue); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resourceValue; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V3ConnectSynchronizerProxyEndpointEndpointNameResourcePathPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
