/* 
 * <auto-generated>
 * Enrollment API
 *
 * Mbed Cloud Connect Enrollment Service allows users to claim the ownership of a device which is not yet assigned to an account. A device without an assigned account can be a device purchased from the open market (OEM dealer) or a device trasferred from an account to another. More information in [Device overship: First-to-claim](https://cloud.mbed.com/docs/current/connecting/device-ownership.html) document. 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = enrollment.Client.SwaggerDateConverter;

namespace enrollment.Model
{
    /// <summary>
    /// EnrollmentId
    /// </summary>
    [DataContract]
    public partial class EnrollmentId :  IEquatable<EnrollmentId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrollmentId" /> class.
        /// </summary>
        /// <param name="EnrollmentIdentity">Enrollment identity..</param>
        public EnrollmentId(string EnrollmentIdentity = default(string))
        {
            this.EnrollmentIdentity = EnrollmentIdentity;
        }
        
        /// <summary>
        /// Enrollment identity.
        /// </summary>
        /// <value>Enrollment identity.</value>
        [DataMember(Name="enrollment_identity", EmitDefaultValue=false)]
        public string EnrollmentIdentity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnrollmentId {\n");
            sb.Append("  EnrollmentIdentity: ").Append(EnrollmentIdentity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnrollmentId);
        }

        /// <summary>
        /// Returns true if EnrollmentId instances are equal
        /// </summary>
        /// <param name="input">Instance of EnrollmentId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnrollmentId input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnrollmentIdentity == input.EnrollmentIdentity ||
                    (this.EnrollmentIdentity != null &&
                    this.EnrollmentIdentity.Equals(input.EnrollmentIdentity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnrollmentIdentity != null)
                    hashCode = hashCode * 59 + this.EnrollmentIdentity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EnrollmentIdentity (string) pattern
            Regex regexEnrollmentIdentity = new Regex(@"^A-[A-Za-z0-9:]{95}$", RegexOptions.CultureInvariant);
            if (false == regexEnrollmentIdentity.Match(this.EnrollmentIdentity).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnrollmentIdentity, must match a pattern of " + regexEnrollmentIdentity, new [] { "EnrollmentIdentity" });
            }

            yield break;
        }
    }

}
