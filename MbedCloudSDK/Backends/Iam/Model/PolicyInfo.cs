/* 
 * <auto-generated>
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = iam.Client.SwaggerDateConverter;

namespace iam.Model
{
    /// <summary>
    /// This object represents a policy in responses.
    /// </summary>
    [DataContract]
    public partial class PolicyInfo :  IEquatable<PolicyInfo>, IValidatableObject
    {
        /// <summary>
        /// The status of this policy.
        /// </summary>
        /// <value>The status of this policy.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for "ACTIVE"
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE,
            
            /// <summary>
            /// Enum INACTIVE for "INACTIVE"
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE
        }

        /// <summary>
        /// Entity name: always &#39;policy&#39;
        /// </summary>
        /// <value>Entity name: always &#39;policy&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum Policy for "policy"
            /// </summary>
            [EnumMember(Value = "policy")]
            Policy
        }

        /// <summary>
        /// The status of this policy.
        /// </summary>
        /// <value>The status of this policy.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Entity name: always &#39;policy&#39;
        /// </summary>
        /// <value>Entity name: always &#39;policy&#39;</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum? _Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PolicyInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyInfo" /> class.
        /// </summary>
        /// <param name="ValidUntil">Specifies the date and time until the policy is valid..</param>
        /// <param name="GrantExpiresIn">Specifies the value in seconds for how long an authorization result is valid..</param>
        /// <param name="UpdatedAt">Last update UTC time RFC3339. (required).</param>
        /// <param name="Actions">List of actions. (required).</param>
        /// <param name="Tag">Policy tag that can be used for various purposes to be able to distinguish between policies..</param>
        /// <param name="Apikeys">List of API key IDs this policy is attached to..</param>
        /// <param name="Id">Entity ID. (required).</param>
        /// <param name="Users">List of user IDs this policy is attached to..</param>
        /// <param name="ValidFrom">Specifies the date and time when the policy will become valid..</param>
        /// <param name="Etag">API resource entity version. (required).</param>
        /// <param name="AccountId">The UUID of the account. (required).</param>
        /// <param name="Conditions">List of conditions. (required).</param>
        /// <param name="Resources">List of resources. (required).</param>
        /// <param name="Status">The status of this policy. (required).</param>
        /// <param name="Description">The description of this policy..</param>
        /// <param name="_Object">Entity name: always &#39;policy&#39; (required).</param>
        /// <param name="Groups">List of group IDs this policy is attached to..</param>
        /// <param name="NotActions">List of not_actions. (required).</param>
        /// <param name="NotResources">List of not_resources. (required).</param>
        /// <param name="Name">The name of this policy. (required).</param>
        /// <param name="CreatedAt">Creation UTC time RFC3339..</param>
        /// <param name="ErrorMessage">Custom error message returned when this policy matches with not allowed result..</param>
        /// <param name="NotConditions">List of not_conditions. (required).</param>
        public PolicyInfo(DateTime? ValidUntil = default(DateTime?), int? GrantExpiresIn = default(int?), DateTime? UpdatedAt = default(DateTime?), Dictionary<string, bool?> Actions = default(Dictionary<string, bool?>), string Tag = default(string), List<string> Apikeys = default(List<string>), string Id = default(string), List<string> Users = default(List<string>), DateTime? ValidFrom = default(DateTime?), string Etag = default(string), string AccountId = default(string), List<string> Conditions = default(List<string>), List<string> Resources = default(List<string>), StatusEnum? Status = default(StatusEnum?), string Description = default(string), ObjectEnum? _Object = default(ObjectEnum?), List<string> Groups = default(List<string>), List<string> NotActions = default(List<string>), List<string> NotResources = default(List<string>), string Name = default(string), DateTime? CreatedAt = default(DateTime?), string ErrorMessage = default(string), List<string> NotConditions = default(List<string>))
        {
            // to ensure "UpdatedAt" is required (not null)
            if (UpdatedAt == null)
            {
                throw new InvalidDataException("UpdatedAt is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.UpdatedAt = UpdatedAt;
            }
            // to ensure "Actions" is required (not null)
            if (Actions == null)
            {
                throw new InvalidDataException("Actions is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.Actions = Actions;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Etag" is required (not null)
            if (Etag == null)
            {
                throw new InvalidDataException("Etag is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.Etag = Etag;
            }
            // to ensure "AccountId" is required (not null)
            if (AccountId == null)
            {
                throw new InvalidDataException("AccountId is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.AccountId = AccountId;
            }
            // to ensure "Conditions" is required (not null)
            if (Conditions == null)
            {
                throw new InvalidDataException("Conditions is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.Conditions = Conditions;
            }
            // to ensure "Resources" is required (not null)
            if (Resources == null)
            {
                throw new InvalidDataException("Resources is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.Resources = Resources;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "_Object" is required (not null)
            if (_Object == null)
            {
                throw new InvalidDataException("_Object is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this._Object = _Object;
            }
            // to ensure "NotActions" is required (not null)
            if (NotActions == null)
            {
                throw new InvalidDataException("NotActions is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.NotActions = NotActions;
            }
            // to ensure "NotResources" is required (not null)
            if (NotResources == null)
            {
                throw new InvalidDataException("NotResources is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.NotResources = NotResources;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "NotConditions" is required (not null)
            if (NotConditions == null)
            {
                throw new InvalidDataException("NotConditions is a required property for PolicyInfo and cannot be null");
            }
            else
            {
                this.NotConditions = NotConditions;
            }
            this.ValidUntil = ValidUntil;
            this.GrantExpiresIn = GrantExpiresIn;
            this.Tag = Tag;
            this.Apikeys = Apikeys;
            this.Users = Users;
            this.ValidFrom = ValidFrom;
            this.Description = Description;
            this.Groups = Groups;
            this.CreatedAt = CreatedAt;
            this.ErrorMessage = ErrorMessage;
        }
        
        /// <summary>
        /// Specifies the date and time until the policy is valid.
        /// </summary>
        /// <value>Specifies the date and time until the policy is valid.</value>
        [DataMember(Name="valid_until", EmitDefaultValue=false)]
        public DateTime? ValidUntil { get; set; }

        /// <summary>
        /// Specifies the value in seconds for how long an authorization result is valid.
        /// </summary>
        /// <value>Specifies the value in seconds for how long an authorization result is valid.</value>
        [DataMember(Name="grant_expires_in", EmitDefaultValue=false)]
        public int? GrantExpiresIn { get; set; }

        /// <summary>
        /// Last update UTC time RFC3339.
        /// </summary>
        /// <value>Last update UTC time RFC3339.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// List of actions.
        /// </summary>
        /// <value>List of actions.</value>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public Dictionary<string, bool?> Actions { get; set; }

        /// <summary>
        /// Policy tag that can be used for various purposes to be able to distinguish between policies.
        /// </summary>
        /// <value>Policy tag that can be used for various purposes to be able to distinguish between policies.</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// List of API key IDs this policy is attached to.
        /// </summary>
        /// <value>List of API key IDs this policy is attached to.</value>
        [DataMember(Name="apikeys", EmitDefaultValue=false)]
        public List<string> Apikeys { get; set; }

        /// <summary>
        /// Entity ID.
        /// </summary>
        /// <value>Entity ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// List of user IDs this policy is attached to.
        /// </summary>
        /// <value>List of user IDs this policy is attached to.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<string> Users { get; set; }

        /// <summary>
        /// Specifies the date and time when the policy will become valid.
        /// </summary>
        /// <value>Specifies the date and time when the policy will become valid.</value>
        [DataMember(Name="valid_from", EmitDefaultValue=false)]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// API resource entity version.
        /// </summary>
        /// <value>API resource entity version.</value>
        [DataMember(Name="etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// The UUID of the account.
        /// </summary>
        /// <value>The UUID of the account.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// List of conditions.
        /// </summary>
        /// <value>List of conditions.</value>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public List<string> Conditions { get; set; }

        /// <summary>
        /// List of resources.
        /// </summary>
        /// <value>List of resources.</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<string> Resources { get; set; }


        /// <summary>
        /// The description of this policy.
        /// </summary>
        /// <value>The description of this policy.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// List of group IDs this policy is attached to.
        /// </summary>
        /// <value>List of group IDs this policy is attached to.</value>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// List of not_actions.
        /// </summary>
        /// <value>List of not_actions.</value>
        [DataMember(Name="notActions", EmitDefaultValue=false)]
        public List<string> NotActions { get; set; }

        /// <summary>
        /// List of not_resources.
        /// </summary>
        /// <value>List of not_resources.</value>
        [DataMember(Name="notResources", EmitDefaultValue=false)]
        public List<string> NotResources { get; set; }

        /// <summary>
        /// The name of this policy.
        /// </summary>
        /// <value>The name of this policy.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Creation UTC time RFC3339.
        /// </summary>
        /// <value>Creation UTC time RFC3339.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Custom error message returned when this policy matches with not allowed result.
        /// </summary>
        /// <value>Custom error message returned when this policy matches with not allowed result.</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// List of not_conditions.
        /// </summary>
        /// <value>List of not_conditions.</value>
        [DataMember(Name="notConditions", EmitDefaultValue=false)]
        public List<string> NotConditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyInfo {\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  GrantExpiresIn: ").Append(GrantExpiresIn).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Apikeys: ").Append(Apikeys).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  NotActions: ").Append(NotActions).Append("\n");
            sb.Append("  NotResources: ").Append(NotResources).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  NotConditions: ").Append(NotConditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyInfo);
        }

        /// <summary>
        /// Returns true if PolicyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValidUntil == input.ValidUntil ||
                    (this.ValidUntil != null &&
                    this.ValidUntil.Equals(input.ValidUntil))
                ) && 
                (
                    this.GrantExpiresIn == input.GrantExpiresIn ||
                    (this.GrantExpiresIn != null &&
                    this.GrantExpiresIn.Equals(input.GrantExpiresIn))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Apikeys == input.Apikeys ||
                    this.Apikeys != null &&
                    this.Apikeys.SequenceEqual(input.Apikeys)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.NotActions == input.NotActions ||
                    this.NotActions != null &&
                    this.NotActions.SequenceEqual(input.NotActions)
                ) && 
                (
                    this.NotResources == input.NotResources ||
                    this.NotResources != null &&
                    this.NotResources.SequenceEqual(input.NotResources)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.NotConditions == input.NotConditions ||
                    this.NotConditions != null &&
                    this.NotConditions.SequenceEqual(input.NotConditions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValidUntil != null)
                    hashCode = hashCode * 59 + this.ValidUntil.GetHashCode();
                if (this.GrantExpiresIn != null)
                    hashCode = hashCode * 59 + this.GrantExpiresIn.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Apikeys != null)
                    hashCode = hashCode * 59 + this.Apikeys.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.ValidFrom != null)
                    hashCode = hashCode * 59 + this.ValidFrom.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.NotActions != null)
                    hashCode = hashCode * 59 + this.NotActions.GetHashCode();
                if (this.NotResources != null)
                    hashCode = hashCode * 59 + this.NotResources.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.NotConditions != null)
                    hashCode = hashCode * 59 + this.NotConditions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
