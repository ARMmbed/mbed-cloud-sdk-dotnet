/* 
 * IAM Identities REST API
 *
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using iam.Client;
using iam.Model;

namespace iam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeveloperApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add API keys to a group.
        /// </summary>
        /// <remarks>
        /// Ann endpoint for adding API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AddApiKeysToGroup (string groupID, SubjectList body);

        /// <summary>
        /// Add API keys to a group.
        /// </summary>
        /// <remarks>
        /// Ann endpoint for adding API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AddApiKeysToGroupWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Change the password of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for changing the password of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Old and new password.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse ChangeMyPassword (PasswordChangeReq body);

        /// <summary>
        /// Change the password of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for changing the password of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Old and new password.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> ChangeMyPasswordWithHttpInfo (PasswordChangeReq body);
        /// <summary>
        /// Read account attributes.
        /// </summary>
        /// <remarks>
        /// Reads all account attributes as map.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be read.</param>
        /// <param name="name">A comma separated list of attribute names. (optional)</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetAccountAttributes (string accountID, string name = null);

        /// <summary>
        /// Read account attributes.
        /// </summary>
        /// <remarks>
        /// Reads all account attributes as map.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be read.</param>
        /// <param name="name">A comma separated list of attribute names. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetAccountAttributesWithHttpInfo (string accountID, string name = null);
        /// <summary>
        /// Get aliases.
        /// </summary>
        /// <remarks>
        /// Retrieves the aliases of the account as an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account whose aliases are retrieved.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetAliases (string accountID);

        /// <summary>
        /// Get aliases.
        /// </summary>
        /// <remarks>
        /// Retrieves the aliases of the account as an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account whose aliases are retrieved.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetAliasesWithHttpInfo (string accountID);
        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>GroupSummaryList</returns>
        GroupSummaryList GetAllGroups (int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of GroupSummaryList</returns>
        ApiResponse<GroupSummaryList> GetAllGroupsWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get the API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        ApiKeyInfoRespList GetApiKeysOfGroup (string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get the API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        ApiResponse<ApiKeyInfoRespList> GetApiKeysOfGroupWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>GroupSummary</returns>
        GroupSummary GetGroupSummary (string groupID);

        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        ApiResponse<GroupSummary> GetGroupSummaryWithHttpInfo (string groupID);
        /// <summary>
        /// Details of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserInfoResp</returns>
        UserInfoResp GetMyUser ();

        /// <summary>
        /// Details of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> GetMyUserWithHttpInfo ();
        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse RemoveApiKeysFromGroup (string groupID, SubjectList body);

        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> RemoveApiKeysFromGroupWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating the details of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp UpdateMyUser (UserUpdateReq body);

        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating the details of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> UpdateMyUserWithHttpInfo (UserUpdateReq body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add API keys to a group.
        /// </summary>
        /// <remarks>
        /// Ann endpoint for adding API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AddApiKeysToGroupAsync (string groupID, SubjectList body);

        /// <summary>
        /// Add API keys to a group.
        /// </summary>
        /// <remarks>
        /// Ann endpoint for adding API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddApiKeysToGroupAsyncWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Change the password of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for changing the password of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Old and new password.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> ChangeMyPasswordAsync (PasswordChangeReq body);

        /// <summary>
        /// Change the password of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for changing the password of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Old and new password.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> ChangeMyPasswordAsyncWithHttpInfo (PasswordChangeReq body);
        /// <summary>
        /// Read account attributes.
        /// </summary>
        /// <remarks>
        /// Reads all account attributes as map.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be read.</param>
        /// <param name="name">A comma separated list of attribute names. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetAccountAttributesAsync (string accountID, string name = null);

        /// <summary>
        /// Read account attributes.
        /// </summary>
        /// <remarks>
        /// Reads all account attributes as map.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be read.</param>
        /// <param name="name">A comma separated list of attribute names. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetAccountAttributesAsyncWithHttpInfo (string accountID, string name = null);
        /// <summary>
        /// Get aliases.
        /// </summary>
        /// <remarks>
        /// Retrieves the aliases of the account as an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account whose aliases are retrieved.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetAliasesAsync (string accountID);

        /// <summary>
        /// Get aliases.
        /// </summary>
        /// <remarks>
        /// Retrieves the aliases of the account as an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account whose aliases are retrieved.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetAliasesAsyncWithHttpInfo (string accountID);
        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of GroupSummaryList</returns>
        System.Threading.Tasks.Task<GroupSummaryList> GetAllGroupsAsync (int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummaryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummaryList>> GetAllGroupsAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get the API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        System.Threading.Tasks.Task<ApiKeyInfoRespList> GetApiKeysOfGroupAsync (string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get the API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetApiKeysOfGroupAsyncWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of GroupSummary</returns>
        System.Threading.Tasks.Task<GroupSummary> GetGroupSummaryAsync (string groupID);

        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GetGroupSummaryAsyncWithHttpInfo (string groupID);
        /// <summary>
        /// Details of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> GetMyUserAsync ();

        /// <summary>
        /// Details of the current user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the details of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> GetMyUserAsyncWithHttpInfo ();
        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> RemoveApiKeysFromGroupAsync (string groupID, SubjectList body);

        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveApiKeysFromGroupAsyncWithHttpInfo (string groupID, SubjectList body);
        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating the details of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> UpdateMyUserAsync (UserUpdateReq body);

        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating the details of the logged in user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> UpdateMyUserAsyncWithHttpInfo (UserUpdateReq body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeveloperApi : IDeveloperApi
    {
        private iam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeveloperApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeveloperApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeveloperApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeveloperApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public iam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add API keys to a group. Ann endpoint for adding API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AddApiKeysToGroup (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AddApiKeysToGroupWithHttpInfo(groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add API keys to a group. Ann endpoint for adding API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AddApiKeysToGroupWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->AddApiKeysToGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->AddApiKeysToGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddApiKeysToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Add API keys to a group. Ann endpoint for adding API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AddApiKeysToGroupAsync (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AddApiKeysToGroupAsyncWithHttpInfo(groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add API keys to a group. Ann endpoint for adding API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddApiKeysToGroupAsyncWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->AddApiKeysToGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->AddApiKeysToGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddApiKeysToGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Change the password of the current user. An endpoint for changing the password of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Old and new password.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse ChangeMyPassword (PasswordChangeReq body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = ChangeMyPasswordWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change the password of the current user. An endpoint for changing the password of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Old and new password.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > ChangeMyPasswordWithHttpInfo (PasswordChangeReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->ChangeMyPassword");

            var localVarPath = "/v3/users/me/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeMyPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Change the password of the current user. An endpoint for changing the password of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Old and new password.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> ChangeMyPasswordAsync (PasswordChangeReq body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await ChangeMyPasswordAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change the password of the current user. An endpoint for changing the password of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Old and new password.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> ChangeMyPasswordAsyncWithHttpInfo (PasswordChangeReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->ChangeMyPassword");

            var localVarPath = "/v3/users/me/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeMyPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Read account attributes. Reads all account attributes as map.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be read.</param>
        /// <param name="name">A comma separated list of attribute names. (optional)</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetAccountAttributes (string accountID, string name = null)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = GetAccountAttributesWithHttpInfo(accountID, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read account attributes. Reads all account attributes as map.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be read.</param>
        /// <param name="name">A comma separated list of attribute names. (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse< Dictionary<string, string> > GetAccountAttributesWithHttpInfo (string accountID, string name = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling DeveloperApi->GetAccountAttributes");

            var localVarPath = "/v3/accounts/{accountID}/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
            
        }

        /// <summary>
        /// Read account attributes. Reads all account attributes as map.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be read.</param>
        /// <param name="name">A comma separated list of attribute names. (optional)</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetAccountAttributesAsync (string accountID, string name = null)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = await GetAccountAttributesAsyncWithHttpInfo(accountID, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read account attributes. Reads all account attributes as map.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be read.</param>
        /// <param name="name">A comma separated list of attribute names. (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetAccountAttributesAsyncWithHttpInfo (string accountID, string name = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling DeveloperApi->GetAccountAttributes");

            var localVarPath = "/v3/accounts/{accountID}/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
            
        }

        /// <summary>
        /// Get aliases. Retrieves the aliases of the account as an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account whose aliases are retrieved.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetAliases (string accountID)
        {
             ApiResponse<List<string>> localVarResponse = GetAliasesWithHttpInfo(accountID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get aliases. Retrieves the aliases of the account as an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account whose aliases are retrieved.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetAliasesWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling DeveloperApi->GetAliases");

            var localVarPath = "/v3/accounts/{accountID}/alias";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Get aliases. Retrieves the aliases of the account as an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account whose aliases are retrieved.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetAliasesAsync (string accountID)
        {
             ApiResponse<List<string>> localVarResponse = await GetAliasesAsyncWithHttpInfo(accountID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get aliases. Retrieves the aliases of the account as an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account whose aliases are retrieved.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetAliasesAsyncWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling DeveloperApi->GetAliases");

            var localVarPath = "/v3/accounts/{accountID}/alias";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>GroupSummaryList</returns>
        public GroupSummaryList GetAllGroups (int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<GroupSummaryList> localVarResponse = GetAllGroupsWithHttpInfo(limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of GroupSummaryList</returns>
        public ApiResponse< GroupSummaryList > GetAllGroupsWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null)
        {

            var localVarPath = "/v3/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummaryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummaryList)));
            
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of GroupSummaryList</returns>
        public async System.Threading.Tasks.Task<GroupSummaryList> GetAllGroupsAsync (int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<GroupSummaryList> localVarResponse = await GetAllGroupsAsyncWithHttpInfo(limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (GroupSummaryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummaryList>> GetAllGroupsAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null)
        {

            var localVarPath = "/v3/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummaryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummaryList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummaryList)));
            
        }

        /// <summary>
        /// Get the API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        public ApiKeyInfoRespList GetApiKeysOfGroup (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = GetApiKeysOfGroupWithHttpInfo(groupID, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        public ApiResponse< ApiKeyInfoRespList > GetApiKeysOfGroupWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->GetApiKeysOfGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiKeysOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get the API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoRespList> GetApiKeysOfGroupAsync (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = await GetApiKeysOfGroupAsyncWithHttpInfo(groupID, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetApiKeysOfGroupAsyncWithHttpInfo (string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->GetApiKeysOfGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiKeysOfGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>GroupSummary</returns>
        public GroupSummary GetGroupSummary (string groupID)
        {
             ApiResponse<GroupSummary> localVarResponse = GetGroupSummaryWithHttpInfo(groupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        public ApiResponse< GroupSummary > GetGroupSummaryWithHttpInfo (string groupID)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->GetGroupSummary");

            var localVarPath = "/v3/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
            
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of GroupSummary</returns>
        public async System.Threading.Tasks.Task<GroupSummary> GetGroupSummaryAsync (string groupID)
        {
             ApiResponse<GroupSummary> localVarResponse = await GetGroupSummaryAsyncWithHttpInfo(groupID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GetGroupSummaryAsyncWithHttpInfo (string groupID)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->GetGroupSummary");

            var localVarPath = "/v3/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGroupSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
            
        }

        /// <summary>
        /// Details of the current user. An endpoint for retrieving the details of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp GetMyUser ()
        {
             ApiResponse<UserInfoResp> localVarResponse = GetMyUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Details of the current user. An endpoint for retrieving the details of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > GetMyUserWithHttpInfo ()
        {

            var localVarPath = "/v3/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Details of the current user. An endpoint for retrieving the details of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> GetMyUserAsync ()
        {
             ApiResponse<UserInfoResp> localVarResponse = await GetMyUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Details of the current user. An endpoint for retrieving the details of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> GetMyUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMyUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse RemoveApiKeysFromGroup (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = RemoveApiKeysFromGroupWithHttpInfo(groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > RemoveApiKeysFromGroupWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->RemoveApiKeysFromGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->RemoveApiKeysFromGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveApiKeysFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> RemoveApiKeysFromGroupAsync (string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await RemoveApiKeysFromGroupAsyncWithHttpInfo(groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupID">The ID of the group whose API keys are removed.</param>
        /// <param name="body">A list of API keys to be removed from the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveApiKeysFromGroupAsyncWithHttpInfo (string groupID, SubjectList body)
        {
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling DeveloperApi->RemoveApiKeysFromGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->RemoveApiKeysFromGroup");

            var localVarPath = "/v3/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveApiKeysFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Update user details. An endpoint for updating the details of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp UpdateMyUser (UserUpdateReq body)
        {
             ApiResponse<UserInfoResp> localVarResponse = UpdateMyUserWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user details. An endpoint for updating the details of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > UpdateMyUserWithHttpInfo (UserUpdateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->UpdateMyUser");

            var localVarPath = "/v3/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMyUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Update user details. An endpoint for updating the details of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> UpdateMyUserAsync (UserUpdateReq body)
        {
             ApiResponse<UserInfoResp> localVarResponse = await UpdateMyUserAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user details. An endpoint for updating the details of the logged in user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New attributes for the logged in user.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> UpdateMyUserAsyncWithHttpInfo (UserUpdateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DeveloperApi->UpdateMyUser");

            var localVarPath = "/v3/users/me";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMyUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

    }
}
