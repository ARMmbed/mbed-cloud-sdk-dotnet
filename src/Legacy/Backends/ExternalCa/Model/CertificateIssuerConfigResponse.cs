/* 
 * <auto-generated>
 * Third party CA management API
 *
 * API for managing third party CA for creating certificates on Pelion Device Management
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = external_ca.Client.SwaggerDateConverter;

namespace external_ca.Model
{
    /// <summary>
    /// CertificateIssuerConfigResponse
    /// </summary>
    [DataContract]
    public partial class CertificateIssuerConfigResponse :  IEquatable<CertificateIssuerConfigResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets _Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum Configuration for "certificate-issuer-configuration"
            /// </summary>
            [EnumMember(Value = "certificate-issuer-configuration")]
            Configuration
        }

        /// <summary>
        /// Gets or Sets _Object
        /// </summary>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum? _Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssuerConfigResponse" /> class.
        /// </summary>
        /// <param name="CertificateIssuerId">The ID of the certificate issuer. Null if Device Management internal HSM is used. .</param>
        /// <param name="CreatedAt">Created UTC time RFC3339..</param>
        /// <param name="Etag">Entity instance signature..</param>
        /// <param name="Id">The ID of the certificate issuer configuration. .</param>
        /// <param name="IsCustom">IsCustom.</param>
        /// <param name="_Object">_Object.</param>
        /// <param name="Reference">The certificate name to which the certificate issuer configuration applies..</param>
        /// <param name="UpdatedAt">Updated UTC time RFC3339..</param>
        public CertificateIssuerConfigResponse(string CertificateIssuerId = default(string), DateTime? CreatedAt = default(DateTime?), string Etag = default(string), string Id = default(string), bool? IsCustom = default(bool?), ObjectEnum? _Object = default(ObjectEnum?), string Reference = default(string), DateTime? UpdatedAt = default(DateTime?))
        {
            this.CertificateIssuerId = CertificateIssuerId;
            this.CreatedAt = CreatedAt;
            this.Etag = Etag;
            this.Id = Id;
            this.IsCustom = IsCustom;
            this._Object = _Object;
            this.Reference = Reference;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// The ID of the certificate issuer. Null if Device Management internal HSM is used. 
        /// </summary>
        /// <value>The ID of the certificate issuer. Null if Device Management internal HSM is used. </value>
        [DataMember(Name="certificate_issuer_id", EmitDefaultValue=false)]
        public string CertificateIssuerId { get; set; }

        /// <summary>
        /// Created UTC time RFC3339.
        /// </summary>
        /// <value>Created UTC time RFC3339.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Entity instance signature.
        /// </summary>
        /// <value>Entity instance signature.</value>
        [DataMember(Name="etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// The ID of the certificate issuer configuration. 
        /// </summary>
        /// <value>The ID of the certificate issuer configuration. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsCustom
        /// </summary>
        [DataMember(Name="is_custom", EmitDefaultValue=false)]
        public bool? IsCustom { get; set; }


        /// <summary>
        /// The certificate name to which the certificate issuer configuration applies.
        /// </summary>
        /// <value>The certificate name to which the certificate issuer configuration applies.</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Updated UTC time RFC3339.
        /// </summary>
        /// <value>Updated UTC time RFC3339.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateIssuerConfigResponse {\n");
            sb.Append("  CertificateIssuerId: ").Append(CertificateIssuerId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsCustom: ").Append(IsCustom).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateIssuerConfigResponse);
        }

        /// <summary>
        /// Returns true if CertificateIssuerConfigResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateIssuerConfigResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateIssuerConfigResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CertificateIssuerId == input.CertificateIssuerId ||
                    (this.CertificateIssuerId != null &&
                    this.CertificateIssuerId.Equals(input.CertificateIssuerId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsCustom == input.IsCustom ||
                    (this.IsCustom != null &&
                    this.IsCustom.Equals(input.IsCustom))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertificateIssuerId != null)
                    hashCode = hashCode * 59 + this.CertificateIssuerId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsCustom != null)
                    hashCode = hashCode * 59 + this.IsCustom.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
