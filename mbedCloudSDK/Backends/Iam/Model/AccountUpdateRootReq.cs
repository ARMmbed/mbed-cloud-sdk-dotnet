/* 
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace iam.Model
{
    /// <summary>
    /// This object represents an account update request.
    /// </summary>
    [DataContract]
    public partial class AccountUpdateRootReq :  IEquatable<AccountUpdateRootReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountUpdateRootReq" /> class.
        /// </summary>
        /// <param name="EndMarket">The end market for this account, not longer than 100 characters..</param>
        /// <param name="PhoneNumber">The phone number of the company, not longer than 100 characters..</param>
        /// <param name="PasswordPolicy">Password policy for this account..</param>
        /// <param name="PostalCode">The postal code part of the postal address, not longer than 100 characters..</param>
        /// <param name="ParentID">The ID of the parent account, if it has any..</param>
        /// <param name="Aliases">An array of aliases, not more than 10. An alias is not shorter than 8 and not longer than 100 characters..</param>
        /// <param name="AddressLine2">Postal address line 2, not longer than 100 characters..</param>
        /// <param name="City">The city part of the postal address, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="AddressLine1">Postal address line 1, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="DisplayName">The display name for the account, not longer than 100 characters..</param>
        /// <param name="State">The state part of the postal address, not longer than 100 characters..</param>
        /// <param name="IsProvisioningAllowed">Flag (true/false) indicating whether Factory Tool is allowed to download or not. Manageable by the root admin only..</param>
        /// <param name="Email">The company email address for this account, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="Status">The status of the account. Manageable by the root admin only..</param>
        /// <param name="Company">The name of the company, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="Reason">A reason note for changing account status. Manageable by the root admin only..</param>
        /// <param name="Tier">The tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account, &#39;2&#39;: partner account, &#39;98&#39;: internal/demo account, &#39;99&#39;: root admin team. Other values are reserved for the future. Manageable by the root admin only..</param>
        /// <param name="Limits">List of service limits. Manageable by the root admin only..</param>
        /// <param name="Country">The country part of the postal address, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="IdleTimeout">The reference token expiration time in minutes for this account. Between 1 and 120 minutes..</param>
        /// <param name="Contact">The name of the contact person for this account, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="Policies">List of policies. Manageable by the root admin only..</param>
        /// <param name="TemplateId">Account template ID. Manageable by the root admin only..</param>
        public AccountUpdateRootReq(string EndMarket = default(string), string PhoneNumber = default(string), PasswordPolicy PasswordPolicy = default(PasswordPolicy), string PostalCode = default(string), string ParentID = default(string), List<string> Aliases = default(List<string>), string AddressLine2 = default(string), string City = default(string), string AddressLine1 = default(string), string DisplayName = default(string), string State = default(string), bool? IsProvisioningAllowed = default(bool?), string Email = default(string), string Status = default(string), string Company = default(string), string Reason = default(string), string Tier = default(string), Dictionary<string, string> Limits = default(Dictionary<string, string>), string Country = default(string), string IdleTimeout = default(string), string Contact = default(string), List<FeaturePolicy> Policies = default(List<FeaturePolicy>), string TemplateId = default(string))
        {
            this.EndMarket = EndMarket;
            this.PhoneNumber = PhoneNumber;
            this.PasswordPolicy = PasswordPolicy;
            this.PostalCode = PostalCode;
            this.ParentID = ParentID;
            this.Aliases = Aliases;
            this.AddressLine2 = AddressLine2;
            this.City = City;
            this.AddressLine1 = AddressLine1;
            this.DisplayName = DisplayName;
            this.State = State;
            this.IsProvisioningAllowed = IsProvisioningAllowed;
            this.Email = Email;
            this.Status = Status;
            this.Company = Company;
            this.Reason = Reason;
            this.Tier = Tier;
            this.Limits = Limits;
            this.Country = Country;
            this.IdleTimeout = IdleTimeout;
            this.Contact = Contact;
            this.Policies = Policies;
            this.TemplateId = TemplateId;
        }
        
        /// <summary>
        /// The end market for this account, not longer than 100 characters.
        /// </summary>
        /// <value>The end market for this account, not longer than 100 characters.</value>
        [DataMember(Name="end_market", EmitDefaultValue=false)]
        public string EndMarket { get; set; }
        /// <summary>
        /// The phone number of the company, not longer than 100 characters.
        /// </summary>
        /// <value>The phone number of the company, not longer than 100 characters.</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// Password policy for this account.
        /// </summary>
        /// <value>Password policy for this account.</value>
        [DataMember(Name="password_policy", EmitDefaultValue=false)]
        public PasswordPolicy PasswordPolicy { get; set; }
        /// <summary>
        /// The postal code part of the postal address, not longer than 100 characters.
        /// </summary>
        /// <value>The postal code part of the postal address, not longer than 100 characters.</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// The ID of the parent account, if it has any.
        /// </summary>
        /// <value>The ID of the parent account, if it has any.</value>
        [DataMember(Name="parentID", EmitDefaultValue=false)]
        public string ParentID { get; set; }
        /// <summary>
        /// An array of aliases, not more than 10. An alias is not shorter than 8 and not longer than 100 characters.
        /// </summary>
        /// <value>An array of aliases, not more than 10. An alias is not shorter than 8 and not longer than 100 characters.</value>
        [DataMember(Name="aliases", EmitDefaultValue=false)]
        public List<string> Aliases { get; set; }
        /// <summary>
        /// Postal address line 2, not longer than 100 characters.
        /// </summary>
        /// <value>Postal address line 2, not longer than 100 characters.</value>
        [DataMember(Name="address_line2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// The city part of the postal address, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>The city part of the postal address, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Postal address line 1, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>Postal address line 1, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="address_line1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// The display name for the account, not longer than 100 characters.
        /// </summary>
        /// <value>The display name for the account, not longer than 100 characters.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// The state part of the postal address, not longer than 100 characters.
        /// </summary>
        /// <value>The state part of the postal address, not longer than 100 characters.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// Flag (true/false) indicating whether Factory Tool is allowed to download or not. Manageable by the root admin only.
        /// </summary>
        /// <value>Flag (true/false) indicating whether Factory Tool is allowed to download or not. Manageable by the root admin only.</value>
        [DataMember(Name="is_provisioning_allowed", EmitDefaultValue=false)]
        public bool? IsProvisioningAllowed { get; set; }
        /// <summary>
        /// The company email address for this account, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>The company email address for this account, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The status of the account. Manageable by the root admin only.
        /// </summary>
        /// <value>The status of the account. Manageable by the root admin only.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// The name of the company, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>The name of the company, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }
        /// <summary>
        /// A reason note for changing account status. Manageable by the root admin only.
        /// </summary>
        /// <value>A reason note for changing account status. Manageable by the root admin only.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }
        /// <summary>
        /// The tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account, &#39;2&#39;: partner account, &#39;98&#39;: internal/demo account, &#39;99&#39;: root admin team. Other values are reserved for the future. Manageable by the root admin only.
        /// </summary>
        /// <value>The tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account, &#39;2&#39;: partner account, &#39;98&#39;: internal/demo account, &#39;99&#39;: root admin team. Other values are reserved for the future. Manageable by the root admin only.</value>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public string Tier { get; set; }
        /// <summary>
        /// List of service limits. Manageable by the root admin only.
        /// </summary>
        /// <value>List of service limits. Manageable by the root admin only.</value>
        [DataMember(Name="limits", EmitDefaultValue=false)]
        public Dictionary<string, string> Limits { get; set; }
        /// <summary>
        /// The country part of the postal address, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>The country part of the postal address, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// The reference token expiration time in minutes for this account. Between 1 and 120 minutes.
        /// </summary>
        /// <value>The reference token expiration time in minutes for this account. Between 1 and 120 minutes.</value>
        [DataMember(Name="idle_timeout", EmitDefaultValue=false)]
        public string IdleTimeout { get; set; }
        /// <summary>
        /// The name of the contact person for this account, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>The name of the contact person for this account, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public string Contact { get; set; }
        /// <summary>
        /// List of policies. Manageable by the root admin only.
        /// </summary>
        /// <value>List of policies. Manageable by the root admin only.</value>
        [DataMember(Name="policies", EmitDefaultValue=false)]
        public List<FeaturePolicy> Policies { get; set; }
        /// <summary>
        /// Account template ID. Manageable by the root admin only.
        /// </summary>
        /// <value>Account template ID. Manageable by the root admin only.</value>
        [DataMember(Name="template_id", EmitDefaultValue=false)]
        public string TemplateId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountUpdateRootReq {\n");
            sb.Append("  EndMarket: ").Append(EndMarket).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PasswordPolicy: ").Append(PasswordPolicy).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  ParentID: ").Append(ParentID).Append("\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  IsProvisioningAllowed: ").Append(IsProvisioningAllowed).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  IdleTimeout: ").Append(IdleTimeout).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccountUpdateRootReq);
        }

        /// <summary>
        /// Returns true if AccountUpdateRootReq instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountUpdateRootReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountUpdateRootReq other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.EndMarket == other.EndMarket ||
                    this.EndMarket != null &&
                    this.EndMarket.Equals(other.EndMarket)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.PasswordPolicy == other.PasswordPolicy ||
                    this.PasswordPolicy != null &&
                    this.PasswordPolicy.Equals(other.PasswordPolicy)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.ParentID == other.ParentID ||
                    this.ParentID != null &&
                    this.ParentID.Equals(other.ParentID)
                ) && 
                (
                    this.Aliases == other.Aliases ||
                    this.Aliases != null &&
                    this.Aliases.SequenceEqual(other.Aliases)
                ) && 
                (
                    this.AddressLine2 == other.AddressLine2 ||
                    this.AddressLine2 != null &&
                    this.AddressLine2.Equals(other.AddressLine2)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.AddressLine1 == other.AddressLine1 ||
                    this.AddressLine1 != null &&
                    this.AddressLine1.Equals(other.AddressLine1)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.IsProvisioningAllowed == other.IsProvisioningAllowed ||
                    this.IsProvisioningAllowed != null &&
                    this.IsProvisioningAllowed.Equals(other.IsProvisioningAllowed)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.Tier == other.Tier ||
                    this.Tier != null &&
                    this.Tier.Equals(other.Tier)
                ) && 
                (
                    this.Limits == other.Limits ||
                    this.Limits != null &&
                    this.Limits.SequenceEqual(other.Limits)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.IdleTimeout == other.IdleTimeout ||
                    this.IdleTimeout != null &&
                    this.IdleTimeout.Equals(other.IdleTimeout)
                ) && 
                (
                    this.Contact == other.Contact ||
                    this.Contact != null &&
                    this.Contact.Equals(other.Contact)
                ) && 
                (
                    this.Policies == other.Policies ||
                    this.Policies != null &&
                    this.Policies.SequenceEqual(other.Policies)
                ) && 
                (
                    this.TemplateId == other.TemplateId ||
                    this.TemplateId != null &&
                    this.TemplateId.Equals(other.TemplateId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.EndMarket != null)
                    hash = hash * 59 + this.EndMarket.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.PasswordPolicy != null)
                    hash = hash * 59 + this.PasswordPolicy.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.ParentID != null)
                    hash = hash * 59 + this.ParentID.GetHashCode();
                if (this.Aliases != null)
                    hash = hash * 59 + this.Aliases.GetHashCode();
                if (this.AddressLine2 != null)
                    hash = hash * 59 + this.AddressLine2.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.AddressLine1 != null)
                    hash = hash * 59 + this.AddressLine1.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.IsProvisioningAllowed != null)
                    hash = hash * 59 + this.IsProvisioningAllowed.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.Tier != null)
                    hash = hash * 59 + this.Tier.GetHashCode();
                if (this.Limits != null)
                    hash = hash * 59 + this.Limits.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.IdleTimeout != null)
                    hash = hash * 59 + this.IdleTimeout.GetHashCode();
                if (this.Contact != null)
                    hash = hash * 59 + this.Contact.GetHashCode();
                if (this.Policies != null)
                    hash = hash * 59 + this.Policies.GetHashCode();
                if (this.TemplateId != null)
                    hash = hash * 59 + this.TemplateId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
