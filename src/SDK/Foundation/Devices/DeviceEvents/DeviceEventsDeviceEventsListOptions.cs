// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 2.0.0
//
// <copyright file="DeviceEventsDeviceEventsListOptions.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace Mbed.Cloud.Foundation
{
    using Mbed.Cloud.Common;
    using Mbed.Cloud.Common.Filters;
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// DeviceEventsDeviceEventsListOptions
    /// </summary>
    public class DeviceEventsDeviceEventsListOptions : QueryOptions, IDeviceEventsDeviceEventsListOptions
    {
        public DeviceEventsDeviceEventsListOptions()
        {
            Filter = new Filter();
        }

        /// <summary>
        /// Filter object
        /// </summary>
        public Filter Filter
        {
            get;
            set;
        }

        public DeviceEventsDeviceEventsListOptions DateTimeIn(params DateTime[] value)
        {
            this.Filter.AddFilterItem("date_time", new FilterItem(value, FilterOperator.In));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DateTimeNotIn(params DateTime[] value)
        {
            this.Filter.AddFilterItem("date_time", new FilterItem(value, FilterOperator.NotIn));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DateTimeLessThan(DateTime value)
        {
            this.Filter.AddFilterItem("date_time", new FilterItem(value, FilterOperator.LessThan));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DateTimeGreaterThan(DateTime value)
        {
            this.Filter.AddFilterItem("date_time", new FilterItem(value, FilterOperator.GreaterThan));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DescriptionEqualTo(string value)
        {
            this.Filter.AddFilterItem("description", new FilterItem(value, FilterOperator.Equals));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DescriptionNotEqualTo(string value)
        {
            this.Filter.AddFilterItem("description", new FilterItem(value, FilterOperator.NotEqual));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DescriptionIn(params string[] value)
        {
            this.Filter.AddFilterItem("description", new FilterItem(value, FilterOperator.In));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DescriptionNotIn(params string[] value)
        {
            this.Filter.AddFilterItem("description", new FilterItem(value, FilterOperator.NotIn));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions IdEqualTo(string value)
        {
            this.Filter.AddFilterItem("id", new FilterItem(value, FilterOperator.Equals));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions IdNotEqualTo(string value)
        {
            this.Filter.AddFilterItem("id", new FilterItem(value, FilterOperator.NotEqual));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions IdIn(params string[] value)
        {
            this.Filter.AddFilterItem("id", new FilterItem(value, FilterOperator.In));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions IdNotIn(params string[] value)
        {
            this.Filter.AddFilterItem("id", new FilterItem(value, FilterOperator.NotIn));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DeviceIdEqualTo(string value)
        {
            this.Filter.AddFilterItem("device_id", new FilterItem(value, FilterOperator.Equals));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DeviceIdNotEqualTo(string value)
        {
            this.Filter.AddFilterItem("device_id", new FilterItem(value, FilterOperator.NotEqual));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DeviceIdIn(params string[] value)
        {
            this.Filter.AddFilterItem("device_id", new FilterItem(value, FilterOperator.In));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions DeviceIdNotIn(params string[] value)
        {
            this.Filter.AddFilterItem("device_id", new FilterItem(value, FilterOperator.NotIn));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions EventTypeEqualTo(string value)
        {
            this.Filter.AddFilterItem("event_type", new FilterItem(value, FilterOperator.Equals));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions EventTypeNotEqualTo(string value)
        {
            this.Filter.AddFilterItem("event_type", new FilterItem(value, FilterOperator.NotEqual));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions EventTypeIn(params string[] value)
        {
            this.Filter.AddFilterItem("event_type", new FilterItem(value, FilterOperator.In));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions EventTypeNotIn(params string[] value)
        {
            this.Filter.AddFilterItem("event_type", new FilterItem(value, FilterOperator.NotIn));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions StateChangeEqualTo(bool value)
        {
            this.Filter.AddFilterItem("state_change", new FilterItem(value, FilterOperator.Equals));
            return this;
        }

        public DeviceEventsDeviceEventsListOptions StateChangeNotEqualTo(bool value)
        {
            this.Filter.AddFilterItem("state_change", new FilterItem(value, FilterOperator.NotEqual));
            return this;
        }
    }
}