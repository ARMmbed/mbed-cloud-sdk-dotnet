/* 
 * <auto-generated>
 * Device Directory API
 *
 * This is the API Documentation for the Mbed Device Directory service.
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using device_directory.Client;
using device_directory.Api;
using device_directory.Model;

namespace device_directory.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test DeviceCreate
        /// </summary>
        [Test]
        public void DeviceCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeviceDataPostRequest device = null;
            //var response = instance.DeviceCreate(device);
            //Assert.IsInstanceOf<DeviceData> (response, "response is DeviceData");
        }
        
        /// <summary>
        /// Test DeviceDestroy
        /// </summary>
        [Test]
        public void DeviceDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeviceDestroy(id);
            
        }
        
        /// <summary>
        /// Test DeviceEventList
        /// </summary>
        [Test]
        public void DeviceEventListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string filter = null;
            //string include = null;
            //var response = instance.DeviceEventList(limit, order, after, filter, include);
            //Assert.IsInstanceOf<DeviceEventPage> (response, "response is DeviceEventPage");
        }
        
        /// <summary>
        /// Test DeviceEventRetrieve
        /// </summary>
        [Test]
        public void DeviceEventRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceEventId = null;
            //var response = instance.DeviceEventRetrieve(deviceEventId);
            //Assert.IsInstanceOf<DeviceEventData> (response, "response is DeviceEventData");
        }
        
        /// <summary>
        /// Test DeviceList
        /// </summary>
        [Test]
        public void DeviceListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string filter = null;
            //string include = null;
            //var response = instance.DeviceList(limit, order, after, filter, include);
            //Assert.IsInstanceOf<DevicePage> (response, "response is DevicePage");
        }
        
        /// <summary>
        /// Test DeviceLogList
        /// </summary>
        [Test]
        public void DeviceLogListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string filter = null;
            //string include = null;
            //var response = instance.DeviceLogList(limit, order, after, filter, include);
            //Assert.IsInstanceOf<DeviceEventPage> (response, "response is DeviceEventPage");
        }
        
        /// <summary>
        /// Test DeviceLogRetrieve
        /// </summary>
        [Test]
        public void DeviceLogRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceEventId = null;
            //var response = instance.DeviceLogRetrieve(deviceEventId);
            //Assert.IsInstanceOf<DeviceEventData> (response, "response is DeviceEventData");
        }
        
        /// <summary>
        /// Test DeviceQueryCreate
        /// </summary>
        [Test]
        public void DeviceQueryCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeviceQueryPostPutRequest device = null;
            //var response = instance.DeviceQueryCreate(device);
            //Assert.IsInstanceOf<DeviceQuery> (response, "response is DeviceQuery");
        }
        
        /// <summary>
        /// Test DeviceQueryDestroy
        /// </summary>
        [Test]
        public void DeviceQueryDestroyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queryId = null;
            //instance.DeviceQueryDestroy(queryId);
            
        }
        
        /// <summary>
        /// Test DeviceQueryList
        /// </summary>
        [Test]
        public void DeviceQueryListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string filter = null;
            //string include = null;
            //var response = instance.DeviceQueryList(limit, order, after, filter, include);
            //Assert.IsInstanceOf<DeviceQueryPage> (response, "response is DeviceQueryPage");
        }
        
        /// <summary>
        /// Test DeviceQueryRetrieve
        /// </summary>
        [Test]
        public void DeviceQueryRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queryId = null;
            //var response = instance.DeviceQueryRetrieve(queryId);
            //Assert.IsInstanceOf<DeviceQuery> (response, "response is DeviceQuery");
        }
        
        /// <summary>
        /// Test DeviceQueryUpdate
        /// </summary>
        [Test]
        public void DeviceQueryUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string queryId = null;
            //DeviceQueryPostPutRequest body = null;
            //var response = instance.DeviceQueryUpdate(queryId, body);
            //Assert.IsInstanceOf<DeviceQuery> (response, "response is DeviceQuery");
        }
        
        /// <summary>
        /// Test DeviceRetrieve
        /// </summary>
        [Test]
        public void DeviceRetrieveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeviceRetrieve(id);
            //Assert.IsInstanceOf<DeviceData> (response, "response is DeviceData");
        }
        
        /// <summary>
        /// Test DeviceUpdate
        /// </summary>
        [Test]
        public void DeviceUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //DeviceDataPutRequest device = null;
            //var response = instance.DeviceUpdate(id, device);
            //Assert.IsInstanceOf<DeviceData> (response, "response is DeviceData");
        }
        
    }

}
