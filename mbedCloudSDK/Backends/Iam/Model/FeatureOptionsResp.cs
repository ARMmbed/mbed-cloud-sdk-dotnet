/* 
 * IAM Identities REST API
 *
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace iam.Model
{
    /// <summary>
    /// This object represents available feature options.
    /// </summary>
    [DataContract]
    public partial class FeatureOptionsResp :  IEquatable<FeatureOptionsResp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureOptionsResp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeatureOptionsResp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureOptionsResp" /> class.
        /// </summary>
        /// <param name="Tag">Tag of the feature..</param>
        /// <param name="Feature">Name of the feature. (required).</param>
        /// <param name="Actions">Actions available for the feature..</param>
        /// <param name="RequestPath">Request path of the feature. (required).</param>
        public FeatureOptionsResp(string Tag = default(string), string Feature = default(string), List<string> Actions = default(List<string>), string RequestPath = default(string))
        {
            // to ensure "Feature" is required (not null)
            if (Feature == null)
            {
                throw new InvalidDataException("Feature is a required property for FeatureOptionsResp and cannot be null");
            }
            else
            {
                this.Feature = Feature;
            }
            // to ensure "RequestPath" is required (not null)
            if (RequestPath == null)
            {
                throw new InvalidDataException("RequestPath is a required property for FeatureOptionsResp and cannot be null");
            }
            else
            {
                this.RequestPath = RequestPath;
            }
            this.Tag = Tag;
            this.Actions = Actions;
        }
        
        /// <summary>
        /// Tag of the feature.
        /// </summary>
        /// <value>Tag of the feature.</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }
        /// <summary>
        /// Name of the feature.
        /// </summary>
        /// <value>Name of the feature.</value>
        [DataMember(Name="feature", EmitDefaultValue=false)]
        public string Feature { get; set; }
        /// <summary>
        /// Actions available for the feature.
        /// </summary>
        /// <value>Actions available for the feature.</value>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<string> Actions { get; set; }
        /// <summary>
        /// Request path of the feature.
        /// </summary>
        /// <value>Request path of the feature.</value>
        [DataMember(Name="request_path", EmitDefaultValue=false)]
        public string RequestPath { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureOptionsResp {\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  RequestPath: ").Append(RequestPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FeatureOptionsResp);
        }

        /// <summary>
        /// Returns true if FeatureOptionsResp instances are equal
        /// </summary>
        /// <param name="other">Instance of FeatureOptionsResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureOptionsResp other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Tag == other.Tag ||
                    this.Tag != null &&
                    this.Tag.Equals(other.Tag)
                ) && 
                (
                    this.Feature == other.Feature ||
                    this.Feature != null &&
                    this.Feature.Equals(other.Feature)
                ) && 
                (
                    this.Actions == other.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(other.Actions)
                ) && 
                (
                    this.RequestPath == other.RequestPath ||
                    this.RequestPath != null &&
                    this.RequestPath.Equals(other.RequestPath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Tag != null)
                    hash = hash * 59 + this.Tag.GetHashCode();
                if (this.Feature != null)
                    hash = hash * 59 + this.Feature.GetHashCode();
                if (this.Actions != null)
                    hash = hash * 59 + this.Actions.GetHashCode();
                if (this.RequestPath != null)
                    hash = hash * 59 + this.RequestPath.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
