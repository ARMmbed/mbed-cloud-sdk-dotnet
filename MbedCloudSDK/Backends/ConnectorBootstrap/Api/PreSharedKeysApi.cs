/* 
 * <auto-generated>
 * Bootstrap API
 *
 * Mbed Cloud Bootstrap API allows web applications to control the device bootstrapping process.
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using connector_bootstrap.Client;
using connector_bootstrap.Model;

namespace connector_bootstrap.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreSharedKeysApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove a pre-shared key.
        /// </summary>
        /// <remarks>
        /// Remove a pre-shared key.
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns></returns>
        void DeletePreSharedKey (string endpointName);

        /// <summary>
        /// Remove a pre-shared key.
        /// </summary>
        /// <remarks>
        /// Remove a pre-shared key.
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePreSharedKeyWithHttpInfo (string endpointName);
        /// <summary>
        /// Get a pre-shared key.
        /// </summary>
        /// <remarks>
        /// Check if a pre-shared key for an endpoint exists or not. The response does not contain the secret itself. 
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>PreSharedKeyWithoutSecret</returns>
        PreSharedKeyWithoutSecret GetPreSharedKey (string endpointName);

        /// <summary>
        /// Get a pre-shared key.
        /// </summary>
        /// <remarks>
        /// Check if a pre-shared key for an endpoint exists or not. The response does not contain the secret itself. 
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>ApiResponse of PreSharedKeyWithoutSecret</returns>
        ApiResponse<PreSharedKeyWithoutSecret> GetPreSharedKeyWithHttpInfo (string endpointName);
        /// <summary>
        /// Upload a pre-shared key to Mbed Cloud.
        /// </summary>
        /// <remarks>
        /// Upload a pre-shared key (PSK) for an endpoint to allow it to bootstrap. The existing key will not be overwritten but needs to be deleted first in case of re-setting PSK for an endpoint.  **Note**: The PSK APIs are available only to accounts that have this feature enabled.  &#x60;&#x60;&#x60; Example payloads: {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;0x4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-shared key to be uploaded.</param>
        /// <returns></returns>
        void UploadPreSharedKey (PreSharedKey body);

        /// <summary>
        /// Upload a pre-shared key to Mbed Cloud.
        /// </summary>
        /// <remarks>
        /// Upload a pre-shared key (PSK) for an endpoint to allow it to bootstrap. The existing key will not be overwritten but needs to be deleted first in case of re-setting PSK for an endpoint.  **Note**: The PSK APIs are available only to accounts that have this feature enabled.  &#x60;&#x60;&#x60; Example payloads: {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;0x4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-shared key to be uploaded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadPreSharedKeyWithHttpInfo (PreSharedKey body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Remove a pre-shared key.
        /// </summary>
        /// <remarks>
        /// Remove a pre-shared key.
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePreSharedKeyAsync (string endpointName);

        /// <summary>
        /// Remove a pre-shared key.
        /// </summary>
        /// <remarks>
        /// Remove a pre-shared key.
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePreSharedKeyAsyncWithHttpInfo (string endpointName);
        /// <summary>
        /// Get a pre-shared key.
        /// </summary>
        /// <remarks>
        /// Check if a pre-shared key for an endpoint exists or not. The response does not contain the secret itself. 
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>Task of PreSharedKeyWithoutSecret</returns>
        System.Threading.Tasks.Task<PreSharedKeyWithoutSecret> GetPreSharedKeyAsync (string endpointName);

        /// <summary>
        /// Get a pre-shared key.
        /// </summary>
        /// <remarks>
        /// Check if a pre-shared key for an endpoint exists or not. The response does not contain the secret itself. 
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>Task of ApiResponse (PreSharedKeyWithoutSecret)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreSharedKeyWithoutSecret>> GetPreSharedKeyAsyncWithHttpInfo (string endpointName);
        /// <summary>
        /// Upload a pre-shared key to Mbed Cloud.
        /// </summary>
        /// <remarks>
        /// Upload a pre-shared key (PSK) for an endpoint to allow it to bootstrap. The existing key will not be overwritten but needs to be deleted first in case of re-setting PSK for an endpoint.  **Note**: The PSK APIs are available only to accounts that have this feature enabled.  &#x60;&#x60;&#x60; Example payloads: {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;0x4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-shared key to be uploaded.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadPreSharedKeyAsync (PreSharedKey body);

        /// <summary>
        /// Upload a pre-shared key to Mbed Cloud.
        /// </summary>
        /// <remarks>
        /// Upload a pre-shared key (PSK) for an endpoint to allow it to bootstrap. The existing key will not be overwritten but needs to be deleted first in case of re-setting PSK for an endpoint.  **Note**: The PSK APIs are available only to accounts that have this feature enabled.  &#x60;&#x60;&#x60; Example payloads: {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;0x4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-shared key to be uploaded.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadPreSharedKeyAsyncWithHttpInfo (PreSharedKey body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PreSharedKeysApi : IPreSharedKeysApi
    {
        private connector_bootstrap.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PreSharedKeysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PreSharedKeysApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = connector_bootstrap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreSharedKeysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PreSharedKeysApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = connector_bootstrap.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public connector_bootstrap.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Remove a pre-shared key. Remove a pre-shared key.
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns></returns>
        public void DeletePreSharedKey (string endpointName)
        {
             DeletePreSharedKeyWithHttpInfo(endpointName);
        }

        /// <summary>
        /// Remove a pre-shared key. Remove a pre-shared key.
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePreSharedKeyWithHttpInfo (string endpointName)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling PreSharedKeysApi->DeletePreSharedKey");

            var localVarPath = "/v2/device-shared-keys/{endpoint_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endpointName != null) localVarPathParams.Add("endpoint_name", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePreSharedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a pre-shared key. Remove a pre-shared key.
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePreSharedKeyAsync (string endpointName)
        {
             await DeletePreSharedKeyAsyncWithHttpInfo(endpointName);

        }

        /// <summary>
        /// Remove a pre-shared key. Remove a pre-shared key.
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePreSharedKeyAsyncWithHttpInfo (string endpointName)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling PreSharedKeysApi->DeletePreSharedKey");

            var localVarPath = "/v2/device-shared-keys/{endpoint_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endpointName != null) localVarPathParams.Add("endpoint_name", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePreSharedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a pre-shared key. Check if a pre-shared key for an endpoint exists or not. The response does not contain the secret itself. 
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>PreSharedKeyWithoutSecret</returns>
        public PreSharedKeyWithoutSecret GetPreSharedKey (string endpointName)
        {
             ApiResponse<PreSharedKeyWithoutSecret> localVarResponse = GetPreSharedKeyWithHttpInfo(endpointName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a pre-shared key. Check if a pre-shared key for an endpoint exists or not. The response does not contain the secret itself. 
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>ApiResponse of PreSharedKeyWithoutSecret</returns>
        public ApiResponse< PreSharedKeyWithoutSecret > GetPreSharedKeyWithHttpInfo (string endpointName)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling PreSharedKeysApi->GetPreSharedKey");

            var localVarPath = "/v2/device-shared-keys/{endpoint_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endpointName != null) localVarPathParams.Add("endpoint_name", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreSharedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreSharedKeyWithoutSecret>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PreSharedKeyWithoutSecret) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreSharedKeyWithoutSecret)));
        }

        /// <summary>
        /// Get a pre-shared key. Check if a pre-shared key for an endpoint exists or not. The response does not contain the secret itself. 
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>Task of PreSharedKeyWithoutSecret</returns>
        public async System.Threading.Tasks.Task<PreSharedKeyWithoutSecret> GetPreSharedKeyAsync (string endpointName)
        {
             ApiResponse<PreSharedKeyWithoutSecret> localVarResponse = await GetPreSharedKeyAsyncWithHttpInfo(endpointName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a pre-shared key. Check if a pre-shared key for an endpoint exists or not. The response does not contain the secret itself. 
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endpointName">The unique endpoint identifier that this pre-shared key applies to. [Reserved characters](https://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_reserved_characters) must be percent-encoded.</param>
        /// <returns>Task of ApiResponse (PreSharedKeyWithoutSecret)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PreSharedKeyWithoutSecret>> GetPreSharedKeyAsyncWithHttpInfo (string endpointName)
        {
            // verify the required parameter 'endpointName' is set
            if (endpointName == null)
                throw new ApiException(400, "Missing required parameter 'endpointName' when calling PreSharedKeysApi->GetPreSharedKey");

            var localVarPath = "/v2/device-shared-keys/{endpoint_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endpointName != null) localVarPathParams.Add("endpoint_name", Configuration.ApiClient.ParameterToString(endpointName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPreSharedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreSharedKeyWithoutSecret>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PreSharedKeyWithoutSecret) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreSharedKeyWithoutSecret)));
        }

        /// <summary>
        /// Upload a pre-shared key to Mbed Cloud. Upload a pre-shared key (PSK) for an endpoint to allow it to bootstrap. The existing key will not be overwritten but needs to be deleted first in case of re-setting PSK for an endpoint.  **Note**: The PSK APIs are available only to accounts that have this feature enabled.  &#x60;&#x60;&#x60; Example payloads: {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;0x4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-shared key to be uploaded.</param>
        /// <returns></returns>
        public void UploadPreSharedKey (PreSharedKey body)
        {
             UploadPreSharedKeyWithHttpInfo(body);
        }

        /// <summary>
        /// Upload a pre-shared key to Mbed Cloud. Upload a pre-shared key (PSK) for an endpoint to allow it to bootstrap. The existing key will not be overwritten but needs to be deleted first in case of re-setting PSK for an endpoint.  **Note**: The PSK APIs are available only to accounts that have this feature enabled.  &#x60;&#x60;&#x60; Example payloads: {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;0x4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-shared key to be uploaded.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadPreSharedKeyWithHttpInfo (PreSharedKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PreSharedKeysApi->UploadPreSharedKey");

            var localVarPath = "/v2/device-shared-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadPreSharedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload a pre-shared key to Mbed Cloud. Upload a pre-shared key (PSK) for an endpoint to allow it to bootstrap. The existing key will not be overwritten but needs to be deleted first in case of re-setting PSK for an endpoint.  **Note**: The PSK APIs are available only to accounts that have this feature enabled.  &#x60;&#x60;&#x60; Example payloads: {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;0x4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-shared key to be uploaded.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadPreSharedKeyAsync (PreSharedKey body)
        {
             await UploadPreSharedKeyAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Upload a pre-shared key to Mbed Cloud. Upload a pre-shared key (PSK) for an endpoint to allow it to bootstrap. The existing key will not be overwritten but needs to be deleted first in case of re-setting PSK for an endpoint.  **Note**: The PSK APIs are available only to accounts that have this feature enabled.  &#x60;&#x60;&#x60; Example payloads: {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } {\&quot;endpoint_name\&quot;: \&quot;myEndpoint.host.com\&quot;, \&quot;secret_hex\&quot;: \&quot;0x4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a\&quot; } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="connector_bootstrap.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pre-shared key to be uploaded.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadPreSharedKeyAsyncWithHttpInfo (PreSharedKey body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PreSharedKeysApi->UploadPreSharedKey");

            var localVarPath = "/v2/device-shared-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadPreSharedKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
