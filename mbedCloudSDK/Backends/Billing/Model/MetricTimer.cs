/* 
 * mbed-billing REST API documentation for API-server
 *
 * This document contains the public REST API definitions of the mbed-billing service's API server component.
 *
 * OpenAPI spec version: 1.3.6-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace billing.Model
{
    /// <summary>
    /// A timer measures both the rate and the distribution of particular metric duration. All measurements are in presented in milliseconds.
    /// </summary>
    [DataContract]
    public partial class MetricTimer :  IEquatable<MetricTimer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricTimer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetricTimer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricTimer" /> class.
        /// </summary>
        /// <param name="P98">P98 (required).</param>
        /// <param name="P99">P99 (required).</param>
        /// <param name="P75">P75 (required).</param>
        /// <param name="Mean">Mean (required).</param>
        /// <param name="MeanRate">MeanRate (required).</param>
        /// <param name="M15Rate">M15Rate (required).</param>
        /// <param name="Min">Min (required).</param>
        /// <param name="M5Rate">M5Rate (required).</param>
        /// <param name="P95">P95 (required).</param>
        /// <param name="Median">Median (required).</param>
        /// <param name="Stddev">Stddev (required).</param>
        /// <param name="Max">Max (required).</param>
        /// <param name="M1Rate">M1Rate (required).</param>
        /// <param name="S1Rate">S1Rate (required).</param>
        /// <param name="P999">P999 (required).</param>
        /// <param name="Count">Count (required).</param>
        public MetricTimer(double? P98 = default(double?), double? P99 = default(double?), double? P75 = default(double?), double? Mean = default(double?), double? MeanRate = default(double?), double? M15Rate = default(double?), double? Min = default(double?), double? M5Rate = default(double?), double? P95 = default(double?), double? Median = default(double?), double? Stddev = default(double?), double? Max = default(double?), double? M1Rate = default(double?), double? S1Rate = default(double?), double? P999 = default(double?), double? Count = default(double?))
        {
            // to ensure "P98" is required (not null)
            if (P98 == null)
            {
                throw new InvalidDataException("P98 is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.P98 = P98;
            }
            // to ensure "P99" is required (not null)
            if (P99 == null)
            {
                throw new InvalidDataException("P99 is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.P99 = P99;
            }
            // to ensure "P75" is required (not null)
            if (P75 == null)
            {
                throw new InvalidDataException("P75 is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.P75 = P75;
            }
            // to ensure "Mean" is required (not null)
            if (Mean == null)
            {
                throw new InvalidDataException("Mean is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.Mean = Mean;
            }
            // to ensure "MeanRate" is required (not null)
            if (MeanRate == null)
            {
                throw new InvalidDataException("MeanRate is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.MeanRate = MeanRate;
            }
            // to ensure "M15Rate" is required (not null)
            if (M15Rate == null)
            {
                throw new InvalidDataException("M15Rate is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.M15Rate = M15Rate;
            }
            // to ensure "Min" is required (not null)
            if (Min == null)
            {
                throw new InvalidDataException("Min is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.Min = Min;
            }
            // to ensure "M5Rate" is required (not null)
            if (M5Rate == null)
            {
                throw new InvalidDataException("M5Rate is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.M5Rate = M5Rate;
            }
            // to ensure "P95" is required (not null)
            if (P95 == null)
            {
                throw new InvalidDataException("P95 is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.P95 = P95;
            }
            // to ensure "Median" is required (not null)
            if (Median == null)
            {
                throw new InvalidDataException("Median is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.Median = Median;
            }
            // to ensure "Stddev" is required (not null)
            if (Stddev == null)
            {
                throw new InvalidDataException("Stddev is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.Stddev = Stddev;
            }
            // to ensure "Max" is required (not null)
            if (Max == null)
            {
                throw new InvalidDataException("Max is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.Max = Max;
            }
            // to ensure "M1Rate" is required (not null)
            if (M1Rate == null)
            {
                throw new InvalidDataException("M1Rate is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.M1Rate = M1Rate;
            }
            // to ensure "S1Rate" is required (not null)
            if (S1Rate == null)
            {
                throw new InvalidDataException("S1Rate is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.S1Rate = S1Rate;
            }
            // to ensure "P999" is required (not null)
            if (P999 == null)
            {
                throw new InvalidDataException("P999 is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.P999 = P999;
            }
            // to ensure "Count" is required (not null)
            if (Count == null)
            {
                throw new InvalidDataException("Count is a required property for MetricTimer and cannot be null");
            }
            else
            {
                this.Count = Count;
            }
        }
        
        /// <summary>
        /// Gets or Sets P98
        /// </summary>
        [DataMember(Name="p98", EmitDefaultValue=false)]
        public double? P98 { get; set; }
        /// <summary>
        /// Gets or Sets P99
        /// </summary>
        [DataMember(Name="p99", EmitDefaultValue=false)]
        public double? P99 { get; set; }
        /// <summary>
        /// Gets or Sets P75
        /// </summary>
        [DataMember(Name="p75", EmitDefaultValue=false)]
        public double? P75 { get; set; }
        /// <summary>
        /// Gets or Sets Mean
        /// </summary>
        [DataMember(Name="mean", EmitDefaultValue=false)]
        public double? Mean { get; set; }
        /// <summary>
        /// Gets or Sets MeanRate
        /// </summary>
        [DataMember(Name="mean_rate", EmitDefaultValue=false)]
        public double? MeanRate { get; set; }
        /// <summary>
        /// Gets or Sets M15Rate
        /// </summary>
        [DataMember(Name="m15_rate", EmitDefaultValue=false)]
        public double? M15Rate { get; set; }
        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public double? Min { get; set; }
        /// <summary>
        /// Gets or Sets M5Rate
        /// </summary>
        [DataMember(Name="m5_rate", EmitDefaultValue=false)]
        public double? M5Rate { get; set; }
        /// <summary>
        /// Gets or Sets P95
        /// </summary>
        [DataMember(Name="p95", EmitDefaultValue=false)]
        public double? P95 { get; set; }
        /// <summary>
        /// Gets or Sets Median
        /// </summary>
        [DataMember(Name="median", EmitDefaultValue=false)]
        public double? Median { get; set; }
        /// <summary>
        /// Gets or Sets Stddev
        /// </summary>
        [DataMember(Name="stddev", EmitDefaultValue=false)]
        public double? Stddev { get; set; }
        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public double? Max { get; set; }
        /// <summary>
        /// Gets or Sets M1Rate
        /// </summary>
        [DataMember(Name="m1_rate", EmitDefaultValue=false)]
        public double? M1Rate { get; set; }
        /// <summary>
        /// Gets or Sets S1Rate
        /// </summary>
        [DataMember(Name="s1_rate", EmitDefaultValue=false)]
        public double? S1Rate { get; set; }
        /// <summary>
        /// Gets or Sets P999
        /// </summary>
        [DataMember(Name="p999", EmitDefaultValue=false)]
        public double? P999 { get; set; }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public double? Count { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetricTimer {\n");
            sb.Append("  P98: ").Append(P98).Append("\n");
            sb.Append("  P99: ").Append(P99).Append("\n");
            sb.Append("  P75: ").Append(P75).Append("\n");
            sb.Append("  Mean: ").Append(Mean).Append("\n");
            sb.Append("  MeanRate: ").Append(MeanRate).Append("\n");
            sb.Append("  M15Rate: ").Append(M15Rate).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  M5Rate: ").Append(M5Rate).Append("\n");
            sb.Append("  P95: ").Append(P95).Append("\n");
            sb.Append("  Median: ").Append(Median).Append("\n");
            sb.Append("  Stddev: ").Append(Stddev).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  M1Rate: ").Append(M1Rate).Append("\n");
            sb.Append("  S1Rate: ").Append(S1Rate).Append("\n");
            sb.Append("  P999: ").Append(P999).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MetricTimer);
        }

        /// <summary>
        /// Returns true if MetricTimer instances are equal
        /// </summary>
        /// <param name="other">Instance of MetricTimer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricTimer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.P98 == other.P98 ||
                    this.P98 != null &&
                    this.P98.Equals(other.P98)
                ) && 
                (
                    this.P99 == other.P99 ||
                    this.P99 != null &&
                    this.P99.Equals(other.P99)
                ) && 
                (
                    this.P75 == other.P75 ||
                    this.P75 != null &&
                    this.P75.Equals(other.P75)
                ) && 
                (
                    this.Mean == other.Mean ||
                    this.Mean != null &&
                    this.Mean.Equals(other.Mean)
                ) && 
                (
                    this.MeanRate == other.MeanRate ||
                    this.MeanRate != null &&
                    this.MeanRate.Equals(other.MeanRate)
                ) && 
                (
                    this.M15Rate == other.M15Rate ||
                    this.M15Rate != null &&
                    this.M15Rate.Equals(other.M15Rate)
                ) && 
                (
                    this.Min == other.Min ||
                    this.Min != null &&
                    this.Min.Equals(other.Min)
                ) && 
                (
                    this.M5Rate == other.M5Rate ||
                    this.M5Rate != null &&
                    this.M5Rate.Equals(other.M5Rate)
                ) && 
                (
                    this.P95 == other.P95 ||
                    this.P95 != null &&
                    this.P95.Equals(other.P95)
                ) && 
                (
                    this.Median == other.Median ||
                    this.Median != null &&
                    this.Median.Equals(other.Median)
                ) && 
                (
                    this.Stddev == other.Stddev ||
                    this.Stddev != null &&
                    this.Stddev.Equals(other.Stddev)
                ) && 
                (
                    this.Max == other.Max ||
                    this.Max != null &&
                    this.Max.Equals(other.Max)
                ) && 
                (
                    this.M1Rate == other.M1Rate ||
                    this.M1Rate != null &&
                    this.M1Rate.Equals(other.M1Rate)
                ) && 
                (
                    this.S1Rate == other.S1Rate ||
                    this.S1Rate != null &&
                    this.S1Rate.Equals(other.S1Rate)
                ) && 
                (
                    this.P999 == other.P999 ||
                    this.P999 != null &&
                    this.P999.Equals(other.P999)
                ) && 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.P98 != null)
                    hash = hash * 59 + this.P98.GetHashCode();
                if (this.P99 != null)
                    hash = hash * 59 + this.P99.GetHashCode();
                if (this.P75 != null)
                    hash = hash * 59 + this.P75.GetHashCode();
                if (this.Mean != null)
                    hash = hash * 59 + this.Mean.GetHashCode();
                if (this.MeanRate != null)
                    hash = hash * 59 + this.MeanRate.GetHashCode();
                if (this.M15Rate != null)
                    hash = hash * 59 + this.M15Rate.GetHashCode();
                if (this.Min != null)
                    hash = hash * 59 + this.Min.GetHashCode();
                if (this.M5Rate != null)
                    hash = hash * 59 + this.M5Rate.GetHashCode();
                if (this.P95 != null)
                    hash = hash * 59 + this.P95.GetHashCode();
                if (this.Median != null)
                    hash = hash * 59 + this.Median.GetHashCode();
                if (this.Stddev != null)
                    hash = hash * 59 + this.Stddev.GetHashCode();
                if (this.Max != null)
                    hash = hash * 59 + this.Max.GetHashCode();
                if (this.M1Rate != null)
                    hash = hash * 59 + this.M1Rate.GetHashCode();
                if (this.S1Rate != null)
                    hash = hash * 59 + this.S1Rate.GetHashCode();
                if (this.P999 != null)
                    hash = hash * 59 + this.P999.GetHashCode();
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
