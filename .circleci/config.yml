version: 2

references:

  attach_workspace: &attach_workspace
    attach_workspace:
      at: ~/project

  dotnet_mono_docker: &dotnet_mono_docker
    docker:
      - image: andrewlock/dotnet-mono

  circle_python: &circle_python
    docker:
      - image: circleci/python:3.6-jessie-browsers

  sdk_environment: &sdk_environment
    TESTRUNNER_DOCKER_IMAGE: 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master
    ARTIFACTORY_URL: http://localhost:80/artifactory/

  install_aws_tools: &install_aws_tools
    run:
        name: Installing aws cli
        command: |
          python -m venv venv
          . venv/bin/activate
          pip install awscli

  filter_master_only_build: &filter_master_only_build
      filters:
        branches:
          only:
          - master
        tags:
          ignore:
          - /.*/

  filter_beta_only_build: &filter_beta_only_build
      filters:
        branches:
          only:
          - beta
        tags:
          ignore:
          - /.*/

  filter_master_or_beta_only_build: &filter_master_or_beta_only_build
      filters:
        branches:
          only:
          - master
          - beta
        tags:
          ignore:
          - /.*/

  filter_branch_only: &filter_branch_only
      filters:
        branches:
          ignore:
          - master
        tags:
          ignore:
          - /.*/

  filter_branch_only_no_swagger: &filter_branch_only_no_swagger
      filters:
        branches:
          ignore:
          - master
          - /swagger-codegen\//
          - /dependabot.*/
        tags:
          ignore:
          - /.*/

  tag_release_only: &tag_release_only
    filters:
      tags:
        only:
        - /[0-9]+\.[0-9]+.[0-9]+\.*/
      branches:
        ignore:
        - /.*/

  tag_beta_only: &tag_beta_only
    filters:
      tags:
        only:
        - /latest-beta.*/
      branches:
        ignore:
        - /.*/

  filter_ignore_release: &filter_ignore_release
    filters:
      tags:
        ignore:
        - /.*/

  contract_repo_branch: &contract_repo_branch
    filters:
      branches:
        only:
        - /api-contract.*/
      tags:
        ignore:
        - /.*/

jobs:
  #############################################################################################
  #                                Cache Docker Images                                        #
  #############################################################################################
  cache_test_server_image:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          command: mkdir -p ~/test_server_image
          name: create directory for the test_server docker image
      - run:
          command: docker build -t testserver -f TestServer.Dockerfile .
          name: build the test_server docker image from TestServer.Dockerfile
      - run:
          command: docker save -o ~/test_server_image/testserver.tar testserver
          name: save the test_server image so it doesn't need building later
      - persist_to_workspace:
          root: ~/.
          paths:
           - test_server_image
  cache_test_runner_image:
    <<: *circle_python
    environment:
      TESTRUNNER_DOCKER_IMAGE: 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner
    steps:
      - setup_remote_docker
      - run:
          name: Update Python Installers
          command: sudo pip install -U setuptools pip pipenv
      - run:
          name: Install awscli
          command: pipenv install awscli --python=python3.6
      - run:
          name: Configure Docker to use AWS
          command: |
            source $(pipenv --venv)/bin/activate
            login="$(aws ecr get-login --no-include-email)"
            ${login}
      - run:
          name: Fetch the test runner
          command: (docker pull 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:${CIRCLE_BRANCH}
              && docker tag 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:${CIRCLE_BRANCH}
              104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:latest)
              || (docker pull 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master
              && docker tag 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master
              104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:latest)
      - run:
          command: mkdir -p ~/test_runner_image
          name: create directory for the test_runner docker image
      - run:
          command: docker save -o ~/test_runner_image/testrunner.tar ${TESTRUNNER_DOCKER_IMAGE}
          name: save the test_runner image so it doesn't need building later
      - persist_to_workspace:
          root: ~/.
          paths:
           - test_runner_image
  #############################################################################################
  #                                Documentation                                              #
  #############################################################################################
  docs:
    docker:
      - image: hrektts/doxygen
    environment:
      - OUTPUT_DIR: "./docs"
    steps:
      - checkout
      - run:
          command: doxygen ar.doxygen
          name: run Doxygen to build the docs
      - store_artifacts:
          path: docs
      - persist_to_workspace:
          root: ./
          paths:
            - docs
  upload_docs:
    <<: *circle_python
    steps:
      - attach_workspace:
          at: ~/docs
      - <<: *install_aws_tools
      - run:
         command: |
                 . venv/bin/activate
                 aws s3 sync --delete --cache-control max-age=3600 ~/docs s3://mbed-cloud-sdk-dotnet-dist/${CIRCLE_BRANCH}/docs
         name: upload docs to s3
  #############################################################################################
  #                                Misc pre jobs                                              #
  #############################################################################################
  tpip:
    docker:
      - image: circleci/python:3.6-jessie-browsers
    steps:
      - checkout
      - run:
         command: python scripts/tpip.py
         name: generate tpip report
      - store_artifacts:
         path: tpip.csv
  assert_news:
    <<: *circle_python
    steps:
      - checkout
      - run:
         command: python scripts/assert_news.py docs/news
         name: Check news file exists
  #############################################################################################
  #                                Version bump                                               #
  #############################################################################################
  version_bump:
    <<: *circle_python
    environment:
      <<: *sdk_environment
    steps:
      - checkout
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - run:
          name: Install Python Libraries
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: bump the version for a dev release
          command: pipenv run auto_version --config=scripts/version.toml --bump=patch --news
      - run:
         command: mkdir -p ~/repo/project
         name: make a directory for the project
      - run:
         command: cp -R ~/project ~/repo/
         name: copy the checked out project into the repo folder.
      - persist_to_workspace:
         root: ~/repo
         paths:
           - project/Deploy.Dockerfile
           - project/docs
           - project/src
           - project/scripts
           - project/Tests/MbedCloudSDK.UnitTests
           - project/build.cake
           - project/build.sh
           - project/CHANGELOG.md
           - project/tools/packages.config
  #############################################################################################
  #                                Build                                                      #
  #############################################################################################
  build:
    <<: *dotnet_mono_docker
    steps:
      - <<: *attach_workspace
      - run:
         command: cd project && ./build.sh --target=CI
         name: build the project
      - persist_to_workspace:
         root: ~/project
         paths:
           - project/tools
           - project/packages
           - project/src/obj
           - project/src/bin/Release
           - project/Tests/MbedCloudSDK.UnitTests/obj
           - project/Tests/MbedCloudSDK.UnitTests/bin
  build_documentation:
    docker:
      - image: circleci/node:jessie-browsers
    steps:
      - run:
          name: Trigger documentation build
          command: |
              curl -X POST --header "Content-Type: application/json" \
               -d '{"branch":"master"}' \
               https://circleci.com/api/v1.1/project/github/${ORGANISATION}/${DOCUMENTATION_PROJECT}/build?circle-token=${CIRCLE_TOKEN}
  #############################################################################################
  #                                Unit Test                                                  #
  #############################################################################################
  unit_test:
    <<: *dotnet_mono_docker
    steps:
      - <<: *attach_workspace
      - run:
         command: cd project && ./build.sh --target=_run_unit_tests
         name: run the unit tests
  # coverage is now handled by appveyor
  # unit_test_coverage:
  #   docker:
  #     - image: circleci/node:10-browsers
  #   steps:
  #     - <<: *attach_workspace
  #     - run:
  #        command: npm install codecov
  #        name: install codecov
  #     # can't install locally so have to go into node_modules
  #     - run:
  #        command: node ~/project/node_modules/codecov/bin/codecov ~/project/project/Tests/MbedCloudSDK.UnitTests/lcov.info
  #        name: upload coverage report to codecov
  #############################################################################################
  #                                Integration Tests                                          #
  #############################################################################################
  integration_test_os2:
    <<: *circle_python
    environment:
      <<: *sdk_environment
    steps:
      - checkout
      - run:
          name: Setting up the environment for os2
          command: >
            export MBED_CLOUD_SDK_API_KEY=${MBED_CLOUD_SDK_API_KEY_OS2}
            && echo "export MBED_CLOUD_SDK_API_KEY=${MBED_CLOUD_SDK_API_KEY}" >> ${BASH_ENV}
            && export MBED_CLOUD_SDK_HOST=${MBED_CLOUD_SDK_HOST_OS2}
            && echo "export MBED_CLOUD_SDK_HOST=${MBED_CLOUD_SDK_HOST}" >> ${BASH_ENV}
      - <<: *attach_workspace
      - setup_remote_docker
      - run: docker load -i ./test_runner_image/testrunner.tar
      - run: docker load -i ./test_server_image/testserver.tar
      - run: docker-compose up --exit-code-from testrunner
  integration_test_production:
    <<: *circle_python
    environment:
      <<: *sdk_environment
    steps:
      - checkout
      - run:
          name: Setting up the environment for production
          command: >
            export MBED_CLOUD_SDK_API_KEY=${MBED_CLOUD_SDK_API_KEY_PROD}
            && echo "export MBED_CLOUD_SDK_API_KEY=${MBED_CLOUD_SDK_API_KEY}" >> ${BASH_ENV}
            && export MBED_CLOUD_SDK_HOST=${MBED_CLOUD_SDK_HOST_PROD}
            && echo "export MBED_CLOUD_SDK_HOST=${MBED_CLOUD_SDK_HOST}" >> ${BASH_ENV}
      - <<: *attach_workspace
      - setup_remote_docker
      - run: docker load -i ./test_runner_image/testrunner.tar
      - run: docker load -i ./test_server_image/testserver.tar
      - run: docker-compose up --exit-code-from testrunner
  #############################################################################################
  #                                Artifactory Deploy                                         #
  #############################################################################################
  artifactory_deploy:
    <<: *circle_python
    environment:
      <<: *sdk_environment
    steps:
      - setup_remote_docker
      - <<: *install_aws_tools
      - <<: *attach_workspace
      - run: cd ./project && docker build -t sdk_deploy -f Deploy.Dockerfile .
      - run: |
            . venv/bin/activate
            aws s3 sync s3://artifactory-store .
      - run: docker build -t artifactory ~/project/proxy/
      - run: docker run -d --name artifactory artifactory && sleep 10
      - run:
          name: Deploying the SDK to Artifactory and beyond
          command: docker run --rm --network container:artifactory sdk_deploy ./build.sh -Target=_publish -nuget_api_key=${ARTIFACTORY_API_KEY} -nuget_source=${ARTIFACTORY_URL}/api/nuget/mbed-cloud-sdk-dotnet-snapshots
  #############################################################################################
  #                                Tag for release                                            #
  #############################################################################################
  git_tag_release:
    <<: *circle_python
    steps:
      - checkout
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - run:
          name: Install Python Libraries
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: bump the version for a dev release
          command: pipenv run auto_version --config=scripts/version.toml --bump=patch --news --release
      - run:
          name: run tag script
          command: python ./scripts/tag_and_release.py tag $(pipenv run auto_version --config=scripts/version.toml)
  #############################################################################################
  #                                Tag for beta                                               #
  #############################################################################################
  git_tag_release_beta:
    <<: *circle_python
    steps:
      - checkout
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - run:
          name: Install Python Libraries
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: bump the version for a beta release
          command: pipenv run auto_version --config=scripts/version_beta.toml --bump=patch --news
      - run:
          name: run beta tag script
          command: python ./scripts/tag_and_release.py beta $(pipenv run auto_version --config=scripts/version_beta.toml)
  #############################################################################################
  #                                Generation                                                 #
  #############################################################################################
  commit_back_generation:
    <<: *dotnet_mono_docker
    steps:
      - checkout
      - run:
          name: Run generator
          command: ./build.sh --target="generation_debug"
      - run:
          name: Build
          command: ./build.sh --target=CI
      - run:
          name: Test
          command: ./build.sh --target=_run_unit_tests
      - run:
          name: commit changes
          command: |
              git add src/SDK/Foundation
              git commit --message "New Foundation interface changes" || true
              git push -q https://${GITHUB_TOKEN}@github.com/ARMmbed/${CIRCLE_PROJECT_REPONAME}.git ${CIRCLE_BRANCH}
  #############################################################################################
  #                                Common Release Jobs                                        #
  #############################################################################################
  build_pack_deploy:
    <<: *dotnet_mono_docker
    steps:
      - <<: *attach_workspace
      - run:
         command: cd project && ./build.sh --target=Build-Pack-Publish
         name: build, pack and publish nuget package
  #############################################################################################
  #                                Production Release Jobs                                    #
  #############################################################################################
  version_bump_release:
    <<: *circle_python
    steps:
      - checkout
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - run:
          name: Install Python Libraries
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: bump the version for a production release
          command: pipenv run auto_version --config=scripts/version.toml --bump=patch --news --release
      - run:
          command: mkdir -p ~/repo/project
          name: make a directory for the project
      - run:
          command: cp -R ~/project ~/repo/
          name: copy the checked out project into the repo folder.
      - persist_to_workspace:
          root: ~/repo
          paths:
            - project/src
            - project/build.cake
            - project/build.sh
  commit_news_and_version:
    <<: *circle_python
    environment:
      <<: *sdk_environment
    steps:
      - checkout
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - run:
          name: Install Python Libraries
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: bump the version for a production release
          command: pipenv run auto_version --config=scripts/version.toml --bump=patch --news --release
      - run:
          name: run towncrier to generate news file
          command: pipenv run towncrier --yes --name="" --version=$(cd ../../ && pipenv run autoversion --config=scripts/version.toml)
          working_directory: docs/news
      - run:
          name: tag and release
          command: python ./scripts/tag_and_release.py news $(pipenv run autoversion --config=scripts/version.toml)
  #############################################################################################
  #                                Beta Release Jobs                                          #
  #############################################################################################
  commit_news_and_version_beta:
    <<: *circle_python
    environment:
      <<: *sdk_environment
    steps:
      - checkout
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - run:
          name: Install Python Libraries
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: bump the version for a beta release
          command: pipenv run auto_version --config=scripts/version_beta.toml --bump=patch --news
      - run:
          name: tag and release
          command: python ./scripts/tag_and_release.py slack $(pipenv run autoversion --config=scripts/version_beta.toml)
  version_bump_beta:
    <<: *circle_python
    steps:
      - checkout
      - run:
          name: Update Python Installers
          command: sudo python -m pip install -U setuptools pip pipenv
      - run:
          name: Install Python Libraries
          command: pipenv run pip install -r scripts/requirements.txt
      - run:
          name: bump the version for a beta release
          command: pipenv run auto_version --config=scripts/version_beta.toml --bump=patch --news
      - run:
          command: mkdir -p ~/repo/project
          name: make a directory for the project
      - run:
          command: cp -R ~/project ~/repo/
          name: copy the checked out project into the repo folder.
      - persist_to_workspace:
          root: ~/repo
          paths:
            - project/src
            - project/build.cake
            - project/build.sh
version: 2
#############################################################################################
#                                Workflows                                                  #
#############################################################################################
workflows:
  generation_workflow:
    jobs:
      - commit_back_generation:
          <<: *contract_repo_branch
  csharp_sdk_workflow:
    jobs:
      - cache_test_server_image:
          <<: *filter_ignore_release
      - cache_test_runner_image:
          <<: *filter_ignore_release
      - assert_news:
          <<: *filter_branch_only_no_swagger
      - docs:
          <<: *filter_ignore_release
      - upload_docs:
          requires:
          - docs
          <<: *filter_master_or_beta_only_build
      - tpip:
          <<: *filter_master_only_build
      - version_bump:
          requires:
          - cache_test_runner_image
          <<: *filter_ignore_release
      - build:
          requires:
          - cache_test_server_image
          - cache_test_runner_image
          - version_bump
          <<: *filter_ignore_release
      - build_documentation:
          requires:
          - build
          <<: *filter_master_or_beta_only_build
      - integration_test_os2:
          requires:
          - build
          <<: *filter_ignore_release
      - integration_test_production:
          requires:
          - build
          <<: *filter_ignore_release
      - unit_test:
          requires:
          - build
          <<: *filter_ignore_release
      # coverage is now handled by appveyor
      # - unit_test_coverage:
      #     requires:
      #     - unit_test
      - artifactory_deploy:
          requires:
          - unit_test
          - integration_test_os2
          - integration_test_production
          <<: *filter_master_or_beta_only_build
      - release_to_nuget:
          requires:
          - unit_test
          - integration_test_production
          type: approval
          <<: *filter_master_only_build
      - release_beta:
          requires:
          - unit_test
          - integration_test_production
          type: approval
          <<: *filter_beta_only_build
      - git_tag_release:
          requires:
          - release_to_nuget
          <<: *filter_master_only_build
      - git_tag_release_beta:
          requires:
          - release_beta
          <<: *filter_beta_only_build
  csharp_sdk_workflow_release:
    jobs:
      - version_bump_release:
          <<: *tag_release_only
      - build_pack_deploy:
          requires:
          - version_bump_release
          <<: *tag_release_only
      - commit_news_and_version:
          requires:
          - version_bump_release
          <<: *tag_release_only
  csharp_sdk_workflow_beta:
    jobs:
      - version_bump_beta:
          <<: *tag_beta_only
      - build_pack_deploy:
          requires:
          - version_bump_beta
          <<: *tag_beta_only
      - commit_news_and_version_beta:
          requires:
          - version_bump_beta
          <<: *tag_beta_only
  version: 2
