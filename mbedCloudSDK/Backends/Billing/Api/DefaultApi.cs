/* 
 * mbed-billing REST API documentation for API-server
 *
 * This document contains the public REST API definitions of the mbed-billing service's API server component.
 *
 * OpenAPI spec version: 1.3.6-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using billing.Client;
using billing.Model;

namespace billing.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Build information
        /// </summary>
        /// <remarks>
        /// Get a full build information of the running system.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BuildInfo</returns>
        BuildInfo PublicV1BuildGet ();

        /// <summary>
        /// Build information
        /// </summary>
        /// <remarks>
        /// Get a full build information of the running system.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BuildInfo</returns>
        ApiResponse<BuildInfo> PublicV1BuildGetWithHttpInfo ();
        /// <summary>
        /// Service health
        /// </summary>
        /// <remarks>
        /// Check current service health
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Health</returns>
        Health PublicV1HealthGet ();

        /// <summary>
        /// Service health
        /// </summary>
        /// <remarks>
        /// Check current service health
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Health</returns>
        ApiResponse<Health> PublicV1HealthGetWithHttpInfo ();
        /// <summary>
        /// List of accounts
        /// </summary>
        /// <remarks>
        /// Get a list of all accounts.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> V1AccountsGet ();

        /// <summary>
        /// List of accounts
        /// </summary>
        /// <remarks>
        /// Get a list of all accounts.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> V1AccountsGetWithHttpInfo ();
        /// <summary>
        /// Active devices per account
        /// </summary>
        /// <remarks>
        /// Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="from">in epoch milliseconds, inclusive.</param>
        /// <param name="to">in epoch milliseconds, exclusive. Must be greater than &#39;from&#39; parameter and be on the same calendar month as &#39;from&#39; parameter (can be also the absolute beginning of the next month as this parameter is exclusive).</param>
        /// <returns>List&lt;ActiveDevice&gt;</returns>
        List<ActiveDevice> V1ActivedevicesGet (string account, long? from, long? to);

        /// <summary>
        /// Active devices per account
        /// </summary>
        /// <remarks>
        /// Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="from">in epoch milliseconds, inclusive.</param>
        /// <param name="to">in epoch milliseconds, exclusive. Must be greater than &#39;from&#39; parameter and be on the same calendar month as &#39;from&#39; parameter (can be also the absolute beginning of the next month as this parameter is exclusive).</param>
        /// <returns>ApiResponse of List&lt;ActiveDevice&gt;</returns>
        ApiResponse<List<ActiveDevice>> V1ActivedevicesGetWithHttpInfo (string account, long? from, long? to);
        /// <summary>
        /// Active devices
        /// </summary>
        /// <remarks>
        /// Get active devices for an account in import log
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="importId">import id</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> V1ImportsActivedevicesGet (string account, long? importId);

        /// <summary>
        /// Active devices
        /// </summary>
        /// <remarks>
        /// Get active devices for an account in import log
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="importId">import id</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> V1ImportsActivedevicesGetWithHttpInfo (string account, long? importId);
        /// <summary>
        /// Import log
        /// </summary>
        /// <remarks>
        /// Get full import log for a single account.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <returns>List&lt;ImportLog&gt;</returns>
        List<ImportLog> V1ImportsGet (string account);

        /// <summary>
        /// Import log
        /// </summary>
        /// <remarks>
        /// Get full import log for a single account.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <returns>ApiResponse of List&lt;ImportLog&gt;</returns>
        ApiResponse<List<ImportLog>> V1ImportsGetWithHttpInfo (string account);
        /// <summary>
        /// System metrics
        /// </summary>
        /// <remarks>
        /// Get various internal metrics of the service.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Metrics</returns>
        Metrics V1MetricsGet ();

        /// <summary>
        /// System metrics
        /// </summary>
        /// <remarks>
        /// Get various internal metrics of the service.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Metrics</returns>
        ApiResponse<Metrics> V1MetricsGetWithHttpInfo ();
        /// <summary>
        /// Active devices per account in reporting
        /// </summary>
        /// <remarks>
        /// Get active devices for a commercial account with specified month.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="month">year and month</param>
        /// <returns>List&lt;ActiveDevice&gt;</returns>
        List<ActiveDevice> V1ReportActivedevicesGet (string account, string month);

        /// <summary>
        /// Active devices per account in reporting
        /// </summary>
        /// <remarks>
        /// Get active devices for a commercial account with specified month.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="month">year and month</param>
        /// <returns>ApiResponse of List&lt;ActiveDevice&gt;</returns>
        ApiResponse<List<ActiveDevice>> V1ReportActivedevicesGetWithHttpInfo (string account, string month);
        /// <summary>
        /// Billing report
        /// </summary>
        /// <remarks>
        /// Generate billing report for all commercial accounts.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="format">report format (optional, default to json)</param>
        /// <returns>Report</returns>
        Report V1ReportGet (string month, string format = null);

        /// <summary>
        /// Billing report
        /// </summary>
        /// <remarks>
        /// Generate billing report for all commercial accounts.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="format">report format (optional, default to json)</param>
        /// <returns>ApiResponse of Report</returns>
        ApiResponse<Report> V1ReportGetWithHttpInfo (string month, string format = null);
        /// <summary>
        /// Known services
        /// </summary>
        /// <remarks>
        /// Get a full list of known services and when they have last updated data to the system.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Service&gt;</returns>
        List<Service> V1ServicesGet ();

        /// <summary>
        /// Known services
        /// </summary>
        /// <remarks>
        /// Get a full list of known services and when they have last updated data to the system.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Service&gt;</returns>
        ApiResponse<List<Service>> V1ServicesGetWithHttpInfo ();
        /// <summary>
        /// Account billing data
        /// </summary>
        /// <remarks>
        /// Get account billing data for one or multiple accounts for a given month.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="account">account id (optional)</param>
        /// <returns>List&lt;AccountBillingData&gt;</returns>
        List<AccountBillingData> V1StatsGet (string month, string account = null);

        /// <summary>
        /// Account billing data
        /// </summary>
        /// <remarks>
        /// Get account billing data for one or multiple accounts for a given month.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="account">account id (optional)</param>
        /// <returns>ApiResponse of List&lt;AccountBillingData&gt;</returns>
        ApiResponse<List<AccountBillingData>> V1StatsGetWithHttpInfo (string month, string account = null);
        /// <summary>
        /// Known time series
        /// </summary>
        /// <remarks>
        /// Get a full list of consecutive known time series grouped by service and timestamp.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ServiceTimeSeries&gt;</returns>
        List<ServiceTimeSeries> V1TimeseriesGet ();

        /// <summary>
        /// Known time series
        /// </summary>
        /// <remarks>
        /// Get a full list of consecutive known time series grouped by service and timestamp.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ServiceTimeSeries&gt;</returns>
        ApiResponse<List<ServiceTimeSeries>> V1TimeseriesGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Build information
        /// </summary>
        /// <remarks>
        /// Get a full build information of the running system.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BuildInfo</returns>
        System.Threading.Tasks.Task<BuildInfo> PublicV1BuildGetAsync ();

        /// <summary>
        /// Build information
        /// </summary>
        /// <remarks>
        /// Get a full build information of the running system.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BuildInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildInfo>> PublicV1BuildGetAsyncWithHttpInfo ();
        /// <summary>
        /// Service health
        /// </summary>
        /// <remarks>
        /// Check current service health
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Health</returns>
        System.Threading.Tasks.Task<Health> PublicV1HealthGetAsync ();

        /// <summary>
        /// Service health
        /// </summary>
        /// <remarks>
        /// Check current service health
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Health)</returns>
        System.Threading.Tasks.Task<ApiResponse<Health>> PublicV1HealthGetAsyncWithHttpInfo ();
        /// <summary>
        /// List of accounts
        /// </summary>
        /// <remarks>
        /// Get a list of all accounts.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> V1AccountsGetAsync ();

        /// <summary>
        /// List of accounts
        /// </summary>
        /// <remarks>
        /// Get a list of all accounts.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> V1AccountsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Active devices per account
        /// </summary>
        /// <remarks>
        /// Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="from">in epoch milliseconds, inclusive.</param>
        /// <param name="to">in epoch milliseconds, exclusive. Must be greater than &#39;from&#39; parameter and be on the same calendar month as &#39;from&#39; parameter (can be also the absolute beginning of the next month as this parameter is exclusive).</param>
        /// <returns>Task of List&lt;ActiveDevice&gt;</returns>
        System.Threading.Tasks.Task<List<ActiveDevice>> V1ActivedevicesGetAsync (string account, long? from, long? to);

        /// <summary>
        /// Active devices per account
        /// </summary>
        /// <remarks>
        /// Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="from">in epoch milliseconds, inclusive.</param>
        /// <param name="to">in epoch milliseconds, exclusive. Must be greater than &#39;from&#39; parameter and be on the same calendar month as &#39;from&#39; parameter (can be also the absolute beginning of the next month as this parameter is exclusive).</param>
        /// <returns>Task of ApiResponse (List&lt;ActiveDevice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActiveDevice>>> V1ActivedevicesGetAsyncWithHttpInfo (string account, long? from, long? to);
        /// <summary>
        /// Active devices
        /// </summary>
        /// <remarks>
        /// Get active devices for an account in import log
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="importId">import id</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> V1ImportsActivedevicesGetAsync (string account, long? importId);

        /// <summary>
        /// Active devices
        /// </summary>
        /// <remarks>
        /// Get active devices for an account in import log
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="importId">import id</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> V1ImportsActivedevicesGetAsyncWithHttpInfo (string account, long? importId);
        /// <summary>
        /// Import log
        /// </summary>
        /// <remarks>
        /// Get full import log for a single account.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <returns>Task of List&lt;ImportLog&gt;</returns>
        System.Threading.Tasks.Task<List<ImportLog>> V1ImportsGetAsync (string account);

        /// <summary>
        /// Import log
        /// </summary>
        /// <remarks>
        /// Get full import log for a single account.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <returns>Task of ApiResponse (List&lt;ImportLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImportLog>>> V1ImportsGetAsyncWithHttpInfo (string account);
        /// <summary>
        /// System metrics
        /// </summary>
        /// <remarks>
        /// Get various internal metrics of the service.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Metrics</returns>
        System.Threading.Tasks.Task<Metrics> V1MetricsGetAsync ();

        /// <summary>
        /// System metrics
        /// </summary>
        /// <remarks>
        /// Get various internal metrics of the service.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Metrics)</returns>
        System.Threading.Tasks.Task<ApiResponse<Metrics>> V1MetricsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Active devices per account in reporting
        /// </summary>
        /// <remarks>
        /// Get active devices for a commercial account with specified month.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="month">year and month</param>
        /// <returns>Task of List&lt;ActiveDevice&gt;</returns>
        System.Threading.Tasks.Task<List<ActiveDevice>> V1ReportActivedevicesGetAsync (string account, string month);

        /// <summary>
        /// Active devices per account in reporting
        /// </summary>
        /// <remarks>
        /// Get active devices for a commercial account with specified month.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="month">year and month</param>
        /// <returns>Task of ApiResponse (List&lt;ActiveDevice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActiveDevice>>> V1ReportActivedevicesGetAsyncWithHttpInfo (string account, string month);
        /// <summary>
        /// Billing report
        /// </summary>
        /// <remarks>
        /// Generate billing report for all commercial accounts.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="format">report format (optional, default to json)</param>
        /// <returns>Task of Report</returns>
        System.Threading.Tasks.Task<Report> V1ReportGetAsync (string month, string format = null);

        /// <summary>
        /// Billing report
        /// </summary>
        /// <remarks>
        /// Generate billing report for all commercial accounts.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="format">report format (optional, default to json)</param>
        /// <returns>Task of ApiResponse (Report)</returns>
        System.Threading.Tasks.Task<ApiResponse<Report>> V1ReportGetAsyncWithHttpInfo (string month, string format = null);
        /// <summary>
        /// Known services
        /// </summary>
        /// <remarks>
        /// Get a full list of known services and when they have last updated data to the system.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Service&gt;</returns>
        System.Threading.Tasks.Task<List<Service>> V1ServicesGetAsync ();

        /// <summary>
        /// Known services
        /// </summary>
        /// <remarks>
        /// Get a full list of known services and when they have last updated data to the system.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Service&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Service>>> V1ServicesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Account billing data
        /// </summary>
        /// <remarks>
        /// Get account billing data for one or multiple accounts for a given month.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="account">account id (optional)</param>
        /// <returns>Task of List&lt;AccountBillingData&gt;</returns>
        System.Threading.Tasks.Task<List<AccountBillingData>> V1StatsGetAsync (string month, string account = null);

        /// <summary>
        /// Account billing data
        /// </summary>
        /// <remarks>
        /// Get account billing data for one or multiple accounts for a given month.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="account">account id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AccountBillingData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AccountBillingData>>> V1StatsGetAsyncWithHttpInfo (string month, string account = null);
        /// <summary>
        /// Known time series
        /// </summary>
        /// <remarks>
        /// Get a full list of consecutive known time series grouped by service and timestamp.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ServiceTimeSeries&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceTimeSeries>> V1TimeseriesGetAsync ();

        /// <summary>
        /// Known time series
        /// </summary>
        /// <remarks>
        /// Get a full list of consecutive known time series grouped by service and timestamp.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ServiceTimeSeries&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceTimeSeries>>> V1TimeseriesGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private billing.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = billing.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = billing.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public billing.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Build information Get a full build information of the running system.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BuildInfo</returns>
        public BuildInfo PublicV1BuildGet ()
        {
             ApiResponse<BuildInfo> localVarResponse = PublicV1BuildGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Build information Get a full build information of the running system.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BuildInfo</returns>
        public ApiResponse< BuildInfo > PublicV1BuildGetWithHttpInfo ()
        {

            var localVarPath = "/public/v1/build";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicV1BuildGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildInfo)));
            
        }

        /// <summary>
        /// Build information Get a full build information of the running system.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BuildInfo</returns>
        public async System.Threading.Tasks.Task<BuildInfo> PublicV1BuildGetAsync ()
        {
             ApiResponse<BuildInfo> localVarResponse = await PublicV1BuildGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Build information Get a full build information of the running system.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BuildInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildInfo>> PublicV1BuildGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/v1/build";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicV1BuildGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildInfo)));
            
        }

        /// <summary>
        /// Service health Check current service health
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Health</returns>
        public Health PublicV1HealthGet ()
        {
             ApiResponse<Health> localVarResponse = PublicV1HealthGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Service health Check current service health
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Health</returns>
        public ApiResponse< Health > PublicV1HealthGetWithHttpInfo ()
        {

            var localVarPath = "/public/v1/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicV1HealthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Health>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Health) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Health)));
            
        }

        /// <summary>
        /// Service health Check current service health
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Health</returns>
        public async System.Threading.Tasks.Task<Health> PublicV1HealthGetAsync ()
        {
             ApiResponse<Health> localVarResponse = await PublicV1HealthGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Service health Check current service health
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Health)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Health>> PublicV1HealthGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/v1/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublicV1HealthGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Health>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Health) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Health)));
            
        }

        /// <summary>
        /// List of accounts Get a list of all accounts.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> V1AccountsGet ()
        {
             ApiResponse<List<string>> localVarResponse = V1AccountsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of accounts Get a list of all accounts.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > V1AccountsGetWithHttpInfo ()
        {

            var localVarPath = "/v1/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// List of accounts Get a list of all accounts.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> V1AccountsGetAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await V1AccountsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of accounts Get a list of all accounts.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> V1AccountsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Active devices per account Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="from">in epoch milliseconds, inclusive.</param>
        /// <param name="to">in epoch milliseconds, exclusive. Must be greater than &#39;from&#39; parameter and be on the same calendar month as &#39;from&#39; parameter (can be also the absolute beginning of the next month as this parameter is exclusive).</param>
        /// <returns>List&lt;ActiveDevice&gt;</returns>
        public List<ActiveDevice> V1ActivedevicesGet (string account, long? from, long? to)
        {
             ApiResponse<List<ActiveDevice>> localVarResponse = V1ActivedevicesGetWithHttpInfo(account, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Active devices per account Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="from">in epoch milliseconds, inclusive.</param>
        /// <param name="to">in epoch milliseconds, exclusive. Must be greater than &#39;from&#39; parameter and be on the same calendar month as &#39;from&#39; parameter (can be also the absolute beginning of the next month as this parameter is exclusive).</param>
        /// <returns>ApiResponse of List&lt;ActiveDevice&gt;</returns>
        public ApiResponse< List<ActiveDevice> > V1ActivedevicesGetWithHttpInfo (string account, long? from, long? to)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DefaultApi->V1ActivedevicesGet");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling DefaultApi->V1ActivedevicesGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling DefaultApi->V1ActivedevicesGet");

            var localVarPath = "/v1/activedevices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (account != null) localVarQueryParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ActivedevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActiveDevice>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ActiveDevice>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActiveDevice>)));
            
        }

        /// <summary>
        /// Active devices per account Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="from">in epoch milliseconds, inclusive.</param>
        /// <param name="to">in epoch milliseconds, exclusive. Must be greater than &#39;from&#39; parameter and be on the same calendar month as &#39;from&#39; parameter (can be also the absolute beginning of the next month as this parameter is exclusive).</param>
        /// <returns>Task of List&lt;ActiveDevice&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActiveDevice>> V1ActivedevicesGetAsync (string account, long? from, long? to)
        {
             ApiResponse<List<ActiveDevice>> localVarResponse = await V1ActivedevicesGetAsyncWithHttpInfo(account, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Active devices per account Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="from">in epoch milliseconds, inclusive.</param>
        /// <param name="to">in epoch milliseconds, exclusive. Must be greater than &#39;from&#39; parameter and be on the same calendar month as &#39;from&#39; parameter (can be also the absolute beginning of the next month as this parameter is exclusive).</param>
        /// <returns>Task of ApiResponse (List&lt;ActiveDevice&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ActiveDevice>>> V1ActivedevicesGetAsyncWithHttpInfo (string account, long? from, long? to)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DefaultApi->V1ActivedevicesGet");
            // verify the required parameter 'from' is set
            if (from == null)
                throw new ApiException(400, "Missing required parameter 'from' when calling DefaultApi->V1ActivedevicesGet");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling DefaultApi->V1ActivedevicesGet");

            var localVarPath = "/v1/activedevices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (account != null) localVarQueryParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ActivedevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActiveDevice>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ActiveDevice>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActiveDevice>)));
            
        }

        /// <summary>
        /// Active devices Get active devices for an account in import log
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="importId">import id</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> V1ImportsActivedevicesGet (string account, long? importId)
        {
             ApiResponse<List<string>> localVarResponse = V1ImportsActivedevicesGetWithHttpInfo(account, importId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Active devices Get active devices for an account in import log
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="importId">import id</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > V1ImportsActivedevicesGetWithHttpInfo (string account, long? importId)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DefaultApi->V1ImportsActivedevicesGet");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling DefaultApi->V1ImportsActivedevicesGet");

            var localVarPath = "/v1/imports/activedevices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (account != null) localVarQueryParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // query parameter
            if (importId != null) localVarQueryParams.Add("import_id", Configuration.ApiClient.ParameterToString(importId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ImportsActivedevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Active devices Get active devices for an account in import log
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="importId">import id</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> V1ImportsActivedevicesGetAsync (string account, long? importId)
        {
             ApiResponse<List<string>> localVarResponse = await V1ImportsActivedevicesGetAsyncWithHttpInfo(account, importId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Active devices Get active devices for an account in import log
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="importId">import id</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> V1ImportsActivedevicesGetAsyncWithHttpInfo (string account, long? importId)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DefaultApi->V1ImportsActivedevicesGet");
            // verify the required parameter 'importId' is set
            if (importId == null)
                throw new ApiException(400, "Missing required parameter 'importId' when calling DefaultApi->V1ImportsActivedevicesGet");

            var localVarPath = "/v1/imports/activedevices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (account != null) localVarQueryParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // query parameter
            if (importId != null) localVarQueryParams.Add("import_id", Configuration.ApiClient.ParameterToString(importId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ImportsActivedevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Import log Get full import log for a single account.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <returns>List&lt;ImportLog&gt;</returns>
        public List<ImportLog> V1ImportsGet (string account)
        {
             ApiResponse<List<ImportLog>> localVarResponse = V1ImportsGetWithHttpInfo(account);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import log Get full import log for a single account.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <returns>ApiResponse of List&lt;ImportLog&gt;</returns>
        public ApiResponse< List<ImportLog> > V1ImportsGetWithHttpInfo (string account)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DefaultApi->V1ImportsGet");

            var localVarPath = "/v1/imports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (account != null) localVarQueryParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ImportsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImportLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ImportLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImportLog>)));
            
        }

        /// <summary>
        /// Import log Get full import log for a single account.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <returns>Task of List&lt;ImportLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<ImportLog>> V1ImportsGetAsync (string account)
        {
             ApiResponse<List<ImportLog>> localVarResponse = await V1ImportsGetAsyncWithHttpInfo(account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import log Get full import log for a single account.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <returns>Task of ApiResponse (List&lt;ImportLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ImportLog>>> V1ImportsGetAsyncWithHttpInfo (string account)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DefaultApi->V1ImportsGet");

            var localVarPath = "/v1/imports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (account != null) localVarQueryParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ImportsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImportLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ImportLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImportLog>)));
            
        }

        /// <summary>
        /// System metrics Get various internal metrics of the service.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Metrics</returns>
        public Metrics V1MetricsGet ()
        {
             ApiResponse<Metrics> localVarResponse = V1MetricsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// System metrics Get various internal metrics of the service.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Metrics</returns>
        public ApiResponse< Metrics > V1MetricsGetWithHttpInfo ()
        {

            var localVarPath = "/v1/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetricsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Metrics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Metrics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Metrics)));
            
        }

        /// <summary>
        /// System metrics Get various internal metrics of the service.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Metrics</returns>
        public async System.Threading.Tasks.Task<Metrics> V1MetricsGetAsync ()
        {
             ApiResponse<Metrics> localVarResponse = await V1MetricsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// System metrics Get various internal metrics of the service.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Metrics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Metrics>> V1MetricsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MetricsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Metrics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Metrics) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Metrics)));
            
        }

        /// <summary>
        /// Active devices per account in reporting Get active devices for a commercial account with specified month.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="month">year and month</param>
        /// <returns>List&lt;ActiveDevice&gt;</returns>
        public List<ActiveDevice> V1ReportActivedevicesGet (string account, string month)
        {
             ApiResponse<List<ActiveDevice>> localVarResponse = V1ReportActivedevicesGetWithHttpInfo(account, month);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Active devices per account in reporting Get active devices for a commercial account with specified month.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="month">year and month</param>
        /// <returns>ApiResponse of List&lt;ActiveDevice&gt;</returns>
        public ApiResponse< List<ActiveDevice> > V1ReportActivedevicesGetWithHttpInfo (string account, string month)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DefaultApi->V1ReportActivedevicesGet");
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->V1ReportActivedevicesGet");

            var localVarPath = "/v1/report/activedevices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (account != null) localVarQueryParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // query parameter
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ReportActivedevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActiveDevice>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ActiveDevice>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActiveDevice>)));
            
        }

        /// <summary>
        /// Active devices per account in reporting Get active devices for a commercial account with specified month.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="month">year and month</param>
        /// <returns>Task of List&lt;ActiveDevice&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActiveDevice>> V1ReportActivedevicesGetAsync (string account, string month)
        {
             ApiResponse<List<ActiveDevice>> localVarResponse = await V1ReportActivedevicesGetAsyncWithHttpInfo(account, month);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Active devices per account in reporting Get active devices for a commercial account with specified month.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account id</param>
        /// <param name="month">year and month</param>
        /// <returns>Task of ApiResponse (List&lt;ActiveDevice&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ActiveDevice>>> V1ReportActivedevicesGetAsyncWithHttpInfo (string account, string month)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DefaultApi->V1ReportActivedevicesGet");
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->V1ReportActivedevicesGet");

            var localVarPath = "/v1/report/activedevices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (account != null) localVarQueryParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // query parameter
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ReportActivedevicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ActiveDevice>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ActiveDevice>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ActiveDevice>)));
            
        }

        /// <summary>
        /// Billing report Generate billing report for all commercial accounts.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="format">report format (optional, default to json)</param>
        /// <returns>Report</returns>
        public Report V1ReportGet (string month, string format = null)
        {
             ApiResponse<Report> localVarResponse = V1ReportGetWithHttpInfo(month, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Billing report Generate billing report for all commercial accounts.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="format">report format (optional, default to json)</param>
        /// <returns>ApiResponse of Report</returns>
        public ApiResponse< Report > V1ReportGetWithHttpInfo (string month, string format = null)
        {
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->V1ReportGet");

            var localVarPath = "/v1/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/zip"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ReportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Report>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Report) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Report)));
            
        }

        /// <summary>
        /// Billing report Generate billing report for all commercial accounts.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="format">report format (optional, default to json)</param>
        /// <returns>Task of Report</returns>
        public async System.Threading.Tasks.Task<Report> V1ReportGetAsync (string month, string format = null)
        {
             ApiResponse<Report> localVarResponse = await V1ReportGetAsyncWithHttpInfo(month, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Billing report Generate billing report for all commercial accounts.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="format">report format (optional, default to json)</param>
        /// <returns>Task of ApiResponse (Report)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Report>> V1ReportGetAsyncWithHttpInfo (string month, string format = null)
        {
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->V1ReportGet");

            var localVarPath = "/v1/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/zip"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ReportGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Report>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Report) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Report)));
            
        }

        /// <summary>
        /// Known services Get a full list of known services and when they have last updated data to the system.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Service&gt;</returns>
        public List<Service> V1ServicesGet ()
        {
             ApiResponse<List<Service>> localVarResponse = V1ServicesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Known services Get a full list of known services and when they have last updated data to the system.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Service&gt;</returns>
        public ApiResponse< List<Service> > V1ServicesGetWithHttpInfo ()
        {

            var localVarPath = "/v1/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ServicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Service>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Service>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Service>)));
            
        }

        /// <summary>
        /// Known services Get a full list of known services and when they have last updated data to the system.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Service&gt;</returns>
        public async System.Threading.Tasks.Task<List<Service>> V1ServicesGetAsync ()
        {
             ApiResponse<List<Service>> localVarResponse = await V1ServicesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Known services Get a full list of known services and when they have last updated data to the system.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Service&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Service>>> V1ServicesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ServicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Service>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Service>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Service>)));
            
        }

        /// <summary>
        /// Account billing data Get account billing data for one or multiple accounts for a given month.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="account">account id (optional)</param>
        /// <returns>List&lt;AccountBillingData&gt;</returns>
        public List<AccountBillingData> V1StatsGet (string month, string account = null)
        {
             ApiResponse<List<AccountBillingData>> localVarResponse = V1StatsGetWithHttpInfo(month, account);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account billing data Get account billing data for one or multiple accounts for a given month.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="account">account id (optional)</param>
        /// <returns>ApiResponse of List&lt;AccountBillingData&gt;</returns>
        public ApiResponse< List<AccountBillingData> > V1StatsGetWithHttpInfo (string month, string account = null)
        {
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->V1StatsGet");

            var localVarPath = "/v1/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (account != null) localVarQueryParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1StatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AccountBillingData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AccountBillingData>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AccountBillingData>)));
            
        }

        /// <summary>
        /// Account billing data Get account billing data for one or multiple accounts for a given month.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="account">account id (optional)</param>
        /// <returns>Task of List&lt;AccountBillingData&gt;</returns>
        public async System.Threading.Tasks.Task<List<AccountBillingData>> V1StatsGetAsync (string month, string account = null)
        {
             ApiResponse<List<AccountBillingData>> localVarResponse = await V1StatsGetAsyncWithHttpInfo(month, account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account billing data Get account billing data for one or multiple accounts for a given month.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">year and month</param>
        /// <param name="account">account id (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AccountBillingData&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AccountBillingData>>> V1StatsGetAsyncWithHttpInfo (string month, string account = null)
        {
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->V1StatsGet");

            var localVarPath = "/v1/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (month != null) localVarQueryParams.Add("month", Configuration.ApiClient.ParameterToString(month)); // query parameter
            if (account != null) localVarQueryParams.Add("account", Configuration.ApiClient.ParameterToString(account)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1StatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AccountBillingData>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AccountBillingData>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AccountBillingData>)));
            
        }

        /// <summary>
        /// Known time series Get a full list of consecutive known time series grouped by service and timestamp.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ServiceTimeSeries&gt;</returns>
        public List<ServiceTimeSeries> V1TimeseriesGet ()
        {
             ApiResponse<List<ServiceTimeSeries>> localVarResponse = V1TimeseriesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Known time series Get a full list of consecutive known time series grouped by service and timestamp.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ServiceTimeSeries&gt;</returns>
        public ApiResponse< List<ServiceTimeSeries> > V1TimeseriesGetWithHttpInfo ()
        {

            var localVarPath = "/v1/timeseries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1TimeseriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ServiceTimeSeries>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ServiceTimeSeries>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ServiceTimeSeries>)));
            
        }

        /// <summary>
        /// Known time series Get a full list of consecutive known time series grouped by service and timestamp.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ServiceTimeSeries&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceTimeSeries>> V1TimeseriesGetAsync ()
        {
             ApiResponse<List<ServiceTimeSeries>> localVarResponse = await V1TimeseriesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Known time series Get a full list of consecutive known time series grouped by service and timestamp.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ServiceTimeSeries&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ServiceTimeSeries>>> V1TimeseriesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/timeseries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1TimeseriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ServiceTimeSeries>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ServiceTimeSeries>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ServiceTimeSeries>)));
            
        }

    }
}
