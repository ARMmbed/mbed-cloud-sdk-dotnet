/* 
 * <auto-generated>
 * Billing API
 *
 * Mbed Cloud Billing API allows users to retrieve billing reports and service package details.
 *
 * OpenAPI spec version: 1.4.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = billing.Client.SwaggerDateConverter;

namespace billing.Model
{
    /// <summary>
    /// Billing report response.
    /// </summary>
    [DataContract]
    public partial class ReportResponse :  IEquatable<ReportResponse>, IValidatableObject
    {
        /// <summary>
        /// Billing report response object. Always set to &#39;billing-report&#39;.
        /// </summary>
        /// <value>Billing report response object. Always set to &#39;billing-report&#39;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum Report for "billing-report"
            /// </summary>
            [EnumMember(Value = "billing-report")]
            Report
        }

        /// <summary>
        /// Billing report response object. Always set to &#39;billing-report&#39;.
        /// </summary>
        /// <value>Billing report response object. Always set to &#39;billing-report&#39;.</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum? _Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportResponse" /> class.
        /// </summary>
        /// <param name="Account">Account contact information. (required).</param>
        /// <param name="Aggregated">Aggregated report billing data including all subtenant accounts if any. (required).</param>
        /// <param name="BillingData">Report billing data. (required).</param>
        /// <param name="Id">Billing report ID. (required).</param>
        /// <param name="Month">Month of requested billing report (required).</param>
        /// <param name="_Object">Billing report response object. Always set to &#39;billing-report&#39;. (required).</param>
        /// <param name="ServicePackage">Report service package..</param>
        /// <param name="Subtenants">List of billing reports for subtenant accounts. Empty list if account does not have any subtenant account. (required).</param>
        public ReportResponse(ReportAccountContactInfo Account = default(ReportAccountContactInfo), ReportBillingData Aggregated = default(ReportBillingData), ReportBillingData BillingData = default(ReportBillingData), string Id = default(string), string Month = default(string), ObjectEnum? _Object = default(ObjectEnum?), ServicePackageReport ServicePackage = default(ServicePackageReport), List<SubtenantAccountReport> Subtenants = default(List<SubtenantAccountReport>))
        {
            // to ensure "Account" is required (not null)
            if (Account == null)
            {
                throw new InvalidDataException("Account is a required property for ReportResponse and cannot be null");
            }
            else
            {
                this.Account = Account;
            }
            // to ensure "Aggregated" is required (not null)
            if (Aggregated == null)
            {
                throw new InvalidDataException("Aggregated is a required property for ReportResponse and cannot be null");
            }
            else
            {
                this.Aggregated = Aggregated;
            }
            // to ensure "BillingData" is required (not null)
            if (BillingData == null)
            {
                throw new InvalidDataException("BillingData is a required property for ReportResponse and cannot be null");
            }
            else
            {
                this.BillingData = BillingData;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for ReportResponse and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Month" is required (not null)
            if (Month == null)
            {
                throw new InvalidDataException("Month is a required property for ReportResponse and cannot be null");
            }
            else
            {
                this.Month = Month;
            }
            // to ensure "_Object" is required (not null)
            if (_Object == null)
            {
                throw new InvalidDataException("_Object is a required property for ReportResponse and cannot be null");
            }
            else
            {
                this._Object = _Object;
            }
            // to ensure "Subtenants" is required (not null)
            if (Subtenants == null)
            {
                throw new InvalidDataException("Subtenants is a required property for ReportResponse and cannot be null");
            }
            else
            {
                this.Subtenants = Subtenants;
            }
            this.ServicePackage = ServicePackage;
        }
        
        /// <summary>
        /// Account contact information.
        /// </summary>
        /// <value>Account contact information.</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public ReportAccountContactInfo Account { get; set; }

        /// <summary>
        /// Aggregated report billing data including all subtenant accounts if any.
        /// </summary>
        /// <value>Aggregated report billing data including all subtenant accounts if any.</value>
        [DataMember(Name="aggregated", EmitDefaultValue=false)]
        public ReportBillingData Aggregated { get; set; }

        /// <summary>
        /// Report billing data.
        /// </summary>
        /// <value>Report billing data.</value>
        [DataMember(Name="billing_data", EmitDefaultValue=false)]
        public ReportBillingData BillingData { get; set; }

        /// <summary>
        /// Billing report ID.
        /// </summary>
        /// <value>Billing report ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Month of requested billing report
        /// </summary>
        /// <value>Month of requested billing report</value>
        [DataMember(Name="month", EmitDefaultValue=false)]
        public string Month { get; set; }


        /// <summary>
        /// Report service package.
        /// </summary>
        /// <value>Report service package.</value>
        [DataMember(Name="service_package", EmitDefaultValue=false)]
        public ServicePackageReport ServicePackage { get; set; }

        /// <summary>
        /// List of billing reports for subtenant accounts. Empty list if account does not have any subtenant account.
        /// </summary>
        /// <value>List of billing reports for subtenant accounts. Empty list if account does not have any subtenant account.</value>
        [DataMember(Name="subtenants", EmitDefaultValue=false)]
        public List<SubtenantAccountReport> Subtenants { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportResponse {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Aggregated: ").Append(Aggregated).Append("\n");
            sb.Append("  BillingData: ").Append(BillingData).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  ServicePackage: ").Append(ServicePackage).Append("\n");
            sb.Append("  Subtenants: ").Append(Subtenants).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportResponse);
        }

        /// <summary>
        /// Returns true if ReportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Aggregated == input.Aggregated ||
                    (this.Aggregated != null &&
                    this.Aggregated.Equals(input.Aggregated))
                ) && 
                (
                    this.BillingData == input.BillingData ||
                    (this.BillingData != null &&
                    this.BillingData.Equals(input.BillingData))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Month == input.Month ||
                    (this.Month != null &&
                    this.Month.Equals(input.Month))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.ServicePackage == input.ServicePackage ||
                    (this.ServicePackage != null &&
                    this.ServicePackage.Equals(input.ServicePackage))
                ) && 
                (
                    this.Subtenants == input.Subtenants ||
                    this.Subtenants != null &&
                    this.Subtenants.SequenceEqual(input.Subtenants)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Aggregated != null)
                    hashCode = hashCode * 59 + this.Aggregated.GetHashCode();
                if (this.BillingData != null)
                    hashCode = hashCode * 59 + this.BillingData.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Month != null)
                    hashCode = hashCode * 59 + this.Month.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.ServicePackage != null)
                    hashCode = hashCode * 59 + this.ServicePackage.GetHashCode();
                if (this.Subtenants != null)
                    hashCode = hashCode * 59 + this.Subtenants.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Month (string) pattern
            Regex regexMonth = new Regex(@"^\\d{4}-\\d{2}$", RegexOptions.CultureInvariant);
            if (false == regexMonth.Match(this.Month).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Month, must match a pattern of " + regexMonth, new [] { "Month" });
            }

            yield break;
        }
    }

}
