/* 
 * <auto-generated>
 * Billing API
 *
 * Mbed Cloud Billing API allows users to retrieve billing reports and service package details.
 *
 * OpenAPI spec version: 1.4.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using billing.Client;
using billing.Model;

namespace billing.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get billing report.
        /// </summary>
        /// <remarks>
        /// Fetch generated billing report for the currently authenticated commercial non-subtenant account. Billing reports for subtenant accounts are included in their aggregator&#39;s billing report response.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>ReportResponse</returns>
        ReportResponse GetBillingReport (string month);

        /// <summary>
        /// Get billing report.
        /// </summary>
        /// <remarks>
        /// Fetch generated billing report for the currently authenticated commercial non-subtenant account. Billing reports for subtenant accounts are included in their aggregator&#39;s billing report response.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>ApiResponse of ReportResponse</returns>
        ApiResponse<ReportResponse> GetBillingReportWithHttpInfo (string month);
        /// <summary>
        /// Get raw active devices billing data for the month.
        /// </summary>
        /// <remarks>
        /// Fetch raw active devices billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw active devices billing data for subtenant accounts are included in their aggregator&#39;s raw active devices billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of active devices included, e.g. active device ID.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>BillingReportRawDataResponse</returns>
        BillingReportRawDataResponse GetBillingReportActiveDevices (string month);

        /// <summary>
        /// Get raw active devices billing data for the month.
        /// </summary>
        /// <remarks>
        /// Fetch raw active devices billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw active devices billing data for subtenant accounts are included in their aggregator&#39;s raw active devices billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of active devices included, e.g. active device ID.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>ApiResponse of BillingReportRawDataResponse</returns>
        ApiResponse<BillingReportRawDataResponse> GetBillingReportActiveDevicesWithHttpInfo (string month);
        /// <summary>
        /// Get raw firmware updates billing data for the month.
        /// </summary>
        /// <remarks>
        /// Fetch raw firmware updates billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw firmware updates billing data for subtenant accounts are included in their aggregator&#39;s raw firmware updates billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of firmware updates included, e.g. firmware update device ID.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>BillingReportRawDataResponse</returns>
        BillingReportRawDataResponse GetBillingReportFirmwareUpdates (string month);

        /// <summary>
        /// Get raw firmware updates billing data for the month.
        /// </summary>
        /// <remarks>
        /// Fetch raw firmware updates billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw firmware updates billing data for subtenant accounts are included in their aggregator&#39;s raw firmware updates billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of firmware updates included, e.g. firmware update device ID.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>ApiResponse of BillingReportRawDataResponse</returns>
        ApiResponse<BillingReportRawDataResponse> GetBillingReportFirmwareUpdatesWithHttpInfo (string month);
        /// <summary>
        /// Service package quota
        /// </summary>
        /// <remarks>
        /// Get the available firmware update quota for the currently authenticated commercial acount.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ServicePackageQuota</returns>
        ServicePackageQuota GetServicePackageQuota ();

        /// <summary>
        /// Service package quota
        /// </summary>
        /// <remarks>
        /// Get the available firmware update quota for the currently authenticated commercial acount.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ServicePackageQuota</returns>
        ApiResponse<ServicePackageQuota> GetServicePackageQuotaWithHttpInfo ();
        /// <summary>
        /// Service package quota history
        /// </summary>
        /// <remarks>
        /// Get your quota usage history. This API is available for commercial accounts. Aggregator accounts can see own and subtenant quota usage data. History data is ordered in ascending order based on the added timestamp. 
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum amount of quota history entries contained in one paged response. (optional)</param>
        /// <param name="after">To fetch after which quota history ID. The results will contain entries after specified entry. (optional)</param>
        /// <returns>ServicePackageQuotaHistoryResponse</returns>
        ServicePackageQuotaHistoryResponse GetServicePackageQuotaHistory (int? limit = null, string after = null);

        /// <summary>
        /// Service package quota history
        /// </summary>
        /// <remarks>
        /// Get your quota usage history. This API is available for commercial accounts. Aggregator accounts can see own and subtenant quota usage data. History data is ordered in ascending order based on the added timestamp. 
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum amount of quota history entries contained in one paged response. (optional)</param>
        /// <param name="after">To fetch after which quota history ID. The results will contain entries after specified entry. (optional)</param>
        /// <returns>ApiResponse of ServicePackageQuotaHistoryResponse</returns>
        ApiResponse<ServicePackageQuotaHistoryResponse> GetServicePackageQuotaHistoryWithHttpInfo (int? limit = null, string after = null);
        /// <summary>
        /// Get all service packages.
        /// </summary>
        /// <remarks>
        /// Get information of all service packages for currently authenticated commercial account. The response is returned with descending order by service package created timestamp, listing first pending service package, then active service package, and previous service packages at last.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ServicePackagesResponse</returns>
        ServicePackagesResponse GetServicePackages ();

        /// <summary>
        /// Get all service packages.
        /// </summary>
        /// <remarks>
        /// Get information of all service packages for currently authenticated commercial account. The response is returned with descending order by service package created timestamp, listing first pending service package, then active service package, and previous service packages at last.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ServicePackagesResponse</returns>
        ApiResponse<ServicePackagesResponse> GetServicePackagesWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get billing report.
        /// </summary>
        /// <remarks>
        /// Fetch generated billing report for the currently authenticated commercial non-subtenant account. Billing reports for subtenant accounts are included in their aggregator&#39;s billing report response.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of ReportResponse</returns>
        System.Threading.Tasks.Task<ReportResponse> GetBillingReportAsync (string month);

        /// <summary>
        /// Get billing report.
        /// </summary>
        /// <remarks>
        /// Fetch generated billing report for the currently authenticated commercial non-subtenant account. Billing reports for subtenant accounts are included in their aggregator&#39;s billing report response.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of ApiResponse (ReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportResponse>> GetBillingReportAsyncWithHttpInfo (string month);
        /// <summary>
        /// Get raw active devices billing data for the month.
        /// </summary>
        /// <remarks>
        /// Fetch raw active devices billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw active devices billing data for subtenant accounts are included in their aggregator&#39;s raw active devices billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of active devices included, e.g. active device ID.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of BillingReportRawDataResponse</returns>
        System.Threading.Tasks.Task<BillingReportRawDataResponse> GetBillingReportActiveDevicesAsync (string month);

        /// <summary>
        /// Get raw active devices billing data for the month.
        /// </summary>
        /// <remarks>
        /// Fetch raw active devices billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw active devices billing data for subtenant accounts are included in their aggregator&#39;s raw active devices billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of active devices included, e.g. active device ID.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of ApiResponse (BillingReportRawDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingReportRawDataResponse>> GetBillingReportActiveDevicesAsyncWithHttpInfo (string month);
        /// <summary>
        /// Get raw firmware updates billing data for the month.
        /// </summary>
        /// <remarks>
        /// Fetch raw firmware updates billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw firmware updates billing data for subtenant accounts are included in their aggregator&#39;s raw firmware updates billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of firmware updates included, e.g. firmware update device ID.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of BillingReportRawDataResponse</returns>
        System.Threading.Tasks.Task<BillingReportRawDataResponse> GetBillingReportFirmwareUpdatesAsync (string month);

        /// <summary>
        /// Get raw firmware updates billing data for the month.
        /// </summary>
        /// <remarks>
        /// Fetch raw firmware updates billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw firmware updates billing data for subtenant accounts are included in their aggregator&#39;s raw firmware updates billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of firmware updates included, e.g. firmware update device ID.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of ApiResponse (BillingReportRawDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillingReportRawDataResponse>> GetBillingReportFirmwareUpdatesAsyncWithHttpInfo (string month);
        /// <summary>
        /// Service package quota
        /// </summary>
        /// <remarks>
        /// Get the available firmware update quota for the currently authenticated commercial acount.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ServicePackageQuota</returns>
        System.Threading.Tasks.Task<ServicePackageQuota> GetServicePackageQuotaAsync ();

        /// <summary>
        /// Service package quota
        /// </summary>
        /// <remarks>
        /// Get the available firmware update quota for the currently authenticated commercial acount.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ServicePackageQuota)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServicePackageQuota>> GetServicePackageQuotaAsyncWithHttpInfo ();
        /// <summary>
        /// Service package quota history
        /// </summary>
        /// <remarks>
        /// Get your quota usage history. This API is available for commercial accounts. Aggregator accounts can see own and subtenant quota usage data. History data is ordered in ascending order based on the added timestamp. 
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum amount of quota history entries contained in one paged response. (optional)</param>
        /// <param name="after">To fetch after which quota history ID. The results will contain entries after specified entry. (optional)</param>
        /// <returns>Task of ServicePackageQuotaHistoryResponse</returns>
        System.Threading.Tasks.Task<ServicePackageQuotaHistoryResponse> GetServicePackageQuotaHistoryAsync (int? limit = null, string after = null);

        /// <summary>
        /// Service package quota history
        /// </summary>
        /// <remarks>
        /// Get your quota usage history. This API is available for commercial accounts. Aggregator accounts can see own and subtenant quota usage data. History data is ordered in ascending order based on the added timestamp. 
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum amount of quota history entries contained in one paged response. (optional)</param>
        /// <param name="after">To fetch after which quota history ID. The results will contain entries after specified entry. (optional)</param>
        /// <returns>Task of ApiResponse (ServicePackageQuotaHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServicePackageQuotaHistoryResponse>> GetServicePackageQuotaHistoryAsyncWithHttpInfo (int? limit = null, string after = null);
        /// <summary>
        /// Get all service packages.
        /// </summary>
        /// <remarks>
        /// Get information of all service packages for currently authenticated commercial account. The response is returned with descending order by service package created timestamp, listing first pending service package, then active service package, and previous service packages at last.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ServicePackagesResponse</returns>
        System.Threading.Tasks.Task<ServicePackagesResponse> GetServicePackagesAsync ();

        /// <summary>
        /// Get all service packages.
        /// </summary>
        /// <remarks>
        /// Get information of all service packages for currently authenticated commercial account. The response is returned with descending order by service package created timestamp, listing first pending service package, then active service package, and previous service packages at last.
        /// </remarks>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ServicePackagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServicePackagesResponse>> GetServicePackagesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private billing.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = billing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = billing.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public billing.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get billing report. Fetch generated billing report for the currently authenticated commercial non-subtenant account. Billing reports for subtenant accounts are included in their aggregator&#39;s billing report response.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>ReportResponse</returns>
        public ReportResponse GetBillingReport (string month)
        {
             ApiResponse<ReportResponse> localVarResponse = GetBillingReportWithHttpInfo(month);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get billing report. Fetch generated billing report for the currently authenticated commercial non-subtenant account. Billing reports for subtenant accounts are included in their aggregator&#39;s billing report response.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>ApiResponse of ReportResponse</returns>
        public ApiResponse< ReportResponse > GetBillingReportWithHttpInfo (string month)
        {
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->GetBillingReport");

            var localVarPath = "/v3/billing-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (month != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "month", month)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportResponse)));
        }

        /// <summary>
        /// Get billing report. Fetch generated billing report for the currently authenticated commercial non-subtenant account. Billing reports for subtenant accounts are included in their aggregator&#39;s billing report response.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of ReportResponse</returns>
        public async System.Threading.Tasks.Task<ReportResponse> GetBillingReportAsync (string month)
        {
             ApiResponse<ReportResponse> localVarResponse = await GetBillingReportAsyncWithHttpInfo(month);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get billing report. Fetch generated billing report for the currently authenticated commercial non-subtenant account. Billing reports for subtenant accounts are included in their aggregator&#39;s billing report response.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of ApiResponse (ReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportResponse>> GetBillingReportAsyncWithHttpInfo (string month)
        {
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->GetBillingReport");

            var localVarPath = "/v3/billing-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (month != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "month", month)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportResponse)));
        }

        /// <summary>
        /// Get raw active devices billing data for the month. Fetch raw active devices billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw active devices billing data for subtenant accounts are included in their aggregator&#39;s raw active devices billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of active devices included, e.g. active device ID.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>BillingReportRawDataResponse</returns>
        public BillingReportRawDataResponse GetBillingReportActiveDevices (string month)
        {
             ApiResponse<BillingReportRawDataResponse> localVarResponse = GetBillingReportActiveDevicesWithHttpInfo(month);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get raw active devices billing data for the month. Fetch raw active devices billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw active devices billing data for subtenant accounts are included in their aggregator&#39;s raw active devices billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of active devices included, e.g. active device ID.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>ApiResponse of BillingReportRawDataResponse</returns>
        public ApiResponse< BillingReportRawDataResponse > GetBillingReportActiveDevicesWithHttpInfo (string month)
        {
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->GetBillingReportActiveDevices");

            var localVarPath = "/v3/billing-report-active-devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (month != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "month", month)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingReportActiveDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingReportRawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingReportRawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingReportRawDataResponse)));
        }

        /// <summary>
        /// Get raw active devices billing data for the month. Fetch raw active devices billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw active devices billing data for subtenant accounts are included in their aggregator&#39;s raw active devices billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of active devices included, e.g. active device ID.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of BillingReportRawDataResponse</returns>
        public async System.Threading.Tasks.Task<BillingReportRawDataResponse> GetBillingReportActiveDevicesAsync (string month)
        {
             ApiResponse<BillingReportRawDataResponse> localVarResponse = await GetBillingReportActiveDevicesAsyncWithHttpInfo(month);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get raw active devices billing data for the month. Fetch raw active devices billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw active devices billing data for subtenant accounts are included in their aggregator&#39;s raw active devices billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of active devices included, e.g. active device ID.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of ApiResponse (BillingReportRawDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingReportRawDataResponse>> GetBillingReportActiveDevicesAsyncWithHttpInfo (string month)
        {
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->GetBillingReportActiveDevices");

            var localVarPath = "/v3/billing-report-active-devices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (month != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "month", month)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingReportActiveDevices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingReportRawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingReportRawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingReportRawDataResponse)));
        }

        /// <summary>
        /// Get raw firmware updates billing data for the month. Fetch raw firmware updates billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw firmware updates billing data for subtenant accounts are included in their aggregator&#39;s raw firmware updates billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of firmware updates included, e.g. firmware update device ID.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>BillingReportRawDataResponse</returns>
        public BillingReportRawDataResponse GetBillingReportFirmwareUpdates (string month)
        {
             ApiResponse<BillingReportRawDataResponse> localVarResponse = GetBillingReportFirmwareUpdatesWithHttpInfo(month);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get raw firmware updates billing data for the month. Fetch raw firmware updates billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw firmware updates billing data for subtenant accounts are included in their aggregator&#39;s raw firmware updates billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of firmware updates included, e.g. firmware update device ID.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>ApiResponse of BillingReportRawDataResponse</returns>
        public ApiResponse< BillingReportRawDataResponse > GetBillingReportFirmwareUpdatesWithHttpInfo (string month)
        {
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->GetBillingReportFirmwareUpdates");

            var localVarPath = "/v3/billing-report-firmware-updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (month != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "month", month)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingReportFirmwareUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingReportRawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingReportRawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingReportRawDataResponse)));
        }

        /// <summary>
        /// Get raw firmware updates billing data for the month. Fetch raw firmware updates billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw firmware updates billing data for subtenant accounts are included in their aggregator&#39;s raw firmware updates billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of firmware updates included, e.g. firmware update device ID.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of BillingReportRawDataResponse</returns>
        public async System.Threading.Tasks.Task<BillingReportRawDataResponse> GetBillingReportFirmwareUpdatesAsync (string month)
        {
             ApiResponse<BillingReportRawDataResponse> localVarResponse = await GetBillingReportFirmwareUpdatesAsyncWithHttpInfo(month);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get raw firmware updates billing data for the month. Fetch raw firmware updates billing data for the currently authenticated commercial non-subtenant account. They are supplementary data for billing report. The raw firmware updates billing data for subtenant accounts are included in their aggregator&#39;s raw firmware updates billing data. Endpoint returns the URL to download the gzipped csv file. First line of the file is the header which describes information of firmware updates included, e.g. firmware update device ID.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="month">Queried year and month of billing report</param>
        /// <returns>Task of ApiResponse (BillingReportRawDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillingReportRawDataResponse>> GetBillingReportFirmwareUpdatesAsyncWithHttpInfo (string month)
        {
            // verify the required parameter 'month' is set
            if (month == null)
                throw new ApiException(400, "Missing required parameter 'month' when calling DefaultApi->GetBillingReportFirmwareUpdates");

            var localVarPath = "/v3/billing-report-firmware-updates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (month != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "month", month)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillingReportFirmwareUpdates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillingReportRawDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BillingReportRawDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillingReportRawDataResponse)));
        }

        /// <summary>
        /// Service package quota Get the available firmware update quota for the currently authenticated commercial acount.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ServicePackageQuota</returns>
        public ServicePackageQuota GetServicePackageQuota ()
        {
             ApiResponse<ServicePackageQuota> localVarResponse = GetServicePackageQuotaWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Service package quota Get the available firmware update quota for the currently authenticated commercial acount.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ServicePackageQuota</returns>
        public ApiResponse< ServicePackageQuota > GetServicePackageQuotaWithHttpInfo ()
        {

            var localVarPath = "/v3/service-packages-quota";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicePackageQuota", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServicePackageQuota>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ServicePackageQuota) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServicePackageQuota)));
        }

        /// <summary>
        /// Service package quota Get the available firmware update quota for the currently authenticated commercial acount.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ServicePackageQuota</returns>
        public async System.Threading.Tasks.Task<ServicePackageQuota> GetServicePackageQuotaAsync ()
        {
             ApiResponse<ServicePackageQuota> localVarResponse = await GetServicePackageQuotaAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Service package quota Get the available firmware update quota for the currently authenticated commercial acount.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ServicePackageQuota)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServicePackageQuota>> GetServicePackageQuotaAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/service-packages-quota";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicePackageQuota", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServicePackageQuota>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ServicePackageQuota) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServicePackageQuota)));
        }

        /// <summary>
        /// Service package quota history Get your quota usage history. This API is available for commercial accounts. Aggregator accounts can see own and subtenant quota usage data. History data is ordered in ascending order based on the added timestamp. 
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum amount of quota history entries contained in one paged response. (optional)</param>
        /// <param name="after">To fetch after which quota history ID. The results will contain entries after specified entry. (optional)</param>
        /// <returns>ServicePackageQuotaHistoryResponse</returns>
        public ServicePackageQuotaHistoryResponse GetServicePackageQuotaHistory (int? limit = null, string after = null)
        {
             ApiResponse<ServicePackageQuotaHistoryResponse> localVarResponse = GetServicePackageQuotaHistoryWithHttpInfo(limit, after);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Service package quota history Get your quota usage history. This API is available for commercial accounts. Aggregator accounts can see own and subtenant quota usage data. History data is ordered in ascending order based on the added timestamp. 
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum amount of quota history entries contained in one paged response. (optional)</param>
        /// <param name="after">To fetch after which quota history ID. The results will contain entries after specified entry. (optional)</param>
        /// <returns>ApiResponse of ServicePackageQuotaHistoryResponse</returns>
        public ApiResponse< ServicePackageQuotaHistoryResponse > GetServicePackageQuotaHistoryWithHttpInfo (int? limit = null, string after = null)
        {

            var localVarPath = "/v3/service-packages-quota-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicePackageQuotaHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServicePackageQuotaHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ServicePackageQuotaHistoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServicePackageQuotaHistoryResponse)));
        }

        /// <summary>
        /// Service package quota history Get your quota usage history. This API is available for commercial accounts. Aggregator accounts can see own and subtenant quota usage data. History data is ordered in ascending order based on the added timestamp. 
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum amount of quota history entries contained in one paged response. (optional)</param>
        /// <param name="after">To fetch after which quota history ID. The results will contain entries after specified entry. (optional)</param>
        /// <returns>Task of ServicePackageQuotaHistoryResponse</returns>
        public async System.Threading.Tasks.Task<ServicePackageQuotaHistoryResponse> GetServicePackageQuotaHistoryAsync (int? limit = null, string after = null)
        {
             ApiResponse<ServicePackageQuotaHistoryResponse> localVarResponse = await GetServicePackageQuotaHistoryAsyncWithHttpInfo(limit, after);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Service package quota history Get your quota usage history. This API is available for commercial accounts. Aggregator accounts can see own and subtenant quota usage data. History data is ordered in ascending order based on the added timestamp. 
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum amount of quota history entries contained in one paged response. (optional)</param>
        /// <param name="after">To fetch after which quota history ID. The results will contain entries after specified entry. (optional)</param>
        /// <returns>Task of ApiResponse (ServicePackageQuotaHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServicePackageQuotaHistoryResponse>> GetServicePackageQuotaHistoryAsyncWithHttpInfo (int? limit = null, string after = null)
        {

            var localVarPath = "/v3/service-packages-quota-history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (after != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicePackageQuotaHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServicePackageQuotaHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ServicePackageQuotaHistoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServicePackageQuotaHistoryResponse)));
        }

        /// <summary>
        /// Get all service packages. Get information of all service packages for currently authenticated commercial account. The response is returned with descending order by service package created timestamp, listing first pending service package, then active service package, and previous service packages at last.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ServicePackagesResponse</returns>
        public ServicePackagesResponse GetServicePackages ()
        {
             ApiResponse<ServicePackagesResponse> localVarResponse = GetServicePackagesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all service packages. Get information of all service packages for currently authenticated commercial account. The response is returned with descending order by service package created timestamp, listing first pending service package, then active service package, and previous service packages at last.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ServicePackagesResponse</returns>
        public ApiResponse< ServicePackagesResponse > GetServicePackagesWithHttpInfo ()
        {

            var localVarPath = "/v3/service-packages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicePackages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServicePackagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ServicePackagesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServicePackagesResponse)));
        }

        /// <summary>
        /// Get all service packages. Get information of all service packages for currently authenticated commercial account. The response is returned with descending order by service package created timestamp, listing first pending service package, then active service package, and previous service packages at last.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ServicePackagesResponse</returns>
        public async System.Threading.Tasks.Task<ServicePackagesResponse> GetServicePackagesAsync ()
        {
             ApiResponse<ServicePackagesResponse> localVarResponse = await GetServicePackagesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all service packages. Get information of all service packages for currently authenticated commercial account. The response is returned with descending order by service package created timestamp, listing first pending service package, then active service package, and previous service packages at last.
        /// </summary>
        /// <exception cref="billing.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ServicePackagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServicePackagesResponse>> GetServicePackagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/service-packages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicePackages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServicePackagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ServicePackagesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServicePackagesResponse)));
        }

    }
}
