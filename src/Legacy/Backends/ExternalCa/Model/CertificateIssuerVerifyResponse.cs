/* 
 * <auto-generated>
 * Third party CA management API
 *
 * API for managing third party CA for creating certificates on Pelion Device Management
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = external_ca.Client.SwaggerDateConverter;

namespace external_ca.Model
{
    /// <summary>
    /// CertificateIssuerVerifyResponse
    /// </summary>
    [DataContract]
    public partial class CertificateIssuerVerifyResponse :  IEquatable<CertificateIssuerVerifyResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssuerVerifyResponse" /> class.
        /// </summary>
        /// <param name="Message">Provides details in case of failure. .</param>
        /// <param name="Successful">Indicates whether the certificate issuer was verified successfully. .</param>
        public CertificateIssuerVerifyResponse(string Message = default(string), bool? Successful = default(bool?))
        {
            this.Message = Message;
            this.Successful = Successful;
        }
        
        /// <summary>
        /// Provides details in case of failure. 
        /// </summary>
        /// <value>Provides details in case of failure. </value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Indicates whether the certificate issuer was verified successfully. 
        /// </summary>
        /// <value>Indicates whether the certificate issuer was verified successfully. </value>
        [DataMember(Name="successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateIssuerVerifyResponse {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateIssuerVerifyResponse);
        }

        /// <summary>
        /// Returns true if CertificateIssuerVerifyResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateIssuerVerifyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateIssuerVerifyResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
