/* 
 * IAM Identities REST API
 *
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using iam.Client;
using iam.Model;

namespace iam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRootAdminApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Upload new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>TrustedCertificateResp</returns>
        TrustedCertificateResp AddAccountCertificate (string accountID, TrustedCertificateInternalReq body);

        /// <summary>
        /// Upload new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        ApiResponse<TrustedCertificateResp> AddAccountCertificateWithHttpInfo (string accountID, TrustedCertificateInternalReq body);
        /// <summary>
        /// Add API keys to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AddApiKeysToAccountGroup (string accountID, string groupID, SubjectList body);

        /// <summary>
        /// Add API keys to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AddApiKeysToAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body);
        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AddSubjectsToAccountGroup (string accountID, string groupID, SubjectList body);

        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AddSubjectsToAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body);
        /// <summary>
        /// Add users to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse AddUsersToAccountGroup (string accountID, string groupID, SubjectList body);

        /// <summary>
        /// Add users to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> AddUsersToAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body);
        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>AccountCreationResp</returns>
        AccountCreationResp AdminCreateAccount (AccountCreationReq body);

        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>ApiResponse of AccountCreationResp</returns>
        ApiResponse<AccountCreationResp> AdminCreateAccountWithHttpInfo (AccountCreationReq body);
        /// <summary>
        /// Delete an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns></returns>
        void AdminDeleteAccount (string accountID);

        /// <summary>
        /// Delete an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminDeleteAccountWithHttpInfo (string accountID);
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns></returns>
        void AdminDeleteUser (string userId);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AdminDeleteUserWithHttpInfo (string userId);
        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <returns>AccountInfo</returns>
        AccountInfo AdminGetAccountInfo (string accountID);

        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        ApiResponse<AccountInfo> AdminGetAccountInfoWithHttpInfo (string accountID);
        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="filterEq">An optional filter for aggregated accounts. Supported: aggregator, subtenant. (optional)</param>
        /// <param name="templateEq">An optional filter for account template ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <returns>AccountInfoList</returns>
        AccountInfoList AdminGetAllAccounts (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, string filterEq = null, string templateEq = null, int? limit = null, string after = null);

        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="filterEq">An optional filter for aggregated accounts. Supported: aggregator, subtenant. (optional)</param>
        /// <param name="templateEq">An optional filter for account template ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <returns>ApiResponse of AccountInfoList</returns>
        ApiResponse<AccountInfoList> AdminGetAllAccountsWithHttpInfo (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, string filterEq = null, string templateEq = null, int? limit = null, string after = null);
        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>AccountInfo</returns>
        AccountInfo AdminUpdateAccount (string accountID, AccountUpdateRootReq body);

        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        ApiResponse<AccountInfo> AdminUpdateAccountWithHttpInfo (string accountID, AccountUpdateRootReq body);
        /// <summary>
        /// Change the password of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for changing the user password. The old password is not checked.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is changed.</param>
        /// <param name="body">New password only.</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse ChangeAccountUserPassword (string accountID, string userId, PasswordChangeReq body);

        /// <summary>
        /// Change the password of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for changing the user password. The old password is not checked.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is changed.</param>
        /// <param name="body">New password only.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> ChangeAccountUserPasswordWithHttpInfo (string accountID, string userId, PasswordChangeReq body);
        /// <summary>
        /// Check the password of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for checking user&#39;s current password.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is checked.</param>
        /// <param name="body">Current password only.</param>
        /// <returns></returns>
        void CheckAccountUserPassword (string accountID, string userId, PasswordChangeReq body);

        /// <summary>
        /// Check the password of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for checking user&#39;s current password.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is checked.</param>
        /// <param name="body">Current password only.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckAccountUserPasswordWithHttpInfo (string accountID, string userId, PasswordChangeReq body);
        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>AccountCreationResp</returns>
        AccountCreationResp CreateAccount (AccountCreationReq body);

        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>ApiResponse of AccountCreationResp</returns>
        ApiResponse<AccountCreationResp> CreateAccountWithHttpInfo (AccountCreationReq body);
        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp CreateAccountApiKey (string accountID, ApiKeyInfoReq body);

        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> CreateAccountApiKeyWithHttpInfo (string accountID, ApiKeyInfoReq body);
        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>GroupSummary</returns>
        GroupSummary CreateAccountGroup (string accountID, GroupCreationInfo body);

        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        ApiResponse<GroupSummary> CreateAccountGroupWithHttpInfo (string accountID, GroupCreationInfo body);
        /// <summary>
        /// Create a new account template.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>AccountTemplateResp</returns>
        AccountTemplateResp CreateAccountTemplate (AccountTemplateReq body);

        /// <summary>
        /// Create a new account template.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        ApiResponse<AccountTemplateResp> CreateAccountTemplateWithHttpInfo (AccountTemplateReq body);
        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp CreateAccountUser (string accountID, UserInfoReq body, string action = null);

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> CreateAccountUserWithHttpInfo (string accountID, UserInfoReq body, string action = null);
        /// <summary>
        /// Delete an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns></returns>
        void DeleteAccount (string accountID);

        /// <summary>
        /// Delete an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountWithHttpInfo (string accountID);
        /// <summary>
        /// Delete the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns></returns>
        void DeleteAccountApiKey (string accountID, string apiKey);

        /// <summary>
        /// Delete the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountApiKeyWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Delete trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns></returns>
        void DeleteAccountCertificate (string accountID, string certId);

        /// <summary>
        /// Delete trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountCertificateWithHttpInfo (string accountID, string certId);
        /// <summary>
        /// Delete a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns></returns>
        void DeleteAccountGroup (string accountID, string groupID);

        /// <summary>
        /// Delete a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountGroupWithHttpInfo (string accountID, string groupID);
        /// <summary>
        /// Delete account template by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns></returns>
        void DeleteAccountTemplate (string templateId);

        /// <summary>
        /// Delete account template by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountTemplateWithHttpInfo (string templateId);
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns></returns>
        void DeleteAccountUser (string accountID, string userId);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountUserWithHttpInfo (string accountID, string userId);
        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp GetAccountApiKey (string accountID, string apiKey);

        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> GetAccountApiKeyWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>TrustedCertificateInternalResp</returns>
        TrustedCertificateInternalResp GetAccountCertificate (string accountID, string certId);

        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>ApiResponse of TrustedCertificateInternalResp</returns>
        ApiResponse<TrustedCertificateInternalResp> GetAccountCertificateWithHttpInfo (string accountID, string certId);
        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>GroupSummary</returns>
        GroupSummary GetAccountGroupSummary (string accountID, string groupID);

        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        ApiResponse<GroupSummary> GetAccountGroupSummaryWithHttpInfo (string accountID, string groupID);
        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <returns>AccountInfo</returns>
        AccountInfo GetAccountInfo (string accountID, string include = null);

        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        ApiResponse<AccountInfo> GetAccountInfoWithHttpInfo (string accountID, string include = null);
        /// <summary>
        /// Get limits for account.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving limits by account ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the account whose limits to be retrieved.</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetAccountLimits (string accountId);

        /// <summary>
        /// Get limits for account.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving limits by account ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the account whose limits to be retrieved.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetAccountLimitsWithHttpInfo (string accountId);
        /// <summary>
        /// Get account template by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>AccountTemplateResp</returns>
        AccountTemplateResp GetAccountTemplate (string templateId);

        /// <summary>
        /// Get account template by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        ApiResponse<AccountTemplateResp> GetAccountTemplateWithHttpInfo (string templateId);
        /// <summary>
        /// Details of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID or name of the user to be retrieved.</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp GetAccountUser (string accountID, string userId);

        /// <summary>
        /// Details of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID or name of the user to be retrieved.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> GetAccountUserWithHttpInfo (string accountID, string userId);
        /// <summary>
        /// Get admin options.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving admin options.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FeatureOptionsResp&gt;</returns>
        List<FeatureOptionsResp> GetAdminOptions ();

        /// <summary>
        /// Get admin options.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving admin options.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FeatureOptionsResp&gt;</returns>
        ApiResponse<List<FeatureOptionsResp>> GetAdminOptionsWithHttpInfo ();
        /// <summary>
        /// Get all API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        ApiKeyInfoRespList GetAllAccountApiKeys (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null);

        /// <summary>
        /// Get all API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        ApiResponse<ApiKeyInfoRespList> GetAllAccountApiKeysWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null);
        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_mode%3D0. (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <returns>TrustedCertificateInternalRespList</returns>
        TrustedCertificateInternalRespList GetAllAccountCertificates (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null);

        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_mode%3D0. (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <returns>ApiResponse of TrustedCertificateInternalRespList</returns>
        ApiResponse<TrustedCertificateInternalRespList> GetAllAccountCertificatesWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null);
        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>List&lt;GroupSummary&gt;</returns>
        List<GroupSummary> GetAllAccountGroups (string accountID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of List&lt;GroupSummary&gt;</returns>
        ApiResponse<List<GroupSummary>> GetAllAccountGroupsWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get all account templates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving account templates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; default ASC. (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <param name="templateTypeEq">Filter for Account Template Type. (optional)</param>
        /// <returns>AccountTemplateRespList</returns>
        AccountTemplateRespList GetAllAccountTemplates (int? limit = null, string after = null, string order = null, string include = null, string templateTypeEq = null);

        /// <summary>
        /// Get all account templates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving account templates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; default ASC. (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <param name="templateTypeEq">Filter for Account Template Type. (optional)</param>
        /// <returns>ApiResponse of AccountTemplateRespList</returns>
        ApiResponse<AccountTemplateRespList> GetAllAccountTemplatesWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string templateTypeEq = null);
        /// <summary>
        /// Get all user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>UserInfoRespList</returns>
        UserInfoRespList GetAllAccountUsers (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);

        /// <summary>
        /// Get all user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        ApiResponse<UserInfoRespList> GetAllAccountUsersWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);
        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count,limits (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;tier%3D1, status%3DACTIVE or parent%3D{uuid}. (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <returns>AccountInfoList</returns>
        AccountInfoList GetAllAccounts (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, int? limit = null, string after = null, string include = null, string filter = null, string format = null);

        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count,limits (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;tier%3D1, status%3DACTIVE or parent%3D{uuid}. (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <returns>ApiResponse of AccountInfoList</returns>
        ApiResponse<AccountInfoList> GetAllAccountsWithHttpInfo (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, int? limit = null, string after = null, string include = null, string filter = null, string format = null);
        /// <summary>
        /// Get all API keys from all accounts
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API keys from all accounts.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">A filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        ApiKeyInfoRespList GetAllAccountsAllApiKeys (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null);

        /// <summary>
        /// Get all API keys from all accounts
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API keys from all accounts.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">A filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        ApiResponse<ApiKeyInfoRespList> GetAllAccountsAllApiKeysWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null);
        /// <summary>
        /// Get all users from all accounts
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving user info from all accounts
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>UserInfoRespList</returns>
        UserInfoRespList GetAllAccountsAllUsers (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);

        /// <summary>
        /// Get all users from all accounts
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving user info from all accounts
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        ApiResponse<UserInfoRespList> GetAllAccountsAllUsersWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);
        /// <summary>
        /// Get API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        ApiKeyInfoRespList GetApiKeysOfAccountGroup (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        ApiResponse<ApiKeyInfoRespList> GetApiKeysOfAccountGroupWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing users of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>UserInfoRespList</returns>
        UserInfoRespList GetUsersOfAccountGroup (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing users of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        ApiResponse<UserInfoRespList> GetUsersOfAccountGroupWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Manage an account.
        /// </summary>
        /// <remarks>
        /// This endpoint upgrades the account from free tier to commercial, sets the new status.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="status">New status of the account; ACTIVE, RESTRICTED or SUSPENDED (optional)</param>
        /// <param name="tier">New tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account. Other values are reserved for the future. (optional)</param>
        /// <param name="isProvisioningAllowed">A flag indicating whether Factory Tool is permitted to be downloaded or not, true or false. (optional)</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse ManageAccount (string accountID, string status = null, string tier = null, string isProvisioningAllowed = null);

        /// <summary>
        /// Manage an account.
        /// </summary>
        /// <remarks>
        /// This endpoint upgrades the account from free tier to commercial, sets the new status.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="status">New status of the account; ACTIVE, RESTRICTED or SUSPENDED (optional)</param>
        /// <param name="tier">New tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account. Other values are reserved for the future. (optional)</param>
        /// <param name="isProvisioningAllowed">A flag indicating whether Factory Tool is permitted to be downloaded or not, true or false. (optional)</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> ManageAccountWithHttpInfo (string accountID, string status = null, string tier = null, string isProvisioningAllowed = null);
        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse RemoveApiKeysFromAccountGroup (string accountID, string groupID, SubjectList body = null);

        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> RemoveApiKeysFromAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body = null);
        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdatedResponse</returns>
        UpdatedResponse RemoveUsersFromAccountGroup (string accountID, string groupID, SubjectList body = null);

        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        ApiResponse<UpdatedResponse> RemoveUsersFromAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body = null);
        /// <summary>
        /// Reset the secret key.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the secret key of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp ResetAccountApiKeySecret (string accountID, string apiKey);

        /// <summary>
        /// Reset the secret key.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the secret key of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> ResetAccountApiKeySecretWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Reset the user password.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the user password. The new password will visible in the response.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp ResetAccountUserPassword (string accountID, string userId);

        /// <summary>
        /// Reset the user password.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the user password. The new password will visible in the response.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> ResetAccountUserPasswordWithHttpInfo (string accountID, string userId);
        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiKeyInfoResp</returns>
        ApiKeyInfoResp UpdateAccountApiKey (string accountID, string apiKey, RootAdminApiKeyUpdateReq body);

        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        ApiResponse<ApiKeyInfoResp> UpdateAccountApiKeyWithHttpInfo (string accountID, string apiKey, RootAdminApiKeyUpdateReq body);
        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>TrustedCertificateInternalResp</returns>
        TrustedCertificateInternalResp UpdateAccountCertificate (string accountID, string certId, TrustedCertificateReq body);

        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>ApiResponse of TrustedCertificateInternalResp</returns>
        ApiResponse<TrustedCertificateInternalResp> UpdateAccountCertificateWithHttpInfo (string accountID, string certId, TrustedCertificateReq body);
        /// <summary>
        /// Update an existing account template.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an existing account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>AccountTemplateResp</returns>
        AccountTemplateResp UpdateAccountTemplate (string templateId, AccountTemplateReq body);

        /// <summary>
        /// Update an existing account template.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an existing account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        ApiResponse<AccountTemplateResp> UpdateAccountTemplateWithHttpInfo (string templateId, AccountTemplateReq body);
        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A rootadmin user object with attributes.</param>
        /// <returns>UserInfoResp</returns>
        UserInfoResp UpdateAccountUser (string accountID, string userId, RootAdminUserUpdateReq body);

        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A rootadmin user object with attributes.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        ApiResponse<UserInfoResp> UpdateAccountUserWithHttpInfo (string accountID, string userId, RootAdminUserUpdateReq body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Upload new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateResp> AddAccountCertificateAsync (string accountID, TrustedCertificateInternalReq body);

        /// <summary>
        /// Upload new trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for uploading new trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> AddAccountCertificateAsyncWithHttpInfo (string accountID, TrustedCertificateInternalReq body);
        /// <summary>
        /// Add API keys to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AddApiKeysToAccountGroupAsync (string accountID, string groupID, SubjectList body);

        /// <summary>
        /// Add API keys to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddApiKeysToAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body);
        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AddSubjectsToAccountGroupAsync (string accountID, string groupID, SubjectList body);

        /// <summary>
        /// Add members to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users and API keys to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddSubjectsToAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body);
        /// <summary>
        /// Add users to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> AddUsersToAccountGroupAsync (string accountID, string groupID, SubjectList body);

        /// <summary>
        /// Add users to a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for adding users to groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddUsersToAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body);
        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of AccountCreationResp</returns>
        System.Threading.Tasks.Task<AccountCreationResp> AdminCreateAccountAsync (AccountCreationReq body);

        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of ApiResponse (AccountCreationResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCreationResp>> AdminCreateAccountAsyncWithHttpInfo (AccountCreationReq body);
        /// <summary>
        /// Delete an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminDeleteAccountAsync (string accountID);

        /// <summary>
        /// Delete an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminDeleteAccountAsyncWithHttpInfo (string accountID);
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AdminDeleteUserAsync (string userId);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AdminDeleteUserAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <returns>Task of AccountInfo</returns>
        System.Threading.Tasks.Task<AccountInfo> AdminGetAccountInfoAsync (string accountID);

        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfo>> AdminGetAccountInfoAsyncWithHttpInfo (string accountID);
        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="filterEq">An optional filter for aggregated accounts. Supported: aggregator, subtenant. (optional)</param>
        /// <param name="templateEq">An optional filter for account template ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <returns>Task of AccountInfoList</returns>
        System.Threading.Tasks.Task<AccountInfoList> AdminGetAllAccountsAsync (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, string filterEq = null, string templateEq = null, int? limit = null, string after = null);

        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="filterEq">An optional filter for aggregated accounts. Supported: aggregator, subtenant. (optional)</param>
        /// <param name="templateEq">An optional filter for account template ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfoList>> AdminGetAllAccountsAsyncWithHttpInfo (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, string filterEq = null, string templateEq = null, int? limit = null, string after = null);
        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of AccountInfo</returns>
        System.Threading.Tasks.Task<AccountInfo> AdminUpdateAccountAsync (string accountID, AccountUpdateRootReq body);

        /// <summary>
        /// Update attributes of an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfo>> AdminUpdateAccountAsyncWithHttpInfo (string accountID, AccountUpdateRootReq body);
        /// <summary>
        /// Change the password of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for changing the user password. The old password is not checked.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is changed.</param>
        /// <param name="body">New password only.</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> ChangeAccountUserPasswordAsync (string accountID, string userId, PasswordChangeReq body);

        /// <summary>
        /// Change the password of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for changing the user password. The old password is not checked.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is changed.</param>
        /// <param name="body">New password only.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> ChangeAccountUserPasswordAsyncWithHttpInfo (string accountID, string userId, PasswordChangeReq body);
        /// <summary>
        /// Check the password of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for checking user&#39;s current password.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is checked.</param>
        /// <param name="body">Current password only.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckAccountUserPasswordAsync (string accountID, string userId, PasswordChangeReq body);

        /// <summary>
        /// Check the password of a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for checking user&#39;s current password.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is checked.</param>
        /// <param name="body">Current password only.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckAccountUserPasswordAsyncWithHttpInfo (string accountID, string userId, PasswordChangeReq body);
        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of AccountCreationResp</returns>
        System.Threading.Tasks.Task<AccountCreationResp> CreateAccountAsync (AccountCreationReq body);

        /// <summary>
        /// Create a new account.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of ApiResponse (AccountCreationResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountCreationResp>> CreateAccountAsyncWithHttpInfo (AccountCreationReq body);
        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> CreateAccountApiKeyAsync (string accountID, ApiKeyInfoReq body);

        /// <summary>
        /// Create a new API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> CreateAccountApiKeyAsyncWithHttpInfo (string accountID, ApiKeyInfoReq body);
        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>Task of GroupSummary</returns>
        System.Threading.Tasks.Task<GroupSummary> CreateAccountGroupAsync (string accountID, GroupCreationInfo body);

        /// <summary>
        /// Create a new group.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummary>> CreateAccountGroupAsyncWithHttpInfo (string accountID, GroupCreationInfo body);
        /// <summary>
        /// Create a new account template.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        System.Threading.Tasks.Task<AccountTemplateResp> CreateAccountTemplateAsync (AccountTemplateReq body);

        /// <summary>
        /// Create a new account template.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> CreateAccountTemplateAsyncWithHttpInfo (AccountTemplateReq body);
        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> CreateAccountUserAsync (string accountID, UserInfoReq body, string action = null);

        /// <summary>
        /// Create a new user.
        /// </summary>
        /// <remarks>
        /// An endpoint for creating a new user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> CreateAccountUserAsyncWithHttpInfo (string accountID, UserInfoReq body, string action = null);
        /// <summary>
        /// Delete an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountAsync (string accountID);

        /// <summary>
        /// Delete an existing account.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountAsyncWithHttpInfo (string accountID);
        /// <summary>
        /// Delete the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountApiKeyAsync (string accountID, string apiKey);

        /// <summary>
        /// Delete the API key.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting an API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Delete trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountCertificateAsync (string accountID, string certId);

        /// <summary>
        /// Delete trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting the trusted certificate.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountCertificateAsyncWithHttpInfo (string accountID, string certId);
        /// <summary>
        /// Delete a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountGroupAsync (string accountID, string groupID);

        /// <summary>
        /// Delete a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountGroupAsyncWithHttpInfo (string accountID, string groupID);
        /// <summary>
        /// Delete account template by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountTemplateAsync (string templateId);

        /// <summary>
        /// Delete account template by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountTemplateAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountUserAsync (string accountID, string userId);

        /// <summary>
        /// Delete a user.
        /// </summary>
        /// <remarks>
        /// An endpoint for deleting a user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountUserAsyncWithHttpInfo (string accountID, string userId);
        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> GetAccountApiKeyAsync (string accountID, string apiKey);

        /// <summary>
        /// Get API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> GetAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of TrustedCertificateInternalResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateInternalResp> GetAccountCertificateAsync (string accountID, string certId);

        /// <summary>
        /// Get trusted certificate by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a trusted certificate by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalResp>> GetAccountCertificateAsyncWithHttpInfo (string accountID, string certId);
        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of GroupSummary</returns>
        System.Threading.Tasks.Task<GroupSummary> GetAccountGroupSummaryAsync (string accountID, string groupID);

        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for getting general information about the group.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GetAccountGroupSummaryAsyncWithHttpInfo (string accountID, string groupID);
        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <returns>Task of AccountInfo</returns>
        System.Threading.Tasks.Task<AccountInfo> GetAccountInfoAsync (string accountID, string include = null);

        /// <summary>
        /// Get account info.
        /// </summary>
        /// <remarks>
        /// Returns detailed information about the account.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfo>> GetAccountInfoAsyncWithHttpInfo (string accountID, string include = null);
        /// <summary>
        /// Get limits for account.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving limits by account ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the account whose limits to be retrieved.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetAccountLimitsAsync (string accountId);

        /// <summary>
        /// Get limits for account.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving limits by account ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the account whose limits to be retrieved.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetAccountLimitsAsyncWithHttpInfo (string accountId);
        /// <summary>
        /// Get account template by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        System.Threading.Tasks.Task<AccountTemplateResp> GetAccountTemplateAsync (string templateId);

        /// <summary>
        /// Get account template by ID.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> GetAccountTemplateAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Details of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID or name of the user to be retrieved.</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> GetAccountUserAsync (string accountID, string userId);

        /// <summary>
        /// Details of the user.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of the user.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID or name of the user to be retrieved.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> GetAccountUserAsyncWithHttpInfo (string accountID, string userId);
        /// <summary>
        /// Get admin options.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving admin options.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FeatureOptionsResp&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureOptionsResp>> GetAdminOptionsAsync ();

        /// <summary>
        /// Get admin options.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving admin options.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FeatureOptionsResp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureOptionsResp>>> GetAdminOptionsAsyncWithHttpInfo ();
        /// <summary>
        /// Get all API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        System.Threading.Tasks.Task<ApiKeyInfoRespList> GetAllAccountApiKeysAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null);

        /// <summary>
        /// Get all API keys.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetAllAccountApiKeysAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null);
        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_mode%3D0. (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <returns>Task of TrustedCertificateInternalRespList</returns>
        System.Threading.Tasks.Task<TrustedCertificateInternalRespList> GetAllAccountCertificatesAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null);

        /// <summary>
        /// Get all trusted certificates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving trusted certificates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_mode%3D0. (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalRespList>> GetAllAccountCertificatesAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null);
        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of List&lt;GroupSummary&gt;</returns>
        System.Threading.Tasks.Task<List<GroupSummary>> GetAllAccountGroupsAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get all group information.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving all group information.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GroupSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GroupSummary>>> GetAllAccountGroupsAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get all account templates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving account templates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; default ASC. (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <param name="templateTypeEq">Filter for Account Template Type. (optional)</param>
        /// <returns>Task of AccountTemplateRespList</returns>
        System.Threading.Tasks.Task<AccountTemplateRespList> GetAllAccountTemplatesAsync (int? limit = null, string after = null, string order = null, string include = null, string templateTypeEq = null);

        /// <summary>
        /// Get all account templates.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving account templates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; default ASC. (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <param name="templateTypeEq">Filter for Account Template Type. (optional)</param>
        /// <returns>Task of ApiResponse (AccountTemplateRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountTemplateRespList>> GetAllAccountTemplatesAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string templateTypeEq = null);
        /// <summary>
        /// Get all user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        System.Threading.Tasks.Task<UserInfoRespList> GetAllAccountUsersAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);

        /// <summary>
        /// Get all user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving details of all users.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetAllAccountUsersAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);
        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count,limits (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;tier%3D1, status%3DACTIVE or parent%3D{uuid}. (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <returns>Task of AccountInfoList</returns>
        System.Threading.Tasks.Task<AccountInfoList> GetAllAccountsAsync (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, int? limit = null, string after = null, string include = null, string filter = null, string format = null);

        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <remarks>
        /// Returns an array of account objects, optionally filtered by status and tier level.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count,limits (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;tier%3D1, status%3DACTIVE or parent%3D{uuid}. (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountInfoList>> GetAllAccountsAsyncWithHttpInfo (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, int? limit = null, string after = null, string include = null, string filter = null, string format = null);
        /// <summary>
        /// Get all API keys from all accounts
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API keys from all accounts.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">A filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        System.Threading.Tasks.Task<ApiKeyInfoRespList> GetAllAccountsAllApiKeysAsync (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null);

        /// <summary>
        /// Get all API keys from all accounts
        /// </summary>
        /// <remarks>
        /// An endpoint for retrieving API keys from all accounts.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">A filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetAllAccountsAllApiKeysAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null);
        /// <summary>
        /// Get all users from all accounts
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving user info from all accounts
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        System.Threading.Tasks.Task<UserInfoRespList> GetAllAccountsAllUsersAsync (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);

        /// <summary>
        /// Get all users from all accounts
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving user info from all accounts
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetAllAccountsAllUsersAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null);
        /// <summary>
        /// Get API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        System.Threading.Tasks.Task<ApiKeyInfoRespList> GetApiKeysOfAccountGroupAsync (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get API keys of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing the API keys of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetApiKeysOfAccountGroupAsyncWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing users of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        System.Threading.Tasks.Task<UserInfoRespList> GetUsersOfAccountGroupAsync (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get users of a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for listing users of the group with details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetUsersOfAccountGroupAsyncWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Manage an account.
        /// </summary>
        /// <remarks>
        /// This endpoint upgrades the account from free tier to commercial, sets the new status.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="status">New status of the account; ACTIVE, RESTRICTED or SUSPENDED (optional)</param>
        /// <param name="tier">New tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account. Other values are reserved for the future. (optional)</param>
        /// <param name="isProvisioningAllowed">A flag indicating whether Factory Tool is permitted to be downloaded or not, true or false. (optional)</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> ManageAccountAsync (string accountID, string status = null, string tier = null, string isProvisioningAllowed = null);

        /// <summary>
        /// Manage an account.
        /// </summary>
        /// <remarks>
        /// This endpoint upgrades the account from free tier to commercial, sets the new status.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="status">New status of the account; ACTIVE, RESTRICTED or SUSPENDED (optional)</param>
        /// <param name="tier">New tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account. Other values are reserved for the future. (optional)</param>
        /// <param name="isProvisioningAllowed">A flag indicating whether Factory Tool is permitted to be downloaded or not, true or false. (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> ManageAccountAsyncWithHttpInfo (string accountID, string status = null, string tier = null, string isProvisioningAllowed = null);
        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> RemoveApiKeysFromAccountGroupAsync (string accountID, string groupID, SubjectList body = null);

        /// <summary>
        /// Remove API keys from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing API keys from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveApiKeysFromAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body = null);
        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UpdatedResponse</returns>
        System.Threading.Tasks.Task<UpdatedResponse> RemoveUsersFromAccountGroupAsync (string accountID, string groupID, SubjectList body = null);

        /// <summary>
        /// Remove users from a group.
        /// </summary>
        /// <remarks>
        /// An endpoint for removing users from groups.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveUsersFromAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body = null);
        /// <summary>
        /// Reset the secret key.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the secret key of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> ResetAccountApiKeySecretAsync (string accountID, string apiKey);

        /// <summary>
        /// Reset the secret key.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the secret key of the API key.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> ResetAccountApiKeySecretAsyncWithHttpInfo (string accountID, string apiKey);
        /// <summary>
        /// Reset the user password.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the user password. The new password will visible in the response.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> ResetAccountUserPasswordAsync (string accountID, string userId);

        /// <summary>
        /// Reset the user password.
        /// </summary>
        /// <remarks>
        /// An endpoint for resetting the user password. The new password will visible in the response.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> ResetAccountUserPasswordAsyncWithHttpInfo (string accountID, string userId);
        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        System.Threading.Tasks.Task<ApiKeyInfoResp> UpdateAccountApiKeyAsync (string accountID, string apiKey, RootAdminApiKeyUpdateReq body);

        /// <summary>
        /// Update API key details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating API key details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> UpdateAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey, RootAdminApiKeyUpdateReq body);
        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of TrustedCertificateInternalResp</returns>
        System.Threading.Tasks.Task<TrustedCertificateInternalResp> UpdateAccountCertificateAsync (string accountID, string certId, TrustedCertificateReq body);

        /// <summary>
        /// Update trusted certificate.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating existing trusted certificates.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalResp>> UpdateAccountCertificateAsyncWithHttpInfo (string accountID, string certId, TrustedCertificateReq body);
        /// <summary>
        /// Update an existing account template.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an existing account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        System.Threading.Tasks.Task<AccountTemplateResp> UpdateAccountTemplateAsync (string templateId, AccountTemplateReq body);

        /// <summary>
        /// Update an existing account template.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating an existing account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> UpdateAccountTemplateAsyncWithHttpInfo (string templateId, AccountTemplateReq body);
        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A rootadmin user object with attributes.</param>
        /// <returns>Task of UserInfoResp</returns>
        System.Threading.Tasks.Task<UserInfoResp> UpdateAccountUserAsync (string accountID, string userId, RootAdminUserUpdateReq body);

        /// <summary>
        /// Update user details.
        /// </summary>
        /// <remarks>
        /// An endpoint for updating user details.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A rootadmin user object with attributes.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> UpdateAccountUserAsyncWithHttpInfo (string accountID, string userId, RootAdminUserUpdateReq body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RootAdminApi : IRootAdminApi
    {
        private iam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RootAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RootAdminApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RootAdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RootAdminApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public iam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Upload new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>TrustedCertificateResp</returns>
        public TrustedCertificateResp AddAccountCertificate (string accountID, TrustedCertificateInternalReq body)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = AddAccountCertificateWithHttpInfo(accountID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>ApiResponse of TrustedCertificateResp</returns>
        public ApiResponse< TrustedCertificateResp > AddAccountCertificateWithHttpInfo (string accountID, TrustedCertificateInternalReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AddAccountCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AddAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Upload new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>Task of TrustedCertificateResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateResp> AddAccountCertificateAsync (string accountID, TrustedCertificateInternalReq body)
        {
             ApiResponse<TrustedCertificateResp> localVarResponse = await AddAccountCertificateAsyncWithHttpInfo(accountID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload new trusted certificate. An endpoint for uploading new trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A trusted certificate object with attributes, signature is optional.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateResp>> AddAccountCertificateAsyncWithHttpInfo (string accountID, TrustedCertificateInternalReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AddAccountCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AddAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateResp)));
            
        }

        /// <summary>
        /// Add API keys to a group. An endpoint for adding API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AddApiKeysToAccountGroup (string accountID, string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AddApiKeysToAccountGroupWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add API keys to a group. An endpoint for adding API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AddApiKeysToAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AddApiKeysToAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->AddApiKeysToAccountGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AddApiKeysToAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddApiKeysToAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Add API keys to a group. An endpoint for adding API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AddApiKeysToAccountGroupAsync (string accountID, string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AddApiKeysToAccountGroupAsyncWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add API keys to a group. An endpoint for adding API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of API keys to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddApiKeysToAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AddApiKeysToAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->AddApiKeysToAccountGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AddApiKeysToAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddApiKeysToAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AddSubjectsToAccountGroup (string accountID, string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AddSubjectsToAccountGroupWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AddSubjectsToAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AddSubjectsToAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->AddSubjectsToAccountGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AddSubjectsToAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSubjectsToAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AddSubjectsToAccountGroupAsync (string accountID, string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AddSubjectsToAccountGroupAsyncWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add members to a group. An endpoint for adding users and API keys to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users and API keys to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddSubjectsToAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AddSubjectsToAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->AddSubjectsToAccountGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AddSubjectsToAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSubjectsToAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Add users to a group. An endpoint for adding users to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse AddUsersToAccountGroup (string accountID, string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = AddUsersToAccountGroupWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add users to a group. An endpoint for adding users to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > AddUsersToAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AddUsersToAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->AddUsersToAccountGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AddUsersToAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsersToAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Add users to a group. An endpoint for adding users to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> AddUsersToAccountGroupAsync (string accountID, string groupID, SubjectList body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await AddUsersToAccountGroupAsyncWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add users to a group. An endpoint for adding users to groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be updated.</param>
        /// <param name="body">A list of users to be added to the group.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> AddUsersToAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AddUsersToAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->AddUsersToAccountGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AddUsersToAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUsersToAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>AccountCreationResp</returns>
        public AccountCreationResp AdminCreateAccount (AccountCreationReq body)
        {
             ApiResponse<AccountCreationResp> localVarResponse = AdminCreateAccountWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>ApiResponse of AccountCreationResp</returns>
        public ApiResponse< AccountCreationResp > AdminCreateAccountWithHttpInfo (AccountCreationReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AdminCreateAccount");

            var localVarPath = "/admin/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminCreateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCreationResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCreationResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCreationResp)));
            
        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of AccountCreationResp</returns>
        public async System.Threading.Tasks.Task<AccountCreationResp> AdminCreateAccountAsync (AccountCreationReq body)
        {
             ApiResponse<AccountCreationResp> localVarResponse = await AdminCreateAccountAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of ApiResponse (AccountCreationResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountCreationResp>> AdminCreateAccountAsyncWithHttpInfo (AccountCreationReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AdminCreateAccount");

            var localVarPath = "/admin/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminCreateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCreationResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCreationResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCreationResp)));
            
        }

        /// <summary>
        /// Delete an existing account. An endpoint for deleting an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns></returns>
        public void AdminDeleteAccount (string accountID)
        {
             AdminDeleteAccountWithHttpInfo(accountID);
        }

        /// <summary>
        /// Delete an existing account. An endpoint for deleting an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AdminDeleteAccountWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AdminDeleteAccount");

            var localVarPath = "/admin/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminDeleteAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an existing account. An endpoint for deleting an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminDeleteAccountAsync (string accountID)
        {
             await AdminDeleteAccountAsyncWithHttpInfo(accountID);

        }

        /// <summary>
        /// Delete an existing account. An endpoint for deleting an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AdminDeleteAccountAsyncWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AdminDeleteAccount");

            var localVarPath = "/admin/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminDeleteAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns></returns>
        public void AdminDeleteUser (string userId)
        {
             AdminDeleteUserWithHttpInfo(userId);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AdminDeleteUserWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->AdminDeleteUser");

            var localVarPath = "/admin/v3/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminDeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AdminDeleteUserAsync (string userId)
        {
             await AdminDeleteUserAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AdminDeleteUserAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->AdminDeleteUser");

            var localVarPath = "/admin/v3/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminDeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <returns>AccountInfo</returns>
        public AccountInfo AdminGetAccountInfo (string accountID)
        {
             ApiResponse<AccountInfo> localVarResponse = AdminGetAccountInfoWithHttpInfo(accountID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        public ApiResponse< AccountInfo > AdminGetAccountInfoWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AdminGetAccountInfo");

            var localVarPath = "/admin/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminGetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
            
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <returns>Task of AccountInfo</returns>
        public async System.Threading.Tasks.Task<AccountInfo> AdminGetAccountInfoAsync (string accountID)
        {
             ApiResponse<AccountInfo> localVarResponse = await AdminGetAccountInfoAsyncWithHttpInfo(accountID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfo>> AdminGetAccountInfoAsyncWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AdminGetAccountInfo");

            var localVarPath = "/admin/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminGetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
            
        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="filterEq">An optional filter for aggregated accounts. Supported: aggregator, subtenant. (optional)</param>
        /// <param name="templateEq">An optional filter for account template ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <returns>AccountInfoList</returns>
        public AccountInfoList AdminGetAllAccounts (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, string filterEq = null, string templateEq = null, int? limit = null, string after = null)
        {
             ApiResponse<AccountInfoList> localVarResponse = AdminGetAllAccountsWithHttpInfo(status, tier, parent, statusEq, tierEq, parentEq, filterEq, templateEq, limit, after);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="filterEq">An optional filter for aggregated accounts. Supported: aggregator, subtenant. (optional)</param>
        /// <param name="templateEq">An optional filter for account template ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <returns>ApiResponse of AccountInfoList</returns>
        public ApiResponse< AccountInfoList > AdminGetAllAccountsWithHttpInfo (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, string filterEq = null, string templateEq = null, int? limit = null, string after = null)
        {

            var localVarPath = "/admin/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (tier != null) localVarQueryParams.Add("tier", Configuration.ApiClient.ParameterToString(tier)); // query parameter
            if (parent != null) localVarQueryParams.Add("parent", Configuration.ApiClient.ParameterToString(parent)); // query parameter
            if (statusEq != null) localVarQueryParams.Add("status__eq", Configuration.ApiClient.ParameterToString(statusEq)); // query parameter
            if (tierEq != null) localVarQueryParams.Add("tier__eq", Configuration.ApiClient.ParameterToString(tierEq)); // query parameter
            if (parentEq != null) localVarQueryParams.Add("parent__eq", Configuration.ApiClient.ParameterToString(parentEq)); // query parameter
            if (filterEq != null) localVarQueryParams.Add("filter__eq", Configuration.ApiClient.ParameterToString(filterEq)); // query parameter
            if (templateEq != null) localVarQueryParams.Add("template__eq", Configuration.ApiClient.ParameterToString(templateEq)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminGetAllAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfoList)));
            
        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="filterEq">An optional filter for aggregated accounts. Supported: aggregator, subtenant. (optional)</param>
        /// <param name="templateEq">An optional filter for account template ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <returns>Task of AccountInfoList</returns>
        public async System.Threading.Tasks.Task<AccountInfoList> AdminGetAllAccountsAsync (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, string filterEq = null, string templateEq = null, int? limit = null, string after = null)
        {
             ApiResponse<AccountInfoList> localVarResponse = await AdminGetAllAccountsAsyncWithHttpInfo(status, tier, parent, statusEq, tierEq, parentEq, filterEq, templateEq, limit, after);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="filterEq">An optional filter for aggregated accounts. Supported: aggregator, subtenant. (optional)</param>
        /// <param name="templateEq">An optional filter for account template ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfoList>> AdminGetAllAccountsAsyncWithHttpInfo (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, string filterEq = null, string templateEq = null, int? limit = null, string after = null)
        {

            var localVarPath = "/admin/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (tier != null) localVarQueryParams.Add("tier", Configuration.ApiClient.ParameterToString(tier)); // query parameter
            if (parent != null) localVarQueryParams.Add("parent", Configuration.ApiClient.ParameterToString(parent)); // query parameter
            if (statusEq != null) localVarQueryParams.Add("status__eq", Configuration.ApiClient.ParameterToString(statusEq)); // query parameter
            if (tierEq != null) localVarQueryParams.Add("tier__eq", Configuration.ApiClient.ParameterToString(tierEq)); // query parameter
            if (parentEq != null) localVarQueryParams.Add("parent__eq", Configuration.ApiClient.ParameterToString(parentEq)); // query parameter
            if (filterEq != null) localVarQueryParams.Add("filter__eq", Configuration.ApiClient.ParameterToString(filterEq)); // query parameter
            if (templateEq != null) localVarQueryParams.Add("template__eq", Configuration.ApiClient.ParameterToString(templateEq)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminGetAllAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfoList)));
            
        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>AccountInfo</returns>
        public AccountInfo AdminUpdateAccount (string accountID, AccountUpdateRootReq body)
        {
             ApiResponse<AccountInfo> localVarResponse = AdminUpdateAccountWithHttpInfo(accountID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        public ApiResponse< AccountInfo > AdminUpdateAccountWithHttpInfo (string accountID, AccountUpdateRootReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AdminUpdateAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AdminUpdateAccount");

            var localVarPath = "/admin/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminUpdateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
            
        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of AccountInfo</returns>
        public async System.Threading.Tasks.Task<AccountInfo> AdminUpdateAccountAsync (string accountID, AccountUpdateRootReq body)
        {
             ApiResponse<AccountInfo> localVarResponse = await AdminUpdateAccountAsyncWithHttpInfo(accountID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update attributes of an existing account. An endpoint for updating an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="body">Details of the account to be updated.</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfo>> AdminUpdateAccountAsyncWithHttpInfo (string accountID, AccountUpdateRootReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->AdminUpdateAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->AdminUpdateAccount");

            var localVarPath = "/admin/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AdminUpdateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
            
        }

        /// <summary>
        /// Change the password of a user. An endpoint for changing the user password. The old password is not checked.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is changed.</param>
        /// <param name="body">New password only.</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse ChangeAccountUserPassword (string accountID, string userId, PasswordChangeReq body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = ChangeAccountUserPasswordWithHttpInfo(accountID, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change the password of a user. An endpoint for changing the user password. The old password is not checked.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is changed.</param>
        /// <param name="body">New password only.</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > ChangeAccountUserPasswordWithHttpInfo (string accountID, string userId, PasswordChangeReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->ChangeAccountUserPassword");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->ChangeAccountUserPassword");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->ChangeAccountUserPassword");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeAccountUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Change the password of a user. An endpoint for changing the user password. The old password is not checked.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is changed.</param>
        /// <param name="body">New password only.</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> ChangeAccountUserPasswordAsync (string accountID, string userId, PasswordChangeReq body)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await ChangeAccountUserPasswordAsyncWithHttpInfo(accountID, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change the password of a user. An endpoint for changing the user password. The old password is not checked.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is changed.</param>
        /// <param name="body">New password only.</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> ChangeAccountUserPasswordAsyncWithHttpInfo (string accountID, string userId, PasswordChangeReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->ChangeAccountUserPassword");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->ChangeAccountUserPassword");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->ChangeAccountUserPassword");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeAccountUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Check the password of a user. An endpoint for checking user&#39;s current password.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is checked.</param>
        /// <param name="body">Current password only.</param>
        /// <returns></returns>
        public void CheckAccountUserPassword (string accountID, string userId, PasswordChangeReq body)
        {
             CheckAccountUserPasswordWithHttpInfo(accountID, userId, body);
        }

        /// <summary>
        /// Check the password of a user. An endpoint for checking user&#39;s current password.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is checked.</param>
        /// <param name="body">Current password only.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckAccountUserPasswordWithHttpInfo (string accountID, string userId, PasswordChangeReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->CheckAccountUserPassword");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->CheckAccountUserPassword");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CheckAccountUserPassword");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckAccountUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check the password of a user. An endpoint for checking user&#39;s current password.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is checked.</param>
        /// <param name="body">Current password only.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckAccountUserPasswordAsync (string accountID, string userId, PasswordChangeReq body)
        {
             await CheckAccountUserPasswordAsyncWithHttpInfo(accountID, userId, body);

        }

        /// <summary>
        /// Check the password of a user. An endpoint for checking user&#39;s current password.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is checked.</param>
        /// <param name="body">Current password only.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckAccountUserPasswordAsyncWithHttpInfo (string accountID, string userId, PasswordChangeReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->CheckAccountUserPassword");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->CheckAccountUserPassword");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CheckAccountUserPassword");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckAccountUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>AccountCreationResp</returns>
        public AccountCreationResp CreateAccount (AccountCreationReq body)
        {
             ApiResponse<AccountCreationResp> localVarResponse = CreateAccountWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>ApiResponse of AccountCreationResp</returns>
        public ApiResponse< AccountCreationResp > CreateAccountWithHttpInfo (AccountCreationReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccount");

            var localVarPath = "/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCreationResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCreationResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCreationResp)));
            
        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of AccountCreationResp</returns>
        public async System.Threading.Tasks.Task<AccountCreationResp> CreateAccountAsync (AccountCreationReq body)
        {
             ApiResponse<AccountCreationResp> localVarResponse = await CreateAccountAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new account. An endpoint for creating a new account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account to be created.</param>
        /// <returns>Task of ApiResponse (AccountCreationResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountCreationResp>> CreateAccountAsyncWithHttpInfo (AccountCreationReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccount");

            var localVarPath = "/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountCreationResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountCreationResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountCreationResp)));
            
        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp CreateAccountApiKey (string accountID, ApiKeyInfoReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = CreateAccountApiKeyWithHttpInfo(accountID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > CreateAccountApiKeyWithHttpInfo (string accountID, ApiKeyInfoReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->CreateAccountApiKey");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> CreateAccountApiKeyAsync (string accountID, ApiKeyInfoReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await CreateAccountApiKeyAsyncWithHttpInfo(accountID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new API key. An endpoint for creating a new API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the API key to be created.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> CreateAccountApiKeyAsyncWithHttpInfo (string accountID, ApiKeyInfoReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->CreateAccountApiKey");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Create a new group. An endpoint for creating a new group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>GroupSummary</returns>
        public GroupSummary CreateAccountGroup (string accountID, GroupCreationInfo body)
        {
             ApiResponse<GroupSummary> localVarResponse = CreateAccountGroupWithHttpInfo(accountID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new group. An endpoint for creating a new group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        public ApiResponse< GroupSummary > CreateAccountGroupWithHttpInfo (string accountID, GroupCreationInfo body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->CreateAccountGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
            
        }

        /// <summary>
        /// Create a new group. An endpoint for creating a new group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>Task of GroupSummary</returns>
        public async System.Threading.Tasks.Task<GroupSummary> CreateAccountGroupAsync (string accountID, GroupCreationInfo body)
        {
             ApiResponse<GroupSummary> localVarResponse = await CreateAccountGroupAsyncWithHttpInfo(accountID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new group. An endpoint for creating a new group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">Details of the group to be created.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummary>> CreateAccountGroupAsyncWithHttpInfo (string accountID, GroupCreationInfo body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->CreateAccountGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
            
        }

        /// <summary>
        /// Create a new account template. An endpoint for creating a new account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>AccountTemplateResp</returns>
        public AccountTemplateResp CreateAccountTemplate (AccountTemplateReq body)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = CreateAccountTemplateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new account template. An endpoint for creating a new account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        public ApiResponse< AccountTemplateResp > CreateAccountTemplateWithHttpInfo (AccountTemplateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccountTemplate");

            var localVarPath = "/admin/v3/account-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Create a new account template. An endpoint for creating a new account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        public async System.Threading.Tasks.Task<AccountTemplateResp> CreateAccountTemplateAsync (AccountTemplateReq body)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = await CreateAccountTemplateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new account template. An endpoint for creating a new account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> CreateAccountTemplateAsyncWithHttpInfo (AccountTemplateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccountTemplate");

            var localVarPath = "/admin/v3/account-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Create a new user. An endpoint for creating a new user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp CreateAccountUser (string accountID, UserInfoReq body, string action = null)
        {
             ApiResponse<UserInfoResp> localVarResponse = CreateAccountUserWithHttpInfo(accountID, body, action);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new user. An endpoint for creating a new user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > CreateAccountUserWithHttpInfo (string accountID, UserInfoReq body, string action = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->CreateAccountUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Create a new user. An endpoint for creating a new user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> CreateAccountUserAsync (string accountID, UserInfoReq body, string action = null)
        {
             ApiResponse<UserInfoResp> localVarResponse = await CreateAccountUserAsyncWithHttpInfo(accountID, body, action);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new user. An endpoint for creating a new user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="body">A user object with attributes.</param>
        /// <param name="action">Create or invite user. (optional, default to create)</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> CreateAccountUserAsyncWithHttpInfo (string accountID, UserInfoReq body, string action = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->CreateAccountUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Delete an existing account. An endpoint for deleting an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccount (string accountID)
        {
             DeleteAccountWithHttpInfo(accountID);
        }

        /// <summary>
        /// Delete an existing account. An endpoint for deleting an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->DeleteAccount");

            var localVarPath = "/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an existing account. An endpoint for deleting an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountAsync (string accountID)
        {
             await DeleteAccountAsyncWithHttpInfo(accountID);

        }

        /// <summary>
        /// Delete an existing account. An endpoint for deleting an account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountAsyncWithHttpInfo (string accountID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->DeleteAccount");

            var localVarPath = "/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the API key. An endpoint for deleting an API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccountApiKey (string accountID, string apiKey)
        {
             DeleteAccountApiKeyWithHttpInfo(accountID, apiKey);
        }

        /// <summary>
        /// Delete the API key. An endpoint for deleting an API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountApiKeyWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->DeleteAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RootAdminApi->DeleteAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the API key. An endpoint for deleting an API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountApiKeyAsync (string accountID, string apiKey)
        {
             await DeleteAccountApiKeyAsyncWithHttpInfo(accountID, apiKey);

        }

        /// <summary>
        /// Delete the API key. An endpoint for deleting an API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->DeleteAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RootAdminApi->DeleteAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete trusted certificate by ID. An endpoint for deleting the trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccountCertificate (string accountID, string certId)
        {
             DeleteAccountCertificateWithHttpInfo(accountID, certId);
        }

        /// <summary>
        /// Delete trusted certificate by ID. An endpoint for deleting the trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountCertificateWithHttpInfo (string accountID, string certId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->DeleteAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling RootAdminApi->DeleteAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete trusted certificate by ID. An endpoint for deleting the trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountCertificateAsync (string accountID, string certId)
        {
             await DeleteAccountCertificateAsyncWithHttpInfo(accountID, certId);

        }

        /// <summary>
        /// Delete trusted certificate by ID. An endpoint for deleting the trusted certificate.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountCertificateAsyncWithHttpInfo (string accountID, string certId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->DeleteAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling RootAdminApi->DeleteAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a group. An endpoint for deleting a group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccountGroup (string accountID, string groupID)
        {
             DeleteAccountGroupWithHttpInfo(accountID, groupID);
        }

        /// <summary>
        /// Delete a group. An endpoint for deleting a group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountGroupWithHttpInfo (string accountID, string groupID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->DeleteAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->DeleteAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a group. An endpoint for deleting a group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountGroupAsync (string accountID, string groupID)
        {
             await DeleteAccountGroupAsyncWithHttpInfo(accountID, groupID);

        }

        /// <summary>
        /// Delete a group. An endpoint for deleting a group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountGroupAsyncWithHttpInfo (string accountID, string groupID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->DeleteAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->DeleteAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete account template by ID. An endpoint for deleting a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccountTemplate (string templateId)
        {
             DeleteAccountTemplateWithHttpInfo(templateId);
        }

        /// <summary>
        /// Delete account template by ID. An endpoint for deleting a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountTemplateWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->DeleteAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete account template by ID. An endpoint for deleting a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountTemplateAsync (string templateId)
        {
             await DeleteAccountTemplateAsyncWithHttpInfo(templateId);

        }

        /// <summary>
        /// Delete account template by ID. An endpoint for deleting a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountTemplateAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->DeleteAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccountUser (string accountID, string userId)
        {
             DeleteAccountUserWithHttpInfo(accountID, userId);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountUserWithHttpInfo (string accountID, string userId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->DeleteAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->DeleteAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountUserAsync (string accountID, string userId)
        {
             await DeleteAccountUserAsyncWithHttpInfo(accountID, userId);

        }

        /// <summary>
        /// Delete a user. An endpoint for deleting a user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountUserAsyncWithHttpInfo (string accountID, string userId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->DeleteAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->DeleteAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp GetAccountApiKey (string accountID, string apiKey)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = GetAccountApiKeyWithHttpInfo(accountID, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > GetAccountApiKeyWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RootAdminApi->GetAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> GetAccountApiKeyAsync (string accountID, string apiKey)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await GetAccountApiKeyAsyncWithHttpInfo(accountID, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get API key details. An endpoint for retrieving API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be retrieved.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> GetAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RootAdminApi->GetAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>TrustedCertificateInternalResp</returns>
        public TrustedCertificateInternalResp GetAccountCertificate (string accountID, string certId)
        {
             ApiResponse<TrustedCertificateInternalResp> localVarResponse = GetAccountCertificateWithHttpInfo(accountID, certId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>ApiResponse of TrustedCertificateInternalResp</returns>
        public ApiResponse< TrustedCertificateInternalResp > GetAccountCertificateWithHttpInfo (string accountID, string certId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling RootAdminApi->GetAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalResp)));
            
        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of TrustedCertificateInternalResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateInternalResp> GetAccountCertificateAsync (string accountID, string certId)
        {
             ApiResponse<TrustedCertificateInternalResp> localVarResponse = await GetAccountCertificateAsyncWithHttpInfo(accountID, certId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get trusted certificate by ID. An endpoint for retrieving a trusted certificate by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID or name of the trusted certificate to be retrieved.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalResp>> GetAccountCertificateAsyncWithHttpInfo (string accountID, string certId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling RootAdminApi->GetAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalResp)));
            
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>GroupSummary</returns>
        public GroupSummary GetAccountGroupSummary (string accountID, string groupID)
        {
             ApiResponse<GroupSummary> localVarResponse = GetAccountGroupSummaryWithHttpInfo(accountID, groupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>ApiResponse of GroupSummary</returns>
        public ApiResponse< GroupSummary > GetAccountGroupSummaryWithHttpInfo (string accountID, string groupID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAccountGroupSummary");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->GetAccountGroupSummary");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountGroupSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
            
        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of GroupSummary</returns>
        public async System.Threading.Tasks.Task<GroupSummary> GetAccountGroupSummaryAsync (string accountID, string groupID)
        {
             ApiResponse<GroupSummary> localVarResponse = await GetAccountGroupSummaryAsyncWithHttpInfo(accountID, groupID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get group information. An endpoint for getting general information about the group.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID or name of the group to be retrieved.</param>
        /// <returns>Task of ApiResponse (GroupSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupSummary>> GetAccountGroupSummaryAsyncWithHttpInfo (string accountID, string groupID)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAccountGroupSummary");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->GetAccountGroupSummary");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountGroupSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GroupSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupSummary)));
            
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <returns>AccountInfo</returns>
        public AccountInfo GetAccountInfo (string accountID, string include = null)
        {
             ApiResponse<AccountInfo> localVarResponse = GetAccountInfoWithHttpInfo(accountID, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <returns>ApiResponse of AccountInfo</returns>
        public ApiResponse< AccountInfo > GetAccountInfoWithHttpInfo (string accountID, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAccountInfo");

            var localVarPath = "/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
            
        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <returns>Task of AccountInfo</returns>
        public async System.Threading.Tasks.Task<AccountInfo> GetAccountInfoAsync (string accountID, string include = null)
        {
             ApiResponse<AccountInfo> localVarResponse = await GetAccountInfoAsyncWithHttpInfo(accountID, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account info. Returns detailed information about the account.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID or alias of the account to be fetched.</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: limits, policies, sub_accounts (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfo>> GetAccountInfoAsyncWithHttpInfo (string accountID, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAccountInfo");

            var localVarPath = "/v3/accounts/{accountID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfo)));
            
        }

        /// <summary>
        /// Get limits for account. Endpoint for retrieving limits by account ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the account whose limits to be retrieved.</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetAccountLimits (string accountId)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = GetAccountLimitsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get limits for account. Endpoint for retrieving limits by account ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the account whose limits to be retrieved.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse< Dictionary<string, string> > GetAccountLimitsWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RootAdminApi->GetAccountLimits");

            var localVarPath = "/internal/v1/limits/{account-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account-id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
            
        }

        /// <summary>
        /// Get limits for account. Endpoint for retrieving limits by account ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the account whose limits to be retrieved.</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetAccountLimitsAsync (string accountId)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = await GetAccountLimitsAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get limits for account. Endpoint for retrieving limits by account ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The ID of the account whose limits to be retrieved.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetAccountLimitsAsyncWithHttpInfo (string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RootAdminApi->GetAccountLimits");

            var localVarPath = "/internal/v1/limits/{account-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account-id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountLimits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
            
        }

        /// <summary>
        /// Get account template by ID. An endpoint for retrieving a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>AccountTemplateResp</returns>
        public AccountTemplateResp GetAccountTemplate (string templateId)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = GetAccountTemplateWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account template by ID. An endpoint for retrieving a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        public ApiResponse< AccountTemplateResp > GetAccountTemplateWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->GetAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Get account template by ID. An endpoint for retrieving a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        public async System.Threading.Tasks.Task<AccountTemplateResp> GetAccountTemplateAsync (string templateId)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = await GetAccountTemplateAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account template by ID. An endpoint for retrieving a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> GetAccountTemplateAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->GetAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Details of the user. An endpoint for retrieving details of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID or name of the user to be retrieved.</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp GetAccountUser (string accountID, string userId)
        {
             ApiResponse<UserInfoResp> localVarResponse = GetAccountUserWithHttpInfo(accountID, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Details of the user. An endpoint for retrieving details of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID or name of the user to be retrieved.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > GetAccountUserWithHttpInfo (string accountID, string userId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->GetAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Details of the user. An endpoint for retrieving details of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID or name of the user to be retrieved.</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> GetAccountUserAsync (string accountID, string userId)
        {
             ApiResponse<UserInfoResp> localVarResponse = await GetAccountUserAsyncWithHttpInfo(accountID, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Details of the user. An endpoint for retrieving details of the user.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID or name of the user to be retrieved.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> GetAccountUserAsyncWithHttpInfo (string accountID, string userId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->GetAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Get admin options. An endpoint for retrieving admin options.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FeatureOptionsResp&gt;</returns>
        public List<FeatureOptionsResp> GetAdminOptions ()
        {
             ApiResponse<List<FeatureOptionsResp>> localVarResponse = GetAdminOptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get admin options. An endpoint for retrieving admin options.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FeatureOptionsResp&gt;</returns>
        public ApiResponse< List<FeatureOptionsResp> > GetAdminOptionsWithHttpInfo ()
        {

            var localVarPath = "/admin/v3/iam/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdminOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureOptionsResp>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureOptionsResp>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureOptionsResp>)));
            
        }

        /// <summary>
        /// Get admin options. An endpoint for retrieving admin options.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FeatureOptionsResp&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureOptionsResp>> GetAdminOptionsAsync ()
        {
             ApiResponse<List<FeatureOptionsResp>> localVarResponse = await GetAdminOptionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get admin options. An endpoint for retrieving admin options.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FeatureOptionsResp&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureOptionsResp>>> GetAdminOptionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/admin/v3/iam/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdminOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureOptionsResp>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureOptionsResp>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureOptionsResp>)));
            
        }

        /// <summary>
        /// Get all API keys. An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        public ApiKeyInfoRespList GetAllAccountApiKeys (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = GetAllAccountApiKeysWithHttpInfo(accountID, limit, after, order, include, filter, owner, ownerEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all API keys. An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        public ApiResponse< ApiKeyInfoRespList > GetAllAccountApiKeysWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAllAccountApiKeys");

            var localVarPath = "/v3/accounts/{accountID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (owner != null) localVarQueryParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // query parameter
            if (ownerEq != null) localVarQueryParams.Add("owner__eq", Configuration.ApiClient.ParameterToString(ownerEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get all API keys. An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoRespList> GetAllAccountApiKeysAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = await GetAllAccountApiKeysAsyncWithHttpInfo(accountID, limit, after, order, include, filter, owner, ownerEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all API keys. An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetAllAccountApiKeysAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAllAccountApiKeys");

            var localVarPath = "/v3/accounts/{accountID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (owner != null) localVarQueryParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // query parameter
            if (ownerEq != null) localVarQueryParams.Add("owner__eq", Configuration.ApiClient.ParameterToString(ownerEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_mode%3D0. (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <returns>TrustedCertificateInternalRespList</returns>
        public TrustedCertificateInternalRespList GetAllAccountCertificates (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null)
        {
             ApiResponse<TrustedCertificateInternalRespList> localVarResponse = GetAllAccountCertificatesWithHttpInfo(accountID, limit, after, order, include, filter, serviceEq, expireEq, deviceExecutionModeEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_mode%3D0. (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <returns>ApiResponse of TrustedCertificateInternalRespList</returns>
        public ApiResponse< TrustedCertificateInternalRespList > GetAllAccountCertificatesWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAllAccountCertificates");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (serviceEq != null) localVarQueryParams.Add("service__eq", Configuration.ApiClient.ParameterToString(serviceEq)); // query parameter
            if (expireEq != null) localVarQueryParams.Add("expire__eq", Configuration.ApiClient.ParameterToString(expireEq)); // query parameter
            if (deviceExecutionModeEq != null) localVarQueryParams.Add("device_execution_mode__eq", Configuration.ApiClient.ParameterToString(deviceExecutionModeEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalRespList)));
            
        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_mode%3D0. (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <returns>Task of TrustedCertificateInternalRespList</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateInternalRespList> GetAllAccountCertificatesAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null)
        {
             ApiResponse<TrustedCertificateInternalRespList> localVarResponse = await GetAllAccountCertificatesAsyncWithHttpInfo(accountID, limit, after, order, include, filter, serviceEq, expireEq, deviceExecutionModeEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all trusted certificates. An endpoint for retrieving trusted certificates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;service%3Dlwm2m,expire%3D180,device_execution_mode%3D0. (optional)</param>
        /// <param name="serviceEq">Filter for service (optional)</param>
        /// <param name="expireEq">Filter for expire (optional)</param>
        /// <param name="deviceExecutionModeEq">Filter for developer certificates (optional)</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalRespList>> GetAllAccountCertificatesAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string serviceEq = null, int? expireEq = null, int? deviceExecutionModeEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAllAccountCertificates");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (serviceEq != null) localVarQueryParams.Add("service__eq", Configuration.ApiClient.ParameterToString(serviceEq)); // query parameter
            if (expireEq != null) localVarQueryParams.Add("expire__eq", Configuration.ApiClient.ParameterToString(expireEq)); // query parameter
            if (deviceExecutionModeEq != null) localVarQueryParams.Add("device_execution_mode__eq", Configuration.ApiClient.ParameterToString(deviceExecutionModeEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalRespList)));
            
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>List&lt;GroupSummary&gt;</returns>
        public List<GroupSummary> GetAllAccountGroups (string accountID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<List<GroupSummary>> localVarResponse = GetAllAccountGroupsWithHttpInfo(accountID, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of List&lt;GroupSummary&gt;</returns>
        public ApiResponse< List<GroupSummary> > GetAllAccountGroupsWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAllAccountGroups");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupSummary>)));
            
        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of List&lt;GroupSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<GroupSummary>> GetAllAccountGroupsAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<List<GroupSummary>> localVarResponse = await GetAllAccountGroupsAsyncWithHttpInfo(accountID, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all group information. An endpoint for retrieving all group information.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;GroupSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GroupSummary>>> GetAllAccountGroupsAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAllAccountGroups");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GroupSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GroupSummary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GroupSummary>)));
            
        }

        /// <summary>
        /// Get all account templates. An endpoint for retrieving account templates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; default ASC. (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <param name="templateTypeEq">Filter for Account Template Type. (optional)</param>
        /// <returns>AccountTemplateRespList</returns>
        public AccountTemplateRespList GetAllAccountTemplates (int? limit = null, string after = null, string order = null, string include = null, string templateTypeEq = null)
        {
             ApiResponse<AccountTemplateRespList> localVarResponse = GetAllAccountTemplatesWithHttpInfo(limit, after, order, include, templateTypeEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all account templates. An endpoint for retrieving account templates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; default ASC. (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <param name="templateTypeEq">Filter for Account Template Type. (optional)</param>
        /// <returns>ApiResponse of AccountTemplateRespList</returns>
        public ApiResponse< AccountTemplateRespList > GetAllAccountTemplatesWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string templateTypeEq = null)
        {

            var localVarPath = "/admin/v3/account-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (templateTypeEq != null) localVarQueryParams.Add("template_type__eq", Configuration.ApiClient.ParameterToString(templateTypeEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateRespList)));
            
        }

        /// <summary>
        /// Get all account templates. An endpoint for retrieving account templates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; default ASC. (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <param name="templateTypeEq">Filter for Account Template Type. (optional)</param>
        /// <returns>Task of AccountTemplateRespList</returns>
        public async System.Threading.Tasks.Task<AccountTemplateRespList> GetAllAccountTemplatesAsync (int? limit = null, string after = null, string order = null, string include = null, string templateTypeEq = null)
        {
             ApiResponse<AccountTemplateRespList> localVarResponse = await GetAllAccountTemplatesAsyncWithHttpInfo(limit, after, order, include, templateTypeEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all account templates. An endpoint for retrieving account templates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; default ASC. (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count. (optional)</param>
        /// <param name="templateTypeEq">Filter for Account Template Type. (optional)</param>
        /// <returns>Task of ApiResponse (AccountTemplateRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountTemplateRespList>> GetAllAccountTemplatesAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string templateTypeEq = null)
        {

            var localVarPath = "/admin/v3/account-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (templateTypeEq != null) localVarQueryParams.Add("template_type__eq", Configuration.ApiClient.ParameterToString(templateTypeEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateRespList)));
            
        }

        /// <summary>
        /// Get all user details. An endpoint for retrieving details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>UserInfoRespList</returns>
        public UserInfoRespList GetAllAccountUsers (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = GetAllAccountUsersWithHttpInfo(accountID, limit, after, order, include, filter, statusEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user details. An endpoint for retrieving details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        public ApiResponse< UserInfoRespList > GetAllAccountUsersWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAllAccountUsers");

            var localVarPath = "/v3/accounts/{accountID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (statusEq != null) localVarQueryParams.Add("status__eq", Configuration.ApiClient.ParameterToString(statusEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
            
        }

        /// <summary>
        /// Get all user details. An endpoint for retrieving details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        public async System.Threading.Tasks.Task<UserInfoRespList> GetAllAccountUsersAsync (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = await GetAllAccountUsersAsyncWithHttpInfo(accountID, limit, after, order, include, filter, statusEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user details. An endpoint for retrieving details of all users.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetAllAccountUsersAsyncWithHttpInfo (string accountID, int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetAllAccountUsers");

            var localVarPath = "/v3/accounts/{accountID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (statusEq != null) localVarQueryParams.Add("status__eq", Configuration.ApiClient.ParameterToString(statusEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
            
        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count,limits (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;tier%3D1, status%3DACTIVE or parent%3D{uuid}. (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <returns>AccountInfoList</returns>
        public AccountInfoList GetAllAccounts (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, int? limit = null, string after = null, string include = null, string filter = null, string format = null)
        {
             ApiResponse<AccountInfoList> localVarResponse = GetAllAccountsWithHttpInfo(status, tier, parent, statusEq, tierEq, parentEq, limit, after, include, filter, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count,limits (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;tier%3D1, status%3DACTIVE or parent%3D{uuid}. (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <returns>ApiResponse of AccountInfoList</returns>
        public ApiResponse< AccountInfoList > GetAllAccountsWithHttpInfo (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, int? limit = null, string after = null, string include = null, string filter = null, string format = null)
        {

            var localVarPath = "/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (tier != null) localVarQueryParams.Add("tier", Configuration.ApiClient.ParameterToString(tier)); // query parameter
            if (parent != null) localVarQueryParams.Add("parent", Configuration.ApiClient.ParameterToString(parent)); // query parameter
            if (statusEq != null) localVarQueryParams.Add("status__eq", Configuration.ApiClient.ParameterToString(statusEq)); // query parameter
            if (tierEq != null) localVarQueryParams.Add("tier__eq", Configuration.ApiClient.ParameterToString(tierEq)); // query parameter
            if (parentEq != null) localVarQueryParams.Add("parent__eq", Configuration.ApiClient.ParameterToString(parentEq)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfoList)));
            
        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count,limits (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;tier%3D1, status%3DACTIVE or parent%3D{uuid}. (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <returns>Task of AccountInfoList</returns>
        public async System.Threading.Tasks.Task<AccountInfoList> GetAllAccountsAsync (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, int? limit = null, string after = null, string include = null, string filter = null, string format = null)
        {
             ApiResponse<AccountInfoList> localVarResponse = await GetAllAccountsAsyncWithHttpInfo(status, tier, parent, statusEq, tierEq, parentEq, limit, after, include, filter, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all accounts. Returns an array of account objects, optionally filtered by status and tier level.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tier">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parent">An optional filter for parent account ID. (optional)</param>
        /// <param name="statusEq">An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED. (optional)</param>
        /// <param name="tierEq">An optional filter for tier level, must be 0, 1 or omitted. (optional)</param>
        /// <param name="parentEq">An optional filter for parent account ID. (optional)</param>
        /// <param name="limit">The number of results to return (2-1000). By default, it is unlimited. (optional)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count,limits (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;tier%3D1, status%3DACTIVE or parent%3D{uuid}. (optional)</param>
        /// <param name="format">Format information for the response to the query, supported: format&#x3D;breakdown. (optional)</param>
        /// <returns>Task of ApiResponse (AccountInfoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountInfoList>> GetAllAccountsAsyncWithHttpInfo (string status = null, string tier = null, string parent = null, string statusEq = null, string tierEq = null, string parentEq = null, int? limit = null, string after = null, string include = null, string filter = null, string format = null)
        {

            var localVarPath = "/v3/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (tier != null) localVarQueryParams.Add("tier", Configuration.ApiClient.ParameterToString(tier)); // query parameter
            if (parent != null) localVarQueryParams.Add("parent", Configuration.ApiClient.ParameterToString(parent)); // query parameter
            if (statusEq != null) localVarQueryParams.Add("status__eq", Configuration.ApiClient.ParameterToString(statusEq)); // query parameter
            if (tierEq != null) localVarQueryParams.Add("tier__eq", Configuration.ApiClient.ParameterToString(tierEq)); // query parameter
            if (parentEq != null) localVarQueryParams.Add("parent__eq", Configuration.ApiClient.ParameterToString(parentEq)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountInfoList)));
            
        }

        /// <summary>
        /// Get all API keys from all accounts An endpoint for retrieving API keys from all accounts.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">A filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        public ApiKeyInfoRespList GetAllAccountsAllApiKeys (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = GetAllAccountsAllApiKeysWithHttpInfo(limit, after, order, include, filter, owner, ownerEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all API keys from all accounts An endpoint for retrieving API keys from all accounts.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">A filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        public ApiResponse< ApiKeyInfoRespList > GetAllAccountsAllApiKeysWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null)
        {

            var localVarPath = "/admin/v3/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (owner != null) localVarQueryParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // query parameter
            if (ownerEq != null) localVarQueryParams.Add("owner__eq", Configuration.ApiClient.ParameterToString(ownerEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountsAllApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get all API keys from all accounts An endpoint for retrieving API keys from all accounts.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">A filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoRespList> GetAllAccountsAllApiKeysAsync (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = await GetAllAccountsAllApiKeysAsyncWithHttpInfo(limit, after, order, include, filter, owner, ownerEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all API keys from all accounts An endpoint for retrieving API keys from all accounts.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">A filter for the query, for example filter&#x3D;owner%3Duuid. (optional)</param>
        /// <param name="owner">Owner name filter. (optional)</param>
        /// <param name="ownerEq">Owner name filter. (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetAllAccountsAllApiKeysAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string owner = null, string ownerEq = null)
        {

            var localVarPath = "/admin/v3/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (owner != null) localVarQueryParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // query parameter
            if (ownerEq != null) localVarQueryParams.Add("owner__eq", Configuration.ApiClient.ParameterToString(ownerEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountsAllApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get all users from all accounts Endpoint for retrieving user info from all accounts
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>UserInfoRespList</returns>
        public UserInfoRespList GetAllAccountsAllUsers (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = GetAllAccountsAllUsersWithHttpInfo(limit, after, order, include, filter, statusEq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all users from all accounts Endpoint for retrieving user info from all accounts
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        public ApiResponse< UserInfoRespList > GetAllAccountsAllUsersWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {

            var localVarPath = "/admin/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (statusEq != null) localVarQueryParams.Add("status__eq", Configuration.ApiClient.ParameterToString(statusEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountsAllUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
            
        }

        /// <summary>
        /// Get all users from all accounts Endpoint for retrieving user info from all accounts
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        public async System.Threading.Tasks.Task<UserInfoRespList> GetAllAccountsAllUsersAsync (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = await GetAllAccountsAllUsersAsyncWithHttpInfo(limit, after, order, include, filter, statusEq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all users from all accounts Endpoint for retrieving user info from all accounts
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <param name="filter">Filter for the query, for example filter&#x3D;status%3Dactive,status%3Dreset. (optional)</param>
        /// <param name="statusEq">Filter for status, for example active or reset (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetAllAccountsAllUsersAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null, string filter = null, string statusEq = null)
        {

            var localVarPath = "/admin/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (statusEq != null) localVarQueryParams.Add("status__eq", Configuration.ApiClient.ParameterToString(statusEq)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountsAllUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
            
        }

        /// <summary>
        /// Get API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiKeyInfoRespList</returns>
        public ApiKeyInfoRespList GetApiKeysOfAccountGroup (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = GetApiKeysOfAccountGroupWithHttpInfo(accountID, groupID, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of ApiKeyInfoRespList</returns>
        public ApiResponse< ApiKeyInfoRespList > GetApiKeysOfAccountGroupWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetApiKeysOfAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->GetApiKeysOfAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiKeysOfAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiKeyInfoRespList</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoRespList> GetApiKeysOfAccountGroupAsync (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<ApiKeyInfoRespList> localVarResponse = await GetApiKeysOfAccountGroupAsyncWithHttpInfo(accountID, groupID, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get API keys of a group. An endpoint for listing the API keys of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose API keys are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoRespList>> GetApiKeysOfAccountGroupAsyncWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetApiKeysOfAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->GetApiKeysOfAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApiKeysOfAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoRespList)));
            
        }

        /// <summary>
        /// Get users of a group. An endpoint for listing users of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>UserInfoRespList</returns>
        public UserInfoRespList GetUsersOfAccountGroup (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = GetUsersOfAccountGroupWithHttpInfo(accountID, groupID, limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users of a group. An endpoint for listing users of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of UserInfoRespList</returns>
        public ApiResponse< UserInfoRespList > GetUsersOfAccountGroupWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetUsersOfAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->GetUsersOfAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersOfAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
            
        }

        /// <summary>
        /// Get users of a group. An endpoint for listing users of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of UserInfoRespList</returns>
        public async System.Threading.Tasks.Task<UserInfoRespList> GetUsersOfAccountGroupAsync (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<UserInfoRespList> localVarResponse = await GetUsersOfAccountGroupAsyncWithHttpInfo(accountID, groupID, limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users of a group. An endpoint for listing users of the group with details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">The ID of the group whose users are retrieved.</param>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity ID to fetch after the given one. (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC; by default ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separated additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (UserInfoRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoRespList>> GetUsersOfAccountGroupAsyncWithHttpInfo (string accountID, string groupID, int? limit = null, string after = null, string order = null, string include = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->GetUsersOfAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->GetUsersOfAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsersOfAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoRespList)));
            
        }

        /// <summary>
        /// Manage an account. This endpoint upgrades the account from free tier to commercial, sets the new status.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="status">New status of the account; ACTIVE, RESTRICTED or SUSPENDED (optional)</param>
        /// <param name="tier">New tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account. Other values are reserved for the future. (optional)</param>
        /// <param name="isProvisioningAllowed">A flag indicating whether Factory Tool is permitted to be downloaded or not, true or false. (optional)</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse ManageAccount (string accountID, string status = null, string tier = null, string isProvisioningAllowed = null)
        {
             ApiResponse<UpdatedResponse> localVarResponse = ManageAccountWithHttpInfo(accountID, status, tier, isProvisioningAllowed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Manage an account. This endpoint upgrades the account from free tier to commercial, sets the new status.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="status">New status of the account; ACTIVE, RESTRICTED or SUSPENDED (optional)</param>
        /// <param name="tier">New tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account. Other values are reserved for the future. (optional)</param>
        /// <param name="isProvisioningAllowed">A flag indicating whether Factory Tool is permitted to be downloaded or not, true or false. (optional)</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > ManageAccountWithHttpInfo (string accountID, string status = null, string tier = null, string isProvisioningAllowed = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->ManageAccount");

            var localVarPath = "/v3/accounts/{accountID}/manage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (tier != null) localVarQueryParams.Add("tier", Configuration.ApiClient.ParameterToString(tier)); // query parameter
            if (isProvisioningAllowed != null) localVarQueryParams.Add("isProvisioningAllowed", Configuration.ApiClient.ParameterToString(isProvisioningAllowed)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ManageAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Manage an account. This endpoint upgrades the account from free tier to commercial, sets the new status.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="status">New status of the account; ACTIVE, RESTRICTED or SUSPENDED (optional)</param>
        /// <param name="tier">New tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account. Other values are reserved for the future. (optional)</param>
        /// <param name="isProvisioningAllowed">A flag indicating whether Factory Tool is permitted to be downloaded or not, true or false. (optional)</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> ManageAccountAsync (string accountID, string status = null, string tier = null, string isProvisioningAllowed = null)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await ManageAccountAsyncWithHttpInfo(accountID, status, tier, isProvisioningAllowed);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Manage an account. This endpoint upgrades the account from free tier to commercial, sets the new status.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">The ID of the account to be updated.</param>
        /// <param name="status">New status of the account; ACTIVE, RESTRICTED or SUSPENDED (optional)</param>
        /// <param name="tier">New tier level of the account; &#39;0&#39;: free tier, &#39;1&#39;: commercial account. Other values are reserved for the future. (optional)</param>
        /// <param name="isProvisioningAllowed">A flag indicating whether Factory Tool is permitted to be downloaded or not, true or false. (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> ManageAccountAsyncWithHttpInfo (string accountID, string status = null, string tier = null, string isProvisioningAllowed = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->ManageAccount");

            var localVarPath = "/v3/accounts/{accountID}/manage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (tier != null) localVarQueryParams.Add("tier", Configuration.ApiClient.ParameterToString(tier)); // query parameter
            if (isProvisioningAllowed != null) localVarQueryParams.Add("isProvisioningAllowed", Configuration.ApiClient.ParameterToString(isProvisioningAllowed)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ManageAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse RemoveApiKeysFromAccountGroup (string accountID, string groupID, SubjectList body = null)
        {
             ApiResponse<UpdatedResponse> localVarResponse = RemoveApiKeysFromAccountGroupWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > RemoveApiKeysFromAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->RemoveApiKeysFromAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->RemoveApiKeysFromAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveApiKeysFromAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> RemoveApiKeysFromAccountGroupAsync (string accountID, string groupID, SubjectList body = null)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await RemoveApiKeysFromAccountGroupAsyncWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove API keys from a group. An endpoint for removing API keys from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID">A list of API keys to be removed from the group.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveApiKeysFromAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->RemoveApiKeysFromAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->RemoveApiKeysFromAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveApiKeysFromAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>UpdatedResponse</returns>
        public UpdatedResponse RemoveUsersFromAccountGroup (string accountID, string groupID, SubjectList body = null)
        {
             ApiResponse<UpdatedResponse> localVarResponse = RemoveUsersFromAccountGroupWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UpdatedResponse</returns>
        public ApiResponse< UpdatedResponse > RemoveUsersFromAccountGroupWithHttpInfo (string accountID, string groupID, SubjectList body = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->RemoveUsersFromAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->RemoveUsersFromAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsersFromAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UpdatedResponse</returns>
        public async System.Threading.Tasks.Task<UpdatedResponse> RemoveUsersFromAccountGroupAsync (string accountID, string groupID, SubjectList body = null)
        {
             ApiResponse<UpdatedResponse> localVarResponse = await RemoveUsersFromAccountGroupAsyncWithHttpInfo(accountID, groupID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove users from a group. An endpoint for removing users from groups.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="groupID"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedResponse>> RemoveUsersFromAccountGroupAsyncWithHttpInfo (string accountID, string groupID, SubjectList body = null)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->RemoveUsersFromAccountGroup");
            // verify the required parameter 'groupID' is set
            if (groupID == null)
                throw new ApiException(400, "Missing required parameter 'groupID' when calling RootAdminApi->RemoveUsersFromAccountGroup");

            var localVarPath = "/v3/accounts/{accountID}/policy-groups/{groupID}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (groupID != null) localVarPathParams.Add("groupID", Configuration.ApiClient.ParameterToString(groupID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUsersFromAccountGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatedResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedResponse)));
            
        }

        /// <summary>
        /// Reset the secret key. An endpoint for resetting the secret key of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp ResetAccountApiKeySecret (string accountID, string apiKey)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = ResetAccountApiKeySecretWithHttpInfo(accountID, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the secret key. An endpoint for resetting the secret key of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > ResetAccountApiKeySecretWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->ResetAccountApiKeySecret");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RootAdminApi->ResetAccountApiKeySecret");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}/reset-secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetAccountApiKeySecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Reset the secret key. An endpoint for resetting the secret key of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> ResetAccountApiKeySecretAsync (string accountID, string apiKey)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await ResetAccountApiKeySecretAsyncWithHttpInfo(accountID, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset the secret key. An endpoint for resetting the secret key of the API key.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be reset.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> ResetAccountApiKeySecretAsyncWithHttpInfo (string accountID, string apiKey)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->ResetAccountApiKeySecret");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RootAdminApi->ResetAccountApiKeySecret");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}/reset-secret";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetAccountApiKeySecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Reset the user password. An endpoint for resetting the user password. The new password will visible in the response.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp ResetAccountUserPassword (string accountID, string userId)
        {
             ApiResponse<UserInfoResp> localVarResponse = ResetAccountUserPasswordWithHttpInfo(accountID, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the user password. An endpoint for resetting the user password. The new password will visible in the response.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > ResetAccountUserPasswordWithHttpInfo (string accountID, string userId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->ResetAccountUserPassword");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->ResetAccountUserPassword");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/reset-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetAccountUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Reset the user password. An endpoint for resetting the user password. The new password will visible in the response.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> ResetAccountUserPasswordAsync (string accountID, string userId)
        {
             ApiResponse<UserInfoResp> localVarResponse = await ResetAccountUserPasswordAsyncWithHttpInfo(accountID, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset the user password. An endpoint for resetting the user password. The new password will visible in the response.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user whose password is reset.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> ResetAccountUserPasswordAsyncWithHttpInfo (string accountID, string userId)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->ResetAccountUserPassword");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->ResetAccountUserPassword");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}/reset-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetAccountUserPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiKeyInfoResp</returns>
        public ApiKeyInfoResp UpdateAccountApiKey (string accountID, string apiKey, RootAdminApiKeyUpdateReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = UpdateAccountApiKeyWithHttpInfo(accountID, apiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>ApiResponse of ApiKeyInfoResp</returns>
        public ApiResponse< ApiKeyInfoResp > UpdateAccountApiKeyWithHttpInfo (string accountID, string apiKey, RootAdminApiKeyUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->UpdateAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RootAdminApi->UpdateAccountApiKey");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->UpdateAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiKeyInfoResp</returns>
        public async System.Threading.Tasks.Task<ApiKeyInfoResp> UpdateAccountApiKeyAsync (string accountID, string apiKey, RootAdminApiKeyUpdateReq body)
        {
             ApiResponse<ApiKeyInfoResp> localVarResponse = await UpdateAccountApiKeyAsyncWithHttpInfo(accountID, apiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update API key details. An endpoint for updating API key details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="apiKey">The ID of the API key to be updated.</param>
        /// <param name="body">New API key attributes to be stored.</param>
        /// <returns>Task of ApiResponse (ApiKeyInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKeyInfoResp>> UpdateAccountApiKeyAsyncWithHttpInfo (string accountID, string apiKey, RootAdminApiKeyUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->UpdateAccountApiKey");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RootAdminApi->UpdateAccountApiKey");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->UpdateAccountApiKey");

            var localVarPath = "/v3/accounts/{accountID}/api-keys/{apiKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (apiKey != null) localVarPathParams.Add("apiKey", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountApiKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKeyInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKeyInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKeyInfoResp)));
            
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>TrustedCertificateInternalResp</returns>
        public TrustedCertificateInternalResp UpdateAccountCertificate (string accountID, string certId, TrustedCertificateReq body)
        {
             ApiResponse<TrustedCertificateInternalResp> localVarResponse = UpdateAccountCertificateWithHttpInfo(accountID, certId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>ApiResponse of TrustedCertificateInternalResp</returns>
        public ApiResponse< TrustedCertificateInternalResp > UpdateAccountCertificateWithHttpInfo (string accountID, string certId, TrustedCertificateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->UpdateAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling RootAdminApi->UpdateAccountCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->UpdateAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalResp)));
            
        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of TrustedCertificateInternalResp</returns>
        public async System.Threading.Tasks.Task<TrustedCertificateInternalResp> UpdateAccountCertificateAsync (string accountID, string certId, TrustedCertificateReq body)
        {
             ApiResponse<TrustedCertificateInternalResp> localVarResponse = await UpdateAccountCertificateAsyncWithHttpInfo(accountID, certId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update trusted certificate. An endpoint for updating existing trusted certificates.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="certId">The ID of the trusted certificate to be updated.</param>
        /// <param name="body">A trusted certificate object with attributes.</param>
        /// <returns>Task of ApiResponse (TrustedCertificateInternalResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrustedCertificateInternalResp>> UpdateAccountCertificateAsyncWithHttpInfo (string accountID, string certId, TrustedCertificateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->UpdateAccountCertificate");
            // verify the required parameter 'certId' is set
            if (certId == null)
                throw new ApiException(400, "Missing required parameter 'certId' when calling RootAdminApi->UpdateAccountCertificate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->UpdateAccountCertificate");

            var localVarPath = "/v3/accounts/{accountID}/trusted-certificates/{cert-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (certId != null) localVarPathParams.Add("cert-id", Configuration.ApiClient.ParameterToString(certId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrustedCertificateInternalResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrustedCertificateInternalResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrustedCertificateInternalResp)));
            
        }

        /// <summary>
        /// Update an existing account template. An endpoint for updating an existing account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>AccountTemplateResp</returns>
        public AccountTemplateResp UpdateAccountTemplate (string templateId, AccountTemplateReq body)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = UpdateAccountTemplateWithHttpInfo(templateId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing account template. An endpoint for updating an existing account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        public ApiResponse< AccountTemplateResp > UpdateAccountTemplateWithHttpInfo (string templateId, AccountTemplateReq body)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->UpdateAccountTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->UpdateAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Update an existing account template. An endpoint for updating an existing account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        public async System.Threading.Tasks.Task<AccountTemplateResp> UpdateAccountTemplateAsync (string templateId, AccountTemplateReq body)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = await UpdateAccountTemplateAsyncWithHttpInfo(templateId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing account template. An endpoint for updating an existing account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> UpdateAccountTemplateAsyncWithHttpInfo (string templateId, AccountTemplateReq body)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->UpdateAccountTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->UpdateAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A rootadmin user object with attributes.</param>
        /// <returns>UserInfoResp</returns>
        public UserInfoResp UpdateAccountUser (string accountID, string userId, RootAdminUserUpdateReq body)
        {
             ApiResponse<UserInfoResp> localVarResponse = UpdateAccountUserWithHttpInfo(accountID, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A rootadmin user object with attributes.</param>
        /// <returns>ApiResponse of UserInfoResp</returns>
        public ApiResponse< UserInfoResp > UpdateAccountUserWithHttpInfo (string accountID, string userId, RootAdminUserUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->UpdateAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->UpdateAccountUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->UpdateAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A rootadmin user object with attributes.</param>
        /// <returns>Task of UserInfoResp</returns>
        public async System.Threading.Tasks.Task<UserInfoResp> UpdateAccountUserAsync (string accountID, string userId, RootAdminUserUpdateReq body)
        {
             ApiResponse<UserInfoResp> localVarResponse = await UpdateAccountUserAsyncWithHttpInfo(accountID, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user details. An endpoint for updating user details.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountID">Account ID.</param>
        /// <param name="userId">The ID of the user to be updated.</param>
        /// <param name="body">A rootadmin user object with attributes.</param>
        /// <returns>Task of ApiResponse (UserInfoResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInfoResp>> UpdateAccountUserAsyncWithHttpInfo (string accountID, string userId, RootAdminUserUpdateReq body)
        {
            // verify the required parameter 'accountID' is set
            if (accountID == null)
                throw new ApiException(400, "Missing required parameter 'accountID' when calling RootAdminApi->UpdateAccountUser");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RootAdminApi->UpdateAccountUser");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->UpdateAccountUser");

            var localVarPath = "/v3/accounts/{accountID}/users/{user-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountID != null) localVarPathParams.Add("accountID", Configuration.ApiClient.ParameterToString(accountID)); // path parameter
            if (userId != null) localVarPathParams.Add("user-id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInfoResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInfoResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInfoResp)));
            
        }

    }
}
