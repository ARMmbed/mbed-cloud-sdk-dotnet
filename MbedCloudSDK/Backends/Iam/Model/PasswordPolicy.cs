/* 
 * <auto-generated>
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = iam.Client.SwaggerDateConverter;

namespace iam.Model
{
    /// <summary>
    /// PasswordPolicy
    /// </summary>
    [DataContract]
    public partial class PasswordPolicy :  IEquatable<PasswordPolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordPolicy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PasswordPolicy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordPolicy" /> class.
        /// </summary>
        /// <param name="MinimumLength">Minimum length for the password. A number between 8 and 512. (required).</param>
        public PasswordPolicy(string MinimumLength = default(string))
        {
            // to ensure "MinimumLength" is required (not null)
            if (MinimumLength == null)
            {
                throw new InvalidDataException("MinimumLength is a required property for PasswordPolicy and cannot be null");
            }
            else
            {
                this.MinimumLength = MinimumLength;
            }
        }
        
        /// <summary>
        /// Minimum length for the password. A number between 8 and 512.
        /// </summary>
        /// <value>Minimum length for the password. A number between 8 and 512.</value>
        [DataMember(Name="minimum_length", EmitDefaultValue=false)]
        public string MinimumLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PasswordPolicy {\n");
            sb.Append("  MinimumLength: ").Append(MinimumLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PasswordPolicy);
        }

        /// <summary>
        /// Returns true if PasswordPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of PasswordPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordPolicy other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MinimumLength == other.MinimumLength ||
                    this.MinimumLength != null &&
                    this.MinimumLength.Equals(other.MinimumLength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MinimumLength != null)
                    hash = hash * 59 + this.MinimumLength.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
