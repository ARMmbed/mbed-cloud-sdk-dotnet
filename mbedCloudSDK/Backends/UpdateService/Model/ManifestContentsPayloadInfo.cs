/* 
 * Update Service API
 *
 * This is the API Documentation for the mbed deployment service which is part of the update service.
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace update_service.Model
{
    /// <summary>
    /// ManifestContentsPayloadInfo
    /// </summary>
    [DataContract]
    public partial class ManifestContentsPayloadInfo :  IEquatable<ManifestContentsPayloadInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestContentsPayloadInfo" /> class.
        /// </summary>
        /// <param name="Size">Size.</param>
        /// <param name="StorageIdentifier">StorageIdentifier.</param>
        /// <param name="Payload">Payload.</param>
        /// <param name="EncryptionInfo">EncryptionInfo.</param>
        /// <param name="Format">Format.</param>
        public ManifestContentsPayloadInfo(int? Size = default(int?), string StorageIdentifier = default(string), ManifestContentsPayloadInfoPayload Payload = default(ManifestContentsPayloadInfoPayload), ManifestContentsPayloadInfoEncryptionInfo EncryptionInfo = default(ManifestContentsPayloadInfoEncryptionInfo), ManifestContentsPayloadInfoFormat Format = default(ManifestContentsPayloadInfoFormat))
        {
            this.Size = Size;
            this.StorageIdentifier = StorageIdentifier;
            this.Payload = Payload;
            this.EncryptionInfo = EncryptionInfo;
            this.Format = Format;
        }
        
        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }
        /// <summary>
        /// Gets or Sets StorageIdentifier
        /// </summary>
        [DataMember(Name="storageIdentifier", EmitDefaultValue=false)]
        public string StorageIdentifier { get; set; }
        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public ManifestContentsPayloadInfoPayload Payload { get; set; }
        /// <summary>
        /// Gets or Sets EncryptionInfo
        /// </summary>
        [DataMember(Name="encryptionInfo", EmitDefaultValue=false)]
        public ManifestContentsPayloadInfoEncryptionInfo EncryptionInfo { get; set; }
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public ManifestContentsPayloadInfoFormat Format { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManifestContentsPayloadInfo {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  StorageIdentifier: ").Append(StorageIdentifier).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  EncryptionInfo: ").Append(EncryptionInfo).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ManifestContentsPayloadInfo);
        }

        /// <summary>
        /// Returns true if ManifestContentsPayloadInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ManifestContentsPayloadInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManifestContentsPayloadInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Size == other.Size ||
                    this.Size != null &&
                    this.Size.Equals(other.Size)
                ) && 
                (
                    this.StorageIdentifier == other.StorageIdentifier ||
                    this.StorageIdentifier != null &&
                    this.StorageIdentifier.Equals(other.StorageIdentifier)
                ) && 
                (
                    this.Payload == other.Payload ||
                    this.Payload != null &&
                    this.Payload.Equals(other.Payload)
                ) && 
                (
                    this.EncryptionInfo == other.EncryptionInfo ||
                    this.EncryptionInfo != null &&
                    this.EncryptionInfo.Equals(other.EncryptionInfo)
                ) && 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Size != null)
                    hash = hash * 59 + this.Size.GetHashCode();
                if (this.StorageIdentifier != null)
                    hash = hash * 59 + this.StorageIdentifier.GetHashCode();
                if (this.Payload != null)
                    hash = hash * 59 + this.Payload.GetHashCode();
                if (this.EncryptionInfo != null)
                    hash = hash * 59 + this.EncryptionInfo.GetHashCode();
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
