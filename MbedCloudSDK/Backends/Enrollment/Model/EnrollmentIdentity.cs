/* 
 * <auto-generated>
 * Enrollment API
 *
 * Mbed Cloud Connect Enrollment Service allows users to claim the ownership of a device which is not yet assigned to an account. A device without an assigned account can be a device purchased from the open market (OEM dealer) or a device trasferred from an account to another. More information in [Device overship: First-to-claim](TODO: link needed) document. 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = enrollment.Client.SwaggerDateConverter;

namespace enrollment.Model
{
    /// <summary>
    /// EnrollmentIdentity
    /// </summary>
    [DataContract]
    public partial class EnrollmentIdentity :  IEquatable<EnrollmentIdentity>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets _Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum Enrollment for "enrollment"
            /// </summary>
            [EnumMember(Value = "enrollment")]
            Enrollment
        }

        /// <summary>
        /// Gets or Sets _Object
        /// </summary>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum? _Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrollmentIdentity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnrollmentIdentity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrollmentIdentity" /> class.
        /// </summary>
        /// <param name="_EnrollmentIdentity">Enrollment identity..</param>
        /// <param name="_Object">_Object.</param>
        /// <param name="AccountId">muuid (required).</param>
        /// <param name="CreatedAt">The time of the enrollment identity creation. (required).</param>
        /// <param name="ClaimedAt">The time of claiming the device to be assigned to the account..</param>
        /// <param name="ExpiresAt">The enrollment claim expiration time. If the device does not connect to Mbed Cloud before the expiration, the claim is removed without a separate notice (required).</param>
        /// <param name="EnrolledDeviceId">Enrolled device internal ID.</param>
        /// <param name="Etag">Etag (required).</param>
        /// <param name="Id">Enrollment identity internal id (required).</param>
        /// <param name="DeviceId">The ID of the device in the Device Directory once it has been registered..</param>
        public EnrollmentIdentity(string _EnrollmentIdentity = default(string), ObjectEnum? _Object = default(ObjectEnum?), string AccountId = default(string), DateTime? CreatedAt = default(DateTime?), DateTime? ClaimedAt = default(DateTime?), DateTime? ExpiresAt = default(DateTime?), string EnrolledDeviceId = default(string), string Etag = default(string), string Id = default(string), string DeviceId = default(string))
        {
            // to ensure "AccountId" is required (not null)
            if (AccountId == null)
            {
                throw new InvalidDataException("AccountId is a required property for EnrollmentIdentity and cannot be null");
            }
            else
            {
                this.AccountId = AccountId;
            }
            // to ensure "CreatedAt" is required (not null)
            if (CreatedAt == null)
            {
                throw new InvalidDataException("CreatedAt is a required property for EnrollmentIdentity and cannot be null");
            }
            else
            {
                this.CreatedAt = CreatedAt;
            }
            // to ensure "ExpiresAt" is required (not null)
            if (ExpiresAt == null)
            {
                throw new InvalidDataException("ExpiresAt is a required property for EnrollmentIdentity and cannot be null");
            }
            else
            {
                this.ExpiresAt = ExpiresAt;
            }
            // to ensure "Etag" is required (not null)
            if (Etag == null)
            {
                throw new InvalidDataException("Etag is a required property for EnrollmentIdentity and cannot be null");
            }
            else
            {
                this.Etag = Etag;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EnrollmentIdentity and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            this._EnrollmentIdentity = _EnrollmentIdentity;
            this._Object = _Object;
            this.ClaimedAt = ClaimedAt;
            this.EnrolledDeviceId = EnrolledDeviceId;
            this.DeviceId = DeviceId;
        }
        
        /// <summary>
        /// Enrollment identity.
        /// </summary>
        /// <value>Enrollment identity.</value>
        [DataMember(Name="enrollment_identity", EmitDefaultValue=false)]
        public string _EnrollmentIdentity { get; set; }


        /// <summary>
        /// muuid
        /// </summary>
        /// <value>muuid</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The time of the enrollment identity creation.
        /// </summary>
        /// <value>The time of the enrollment identity creation.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// The time of claiming the device to be assigned to the account.
        /// </summary>
        /// <value>The time of claiming the device to be assigned to the account.</value>
        [DataMember(Name="claimed_at", EmitDefaultValue=false)]
        public DateTime? ClaimedAt { get; set; }

        /// <summary>
        /// The enrollment claim expiration time. If the device does not connect to Mbed Cloud before the expiration, the claim is removed without a separate notice
        /// </summary>
        /// <value>The enrollment claim expiration time. If the device does not connect to Mbed Cloud before the expiration, the claim is removed without a separate notice</value>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Enrolled device internal ID
        /// </summary>
        /// <value>Enrolled device internal ID</value>
        [DataMember(Name="enrolled_device_id", EmitDefaultValue=false)]
        public string EnrolledDeviceId { get; set; }

        /// <summary>
        /// Gets or Sets Etag
        /// </summary>
        [DataMember(Name="etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Enrollment identity internal id
        /// </summary>
        /// <value>Enrollment identity internal id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the device in the Device Directory once it has been registered.
        /// </summary>
        /// <value>The ID of the device in the Device Directory once it has been registered.</value>
        [DataMember(Name="device_id", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnrollmentIdentity {\n");
            sb.Append("  _EnrollmentIdentity: ").Append(_EnrollmentIdentity).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ClaimedAt: ").Append(ClaimedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  EnrolledDeviceId: ").Append(EnrolledDeviceId).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnrollmentIdentity);
        }

        /// <summary>
        /// Returns true if EnrollmentIdentity instances are equal
        /// </summary>
        /// <param name="input">Instance of EnrollmentIdentity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnrollmentIdentity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._EnrollmentIdentity == input._EnrollmentIdentity ||
                    (this._EnrollmentIdentity != null &&
                    this._EnrollmentIdentity.Equals(input._EnrollmentIdentity))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ClaimedAt == input.ClaimedAt ||
                    (this.ClaimedAt != null &&
                    this.ClaimedAt.Equals(input.ClaimedAt))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.EnrolledDeviceId == input.EnrolledDeviceId ||
                    (this.EnrolledDeviceId != null &&
                    this.EnrolledDeviceId.Equals(input.EnrolledDeviceId))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._EnrollmentIdentity != null)
                    hashCode = hashCode * 59 + this._EnrollmentIdentity.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ClaimedAt != null)
                    hashCode = hashCode * 59 + this.ClaimedAt.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.EnrolledDeviceId != null)
                    hashCode = hashCode * 59 + this.EnrolledDeviceId.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // _EnrollmentIdentity (string) pattern
            Regex regex_EnrollmentIdentity = new Regex(@"^A-[A-Za-z0-9:]{95}$", RegexOptions.CultureInvariant);
            if (false == regex_EnrollmentIdentity.Match(this._EnrollmentIdentity).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for _EnrollmentIdentity, must match a pattern of " + regex_EnrollmentIdentity, new [] { "_EnrollmentIdentity" });
            }

            // EnrolledDeviceId (string) pattern
            Regex regexEnrolledDeviceId = new Regex(@"^[A-Za-z0-9]{32}", RegexOptions.CultureInvariant);
            if (false == regexEnrolledDeviceId.Match(this.EnrolledDeviceId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnrolledDeviceId, must match a pattern of " + regexEnrolledDeviceId, new [] { "EnrolledDeviceId" });
            }

            // Etag (string) pattern
            Regex regexEtag = new Regex(@"[A-Za-z0-9]{1,256}", RegexOptions.CultureInvariant);
            if (false == regexEtag.Match(this.Etag).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Etag, must match a pattern of " + regexEtag, new [] { "Etag" });
            }

            // Id (string) pattern
            Regex regexId = new Regex(@"^[A-Za-z0-9]{32}", RegexOptions.CultureInvariant);
            if (false == regexId.Match(this.Id).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
            }

            yield break;
        }
    }

}
