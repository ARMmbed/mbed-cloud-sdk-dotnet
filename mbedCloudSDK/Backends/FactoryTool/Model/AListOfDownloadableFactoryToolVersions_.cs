/* 
 * Provisioning endpoints - the factory provisioning package.
 *
 * The factory provisioning package needs to be installed in factories to enroll devices onto the mbed Cloud ecosystem.  These APIs allow downloading the most recent version of the factory provisioning package for various operating systems. 
 *
 * OpenAPI spec version: 0.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace factory_tool.Model
{
    /// <summary>
    /// AListOfDownloadableFactoryToolVersions_
    /// </summary>
    [DataContract]
    public partial class AListOfDownloadableFactoryToolVersions_ :  IEquatable<AListOfDownloadableFactoryToolVersions_>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AListOfDownloadableFactoryToolVersions_" /> class.
        /// </summary>
        /// <param name="LinArchiveInfo">LinArchiveInfo.</param>
        /// <param name="WinArchiveInfo">WinArchiveInfo.</param>
        public AListOfDownloadableFactoryToolVersions_(FactoryToolDownload LinArchiveInfo = default(FactoryToolDownload), FactoryToolDownload WinArchiveInfo = default(FactoryToolDownload))
        {
            this.LinArchiveInfo = LinArchiveInfo;
            this.WinArchiveInfo = WinArchiveInfo;
        }
        
        /// <summary>
        /// Gets or Sets LinArchiveInfo
        /// </summary>
        [DataMember(Name="linArchiveInfo", EmitDefaultValue=false)]
        public FactoryToolDownload LinArchiveInfo { get; set; }
        /// <summary>
        /// Gets or Sets WinArchiveInfo
        /// </summary>
        [DataMember(Name="winArchiveInfo", EmitDefaultValue=false)]
        public FactoryToolDownload WinArchiveInfo { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AListOfDownloadableFactoryToolVersions_ {\n");
            sb.Append("  LinArchiveInfo: ").Append(LinArchiveInfo).Append("\n");
            sb.Append("  WinArchiveInfo: ").Append(WinArchiveInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AListOfDownloadableFactoryToolVersions_);
        }

        /// <summary>
        /// Returns true if AListOfDownloadableFactoryToolVersions_ instances are equal
        /// </summary>
        /// <param name="other">Instance of AListOfDownloadableFactoryToolVersions_ to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AListOfDownloadableFactoryToolVersions_ other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.LinArchiveInfo == other.LinArchiveInfo ||
                    this.LinArchiveInfo != null &&
                    this.LinArchiveInfo.Equals(other.LinArchiveInfo)
                ) && 
                (
                    this.WinArchiveInfo == other.WinArchiveInfo ||
                    this.WinArchiveInfo != null &&
                    this.WinArchiveInfo.Equals(other.WinArchiveInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.LinArchiveInfo != null)
                    hash = hash * 59 + this.LinArchiveInfo.GetHashCode();
                if (this.WinArchiveInfo != null)
                    hash = hash * 59 + this.WinArchiveInfo.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
