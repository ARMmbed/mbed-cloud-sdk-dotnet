/* 
 * IAM Identities REST API
 *
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace iam.Model
{
    /// <summary>
    /// This object represents an account template in responses.
    /// </summary>
    [DataContract]
    public partial class AccountTemplateResp :  IEquatable<AccountTemplateResp>, IValidatableObject
    {
        /// <summary>
        /// Entity name: always 'account-template'
        /// </summary>
        /// <value>Entity name: always 'account-template'</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            
            /// <summary>
            /// Enum User for "user"
            /// </summary>
            [EnumMember(Value = "user")]
            User,
            
            /// <summary>
            /// Enum Apikey for "api-key"
            /// </summary>
            [EnumMember(Value = "api-key")]
            Apikey,
            
            /// <summary>
            /// Enum Group for "group"
            /// </summary>
            [EnumMember(Value = "group")]
            Group,
            
            /// <summary>
            /// Enum Account for "account"
            /// </summary>
            [EnumMember(Value = "account")]
            Account,
            
            /// <summary>
            /// Enum Accounttemplate for "account-template"
            /// </summary>
            [EnumMember(Value = "account-template")]
            Accounttemplate,
            
            /// <summary>
            /// Enum Trustedcert for "trusted-cert"
            /// </summary>
            [EnumMember(Value = "trusted-cert")]
            Trustedcert,
            
            /// <summary>
            /// Enum List for "list"
            /// </summary>
            [EnumMember(Value = "list")]
            List,
            
            /// <summary>
            /// Enum Error for "error"
            /// </summary>
            [EnumMember(Value = "error")]
            Error
        }

        /// <summary>
        /// Entity name: always 'account-template'
        /// </summary>
        /// <value>Entity name: always 'account-template'</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum? _Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountTemplateResp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountTemplateResp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountTemplateResp" /> class.
        /// </summary>
        /// <param name="Limits">List of limits as name-value pairs..</param>
        /// <param name="Name">Account template name. (required).</param>
        /// <param name="Parent">ID of the parent template, can be null..</param>
        /// <param name="CreatedAt">Creation UTC time RFC3339..</param>
        /// <param name="_Object">Entity name: always &#39;account-template&#39; (required).</param>
        /// <param name="TemplateType">Account template type. (required).</param>
        /// <param name="Etag">API resource entity version. (required).</param>
        /// <param name="CreationTimeMillis">CreationTimeMillis.</param>
        /// <param name="History">List of editorial history for the account template..</param>
        /// <param name="Id">Entity ID. (required).</param>
        /// <param name="Resources">List of resource-action-allow triplets, policies..</param>
        /// <param name="Description">Account template description..</param>
        public AccountTemplateResp(Dictionary<string, string> Limits = default(Dictionary<string, string>), string Name = default(string), string Parent = default(string), string CreatedAt = default(string), ObjectEnum? _Object = default(ObjectEnum?), string TemplateType = default(string), string Etag = default(string), long? CreationTimeMillis = default(long?), List<string> History = default(List<string>), string Id = default(string), List<Policy> Resources = default(List<Policy>), string Description = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for AccountTemplateResp and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "_Object" is required (not null)
            if (_Object == null)
            {
                throw new InvalidDataException("_Object is a required property for AccountTemplateResp and cannot be null");
            }
            else
            {
                this._Object = _Object;
            }
            // to ensure "TemplateType" is required (not null)
            if (TemplateType == null)
            {
                throw new InvalidDataException("TemplateType is a required property for AccountTemplateResp and cannot be null");
            }
            else
            {
                this.TemplateType = TemplateType;
            }
            // to ensure "Etag" is required (not null)
            if (Etag == null)
            {
                throw new InvalidDataException("Etag is a required property for AccountTemplateResp and cannot be null");
            }
            else
            {
                this.Etag = Etag;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for AccountTemplateResp and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            this.Limits = Limits;
            this.Parent = Parent;
            this.CreatedAt = CreatedAt;
            this.CreationTimeMillis = CreationTimeMillis;
            this.History = History;
            this.Resources = Resources;
            this.Description = Description;
        }
        
        /// <summary>
        /// List of limits as name-value pairs.
        /// </summary>
        /// <value>List of limits as name-value pairs.</value>
        [DataMember(Name="limits", EmitDefaultValue=false)]
        public Dictionary<string, string> Limits { get; set; }
        /// <summary>
        /// Account template name.
        /// </summary>
        /// <value>Account template name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// ID of the parent template, can be null.
        /// </summary>
        /// <value>ID of the parent template, can be null.</value>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public string Parent { get; set; }
        /// <summary>
        /// Creation UTC time RFC3339.
        /// </summary>
        /// <value>Creation UTC time RFC3339.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Account template type.
        /// </summary>
        /// <value>Account template type.</value>
        [DataMember(Name="template_type", EmitDefaultValue=false)]
        public string TemplateType { get; set; }
        /// <summary>
        /// API resource entity version.
        /// </summary>
        /// <value>API resource entity version.</value>
        [DataMember(Name="etag", EmitDefaultValue=false)]
        public string Etag { get; set; }
        /// <summary>
        /// Gets or Sets CreationTimeMillis
        /// </summary>
        [DataMember(Name="creationTimeMillis", EmitDefaultValue=false)]
        public long? CreationTimeMillis { get; set; }
        /// <summary>
        /// List of editorial history for the account template.
        /// </summary>
        /// <value>List of editorial history for the account template.</value>
        [DataMember(Name="history", EmitDefaultValue=false)]
        public List<string> History { get; set; }
        /// <summary>
        /// Entity ID.
        /// </summary>
        /// <value>Entity ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// List of resource-action-allow triplets, policies.
        /// </summary>
        /// <value>List of resource-action-allow triplets, policies.</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<Policy> Resources { get; set; }
        /// <summary>
        /// Account template description.
        /// </summary>
        /// <value>Account template description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountTemplateResp {\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  CreationTimeMillis: ").Append(CreationTimeMillis).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccountTemplateResp);
        }

        /// <summary>
        /// Returns true if AccountTemplateResp instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountTemplateResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountTemplateResp other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Limits == other.Limits ||
                    this.Limits != null &&
                    this.Limits.SequenceEqual(other.Limits)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Parent == other.Parent ||
                    this.Parent != null &&
                    this.Parent.Equals(other.Parent)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this._Object == other._Object ||
                    this._Object != null &&
                    this._Object.Equals(other._Object)
                ) && 
                (
                    this.TemplateType == other.TemplateType ||
                    this.TemplateType != null &&
                    this.TemplateType.Equals(other.TemplateType)
                ) && 
                (
                    this.Etag == other.Etag ||
                    this.Etag != null &&
                    this.Etag.Equals(other.Etag)
                ) && 
                (
                    this.CreationTimeMillis == other.CreationTimeMillis ||
                    this.CreationTimeMillis != null &&
                    this.CreationTimeMillis.Equals(other.CreationTimeMillis)
                ) && 
                (
                    this.History == other.History ||
                    this.History != null &&
                    this.History.SequenceEqual(other.History)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Resources == other.Resources ||
                    this.Resources != null &&
                    this.Resources.SequenceEqual(other.Resources)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Limits != null)
                    hash = hash * 59 + this.Limits.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Parent != null)
                    hash = hash * 59 + this.Parent.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this._Object != null)
                    hash = hash * 59 + this._Object.GetHashCode();
                if (this.TemplateType != null)
                    hash = hash * 59 + this.TemplateType.GetHashCode();
                if (this.Etag != null)
                    hash = hash * 59 + this.Etag.GetHashCode();
                if (this.CreationTimeMillis != null)
                    hash = hash * 59 + this.CreationTimeMillis.GetHashCode();
                if (this.History != null)
                    hash = hash * 59 + this.History.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Resources != null)
                    hash = hash * 59 + this.Resources.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
