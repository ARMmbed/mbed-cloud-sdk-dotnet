// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 1.0.0
//
// <copyright file="PolicyGroup.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace MbedCloudSDK.Entities.PolicyGroup
{
    using MbedCloudSDK.Common;
    using System;
    using MbedCloudSDK.Common.Query;
    using MbedCloudSDK.Entities.ApiKey;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using MbedCloudSDK.Client;
    using MbedCloudSDK.Exceptions;
    using RestSharp;
    using MbedCloudSDK.Entities.User;
    using MbedCloudSDK.Common.Extensions;
    using MbedCloudSDK.Common.Renames;

    /// <summary>
    /// PolicyGroup
    /// </summary>
    public partial class PolicyGroup : BaseModel
    {
        public PolicyGroup()
        {
        }

        public PolicyGroup(Config config)
        {
            Config = config;
        }

        /// <summary>
        /// The UUID of the account this group belongs to.
        /// </summary>
        public string AccountId
        {
            get;
            set;
        }

        /// <summary>
        /// The number of API keys in this group.
        /// </summary>
        public int? ApikeyCount
        {
            get;
            set;
        }

        /// <summary>
        /// Creation UTC time RFC3339.
        /// </summary>
        public DateTime? CreatedAt
        {
            get;
            set;
        }

        /// <summary>
        /// The name of the group.
        /// </summary>
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Last update UTC time RFC3339.
        /// </summary>
        public DateTime? UpdatedAt
        {
            get;
            set;
        }

        /// <summary>
        /// The number of users in this group.
        /// </summary>
        public int? UserCount
        {
            get;
            set;
        }

        public PaginatedResponse<QueryOptions, ApiKey> ApiKeys(string after = null, string include = null, int? limit = null, string order = null)
        {
            object data = null;
            var options = new QueryOptions { After = after, Include = include, Limit = limit, Order = order, };
            try
            {
                Func<QueryOptions, ResponsePage<ApiKey>> paginatedFunc = (QueryOptions _options) => { return AsyncHelper.RunSync<ResponsePage<ApiKey>>(() => MbedCloudSDK.Client.ApiCall.CallApi<ResponsePage<ApiKey>>(path: "/v3/policy-groups/{groupID}/api-keys", method: Method.GET, settings: SerializationSettings.GetSettingsWithRenames(Renames.RenamesDict), accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, pathParams: new Dictionary<string, object>() { { "groupID", Id }, }, queryParams: new Dictionary<string, object>() { { "after", after }, { "include", include }, { "limit", limit }, { "order", order }, }, configuration: Config)); };
                return new PaginatedResponse<QueryOptions, ApiKey>(paginatedFunc, options);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<PolicyGroup> Get()
        {
            object data = null;
            try
            {
                return await MbedCloudSDK.Client.ApiCall.CallApi<PolicyGroup>(path: "/v3/policy-groups/{groupID}", method: Method.GET, settings: SerializationSettings.GetSettingsWithRenames(Renames.RenamesDict), populateObject: true, objectToPopulate: this, accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, pathParams: new Dictionary<string, object>() { { "groupID", Id }, }, configuration: Config);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<QueryOptions, PolicyGroup> List(string after = null, string include = null, int? limit = null, string nameEq = null, string order = null)
        {
            object data = null;
            var options = new QueryOptions { After = after, Include = include, Limit = limit, Order = order, };
            try
            {
                Func<QueryOptions, ResponsePage<PolicyGroup>> paginatedFunc = (QueryOptions _options) => { return AsyncHelper.RunSync<ResponsePage<PolicyGroup>>(() => MbedCloudSDK.Client.ApiCall.CallApi<ResponsePage<PolicyGroup>>(path: "/v3/policy-groups", method: Method.GET, settings: SerializationSettings.GetSettingsWithRenames(Renames.RenamesDict), accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, queryParams: new Dictionary<string, object>() { { "after", after }, { "include", include }, { "limit", limit }, { "nameEq", nameEq }, { "order", order }, }, configuration: Config)); };
                return new PaginatedResponse<QueryOptions, PolicyGroup>(paginatedFunc, options);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<QueryOptions, User> Users(string after = null, string include = null, int? limit = null, string order = null)
        {
            object data = null;
            var options = new QueryOptions { After = after, Include = include, Limit = limit, Order = order, };
            try
            {
                Func<QueryOptions, ResponsePage<User>> paginatedFunc = (QueryOptions _options) => { return AsyncHelper.RunSync<ResponsePage<User>>(() => MbedCloudSDK.Client.ApiCall.CallApi<ResponsePage<User>>(path: "/v3/policy-groups/{groupID}/users", method: Method.GET, settings: SerializationSettings.GetSettingsWithRenames(Renames.RenamesDict), accepts: new string[] { "application/json" }, contentTypes: new string[] { "application/json" }, body: data, pathParams: new Dictionary<string, object>() { { "groupID", Id }, }, queryParams: new Dictionary<string, object>() { { "after", after }, { "include", include }, { "limit", limit }, { "order", order }, }, configuration: Config)); };
                return new PaginatedResponse<QueryOptions, User>(paginatedFunc, options);
            }
            catch (MbedCloudSDK.Client.ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        /// <summary>
        /// Get human readable string of this object
        /// </summary>
        /// <returns>Serialized string of object</returns>
        public override string ToString()
            => this.DebugDump();
    }
}