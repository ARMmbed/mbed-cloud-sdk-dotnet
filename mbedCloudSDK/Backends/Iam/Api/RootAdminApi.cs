/* 
 * IAM Identities REST API
 *
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using iam.Client;
using iam.Model;

namespace iam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRootAdminApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new account template.
        /// </summary>
        /// <remarks>
        /// Endpoint for creating a new account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>AccountTemplateResp</returns>
        AccountTemplateResp CreateAccountTemplate (AccountTemplateReq body);

        /// <summary>
        /// Create a new account template.
        /// </summary>
        /// <remarks>
        /// Endpoint for creating a new account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        ApiResponse<AccountTemplateResp> CreateAccountTemplateWithHttpInfo (AccountTemplateReq body);
        /// <summary>
        /// Delete account template by ID.
        /// </summary>
        /// <remarks>
        /// Endpoint for deleting a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns></returns>
        void DeleteAccountTemplate (string templateId);

        /// <summary>
        /// Delete account template by ID.
        /// </summary>
        /// <remarks>
        /// Endpoint for deleting a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountTemplateWithHttpInfo (string templateId);
        /// <summary>
        /// Get account template by ID.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>AccountTemplateResp</returns>
        AccountTemplateResp GetAccountTemplate (string templateId);

        /// <summary>
        /// Get account template by ID.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        ApiResponse<AccountTemplateResp> GetAccountTemplateWithHttpInfo (string templateId);
        /// <summary>
        /// Get all account templates.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving account templates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity id to fetch after it (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separate additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>AccountTemplateRespList</returns>
        AccountTemplateRespList GetAllAccountTemplates (int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get all account templates.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving account templates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity id to fetch after it (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separate additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of AccountTemplateRespList</returns>
        ApiResponse<AccountTemplateRespList> GetAllAccountTemplatesWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Update an existing account template.
        /// </summary>
        /// <remarks>
        /// Endpoint for updating an existing account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>AccountTemplateResp</returns>
        AccountTemplateResp UpdateAccountTemplate (string templateId, AccountTemplateReq body);

        /// <summary>
        /// Update an existing account template.
        /// </summary>
        /// <remarks>
        /// Endpoint for updating an existing account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        ApiResponse<AccountTemplateResp> UpdateAccountTemplateWithHttpInfo (string templateId, AccountTemplateReq body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new account template.
        /// </summary>
        /// <remarks>
        /// Endpoint for creating a new account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        System.Threading.Tasks.Task<AccountTemplateResp> CreateAccountTemplateAsync (AccountTemplateReq body);

        /// <summary>
        /// Create a new account template.
        /// </summary>
        /// <remarks>
        /// Endpoint for creating a new account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> CreateAccountTemplateAsyncWithHttpInfo (AccountTemplateReq body);
        /// <summary>
        /// Delete account template by ID.
        /// </summary>
        /// <remarks>
        /// Endpoint for deleting a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountTemplateAsync (string templateId);

        /// <summary>
        /// Delete account template by ID.
        /// </summary>
        /// <remarks>
        /// Endpoint for deleting a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountTemplateAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Get account template by ID.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        System.Threading.Tasks.Task<AccountTemplateResp> GetAccountTemplateAsync (string templateId);

        /// <summary>
        /// Get account template by ID.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving a account template by ID.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> GetAccountTemplateAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Get all account templates.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving account templates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity id to fetch after it (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separate additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of AccountTemplateRespList</returns>
        System.Threading.Tasks.Task<AccountTemplateRespList> GetAllAccountTemplatesAsync (int? limit = null, string after = null, string order = null, string include = null);

        /// <summary>
        /// Get all account templates.
        /// </summary>
        /// <remarks>
        /// Endpoint for retrieving account templates in an array.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity id to fetch after it (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separate additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (AccountTemplateRespList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountTemplateRespList>> GetAllAccountTemplatesAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null);
        /// <summary>
        /// Update an existing account template.
        /// </summary>
        /// <remarks>
        /// Endpoint for updating an existing account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        System.Threading.Tasks.Task<AccountTemplateResp> UpdateAccountTemplateAsync (string templateId, AccountTemplateReq body);

        /// <summary>
        /// Update an existing account template.
        /// </summary>
        /// <remarks>
        /// Endpoint for updating an existing account template.
        /// </remarks>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> UpdateAccountTemplateAsyncWithHttpInfo (string templateId, AccountTemplateReq body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RootAdminApi : IRootAdminApi
    {
        private iam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RootAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RootAdminApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RootAdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RootAdminApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = iam.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public iam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new account template. Endpoint for creating a new account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>AccountTemplateResp</returns>
        public AccountTemplateResp CreateAccountTemplate (AccountTemplateReq body)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = CreateAccountTemplateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new account template. Endpoint for creating a new account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        public ApiResponse< AccountTemplateResp > CreateAccountTemplateWithHttpInfo (AccountTemplateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccountTemplate");

            var localVarPath = "/admin/v3/account-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Create a new account template. Endpoint for creating a new account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        public async System.Threading.Tasks.Task<AccountTemplateResp> CreateAccountTemplateAsync (AccountTemplateReq body)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = await CreateAccountTemplateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new account template. Endpoint for creating a new account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Details of the account template to be created.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> CreateAccountTemplateAsyncWithHttpInfo (AccountTemplateReq body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->CreateAccountTemplate");

            var localVarPath = "/admin/v3/account-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Delete account template by ID. Endpoint for deleting a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns></returns>
        public void DeleteAccountTemplate (string templateId)
        {
             DeleteAccountTemplateWithHttpInfo(templateId);
        }

        /// <summary>
        /// Delete account template by ID. Endpoint for deleting a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountTemplateWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->DeleteAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete account template by ID. Endpoint for deleting a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountTemplateAsync (string templateId)
        {
             await DeleteAccountTemplateAsyncWithHttpInfo(templateId);

        }

        /// <summary>
        /// Delete account template by ID. Endpoint for deleting a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be deleted.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountTemplateAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->DeleteAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get account template by ID. Endpoint for retrieving a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>AccountTemplateResp</returns>
        public AccountTemplateResp GetAccountTemplate (string templateId)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = GetAccountTemplateWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get account template by ID. Endpoint for retrieving a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        public ApiResponse< AccountTemplateResp > GetAccountTemplateWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->GetAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Get account template by ID. Endpoint for retrieving a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        public async System.Threading.Tasks.Task<AccountTemplateResp> GetAccountTemplateAsync (string templateId)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = await GetAccountTemplateAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get account template by ID. Endpoint for retrieving a account template by ID.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be retrieved.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> GetAccountTemplateAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->GetAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Get all account templates. Endpoint for retrieving account templates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity id to fetch after it (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separate additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>AccountTemplateRespList</returns>
        public AccountTemplateRespList GetAllAccountTemplates (int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<AccountTemplateRespList> localVarResponse = GetAllAccountTemplatesWithHttpInfo(limit, after, order, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all account templates. Endpoint for retrieving account templates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity id to fetch after it (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separate additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of AccountTemplateRespList</returns>
        public ApiResponse< AccountTemplateRespList > GetAllAccountTemplatesWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null)
        {

            var localVarPath = "/admin/v3/account-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateRespList)));
            
        }

        /// <summary>
        /// Get all account templates. Endpoint for retrieving account templates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity id to fetch after it (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separate additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of AccountTemplateRespList</returns>
        public async System.Threading.Tasks.Task<AccountTemplateRespList> GetAllAccountTemplatesAsync (int? limit = null, string after = null, string order = null, string include = null)
        {
             ApiResponse<AccountTemplateRespList> localVarResponse = await GetAllAccountTemplatesAsyncWithHttpInfo(limit, after, order, include);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all account templates. Endpoint for retrieving account templates in an array.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results to return (2-1000), default is 50. (optional, default to 50)</param>
        /// <param name="after">The entity id to fetch after it (optional)</param>
        /// <param name="order">The order of the records, ASC or DESC. Default value is ASC (optional, default to ASC)</param>
        /// <param name="include">Comma separate additional data to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (AccountTemplateRespList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountTemplateRespList>> GetAllAccountTemplatesAsyncWithHttpInfo (int? limit = null, string after = null, string order = null, string include = null)
        {

            var localVarPath = "/admin/v3/account-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateRespList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateRespList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateRespList)));
            
        }

        /// <summary>
        /// Update an existing account template. Endpoint for updating an existing account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>AccountTemplateResp</returns>
        public AccountTemplateResp UpdateAccountTemplate (string templateId, AccountTemplateReq body)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = UpdateAccountTemplateWithHttpInfo(templateId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing account template. Endpoint for updating an existing account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>ApiResponse of AccountTemplateResp</returns>
        public ApiResponse< AccountTemplateResp > UpdateAccountTemplateWithHttpInfo (string templateId, AccountTemplateReq body)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->UpdateAccountTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->UpdateAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

        /// <summary>
        /// Update an existing account template. Endpoint for updating an existing account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>Task of AccountTemplateResp</returns>
        public async System.Threading.Tasks.Task<AccountTemplateResp> UpdateAccountTemplateAsync (string templateId, AccountTemplateReq body)
        {
             ApiResponse<AccountTemplateResp> localVarResponse = await UpdateAccountTemplateAsyncWithHttpInfo(templateId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing account template. Endpoint for updating an existing account template.
        /// </summary>
        /// <exception cref="iam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the account template to be updated.</param>
        /// <param name="body">Details of the account template to be updated.</param>
        /// <returns>Task of ApiResponse (AccountTemplateResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountTemplateResp>> UpdateAccountTemplateAsyncWithHttpInfo (string templateId, AccountTemplateReq body)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling RootAdminApi->UpdateAccountTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RootAdminApi->UpdateAccountTemplate");

            var localVarPath = "/admin/v3/account-templates/{template-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (templateId != null) localVarPathParams.Add("template-id", Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountTemplateResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountTemplateResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountTemplateResp)));
            
        }

    }
}
