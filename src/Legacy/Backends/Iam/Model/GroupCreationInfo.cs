/* 
 * <auto-generated>
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = iam.Client.SwaggerDateConverter;

namespace iam.Model
{
    /// <summary>
    /// This object is used when creating new groups.
    /// </summary>
    [DataContract]
    public partial class GroupCreationInfo :  IEquatable<GroupCreationInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupCreationInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupCreationInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupCreationInfo" /> class.
        /// </summary>
        /// <param name="Members">The members of the group as arrays of user and API key UUIDs..</param>
        /// <param name="Name">The group name, not longer than 100 characters. (required).</param>
        public GroupCreationInfo(SubjectList Members = default(SubjectList), string Name = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for GroupCreationInfo and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Members = Members;
        }
        
        /// <summary>
        /// The members of the group as arrays of user and API key UUIDs.
        /// </summary>
        /// <value>The members of the group as arrays of user and API key UUIDs.</value>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public SubjectList Members { get; set; }

        /// <summary>
        /// The group name, not longer than 100 characters.
        /// </summary>
        /// <value>The group name, not longer than 100 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupCreationInfo {\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupCreationInfo);
        }

        /// <summary>
        /// Returns true if GroupCreationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupCreationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupCreationInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Members == input.Members ||
                    (this.Members != null &&
                    this.Members.Equals(input.Members))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Members != null)
                    hashCode = hashCode * 59 + this.Members.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
