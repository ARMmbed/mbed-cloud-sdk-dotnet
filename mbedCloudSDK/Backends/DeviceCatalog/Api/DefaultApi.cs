/* 
 * Device Catalog API
 *
 * This is the API Documentation for the mbed device catalog update service.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using device_catalog.Client;
using device_catalog.Model;

namespace device_catalog.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="device"></param>
        /// <returns>DeviceData</returns>
        DeviceData DeviceCreate (DeviceDataWriteRequest device);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="device"></param>
        /// <returns>ApiResponse of DeviceData</returns>
        ApiResponse<DeviceData> DeviceCreateWithHttpInfo (DeviceDataWriteRequest device);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Object</returns>
        Object DeviceDestroy (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeviceDestroyWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-properties-all-properties-are-filterable\&quot;&gt;By device properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state&#x3D;[unenrolled|cloud_enrolling|bootstrapped|registered]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;bootstrapped&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="attestationMethod"> (optional)</param>
        /// <param name="autoUpdate"> (optional)</param>
        /// <param name="bootstrapExpirationDate"> (optional)</param>
        /// <param name="bootstrapExpirationDateLte"> (optional)</param>
        /// <param name="bootstrapExpirationDateGte"> (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="bootstrappedTimestampLte"> (optional)</param>
        /// <param name="bootstrappedTimestampGte"> (optional)</param>
        /// <param name="caId"> (optional)</param>
        /// <param name="connectorExpirationDate"> (optional)</param>
        /// <param name="connectorExpirationDateLte"> (optional)</param>
        /// <param name="connectorExpirationDateGte"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="customAttributes"> (optional)</param>
        /// <param name="deployedState"> (optional)</param>
        /// <param name="deployment"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="deviceKey"> (optional)</param>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="firmwareChecksum"> (optional)</param>
        /// <param name="manifest"> (optional)</param>
        /// <param name="manifestTimestamp"> (optional)</param>
        /// <param name="manifestTimestampLte"> (optional)</param>
        /// <param name="manifestTimestampGte"> (optional)</param>
        /// <param name="mechanism"> (optional)</param>
        /// <param name="mechanismUrl"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="trustClass"> (optional)</param>
        /// <param name="trustLevel"> (optional)</param>
        /// <param name="updatedAt"> (optional)</param>
        /// <param name="updatedAtLte"> (optional)</param>
        /// <param name="updatedAtGte"> (optional)</param>
        /// <param name="vendorId"> (optional)</param>
        /// <returns>DevicePage</returns>
        DevicePage DeviceList (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string accountId = null, int? attestationMethod = null, bool? autoUpdate = null, string bootstrapExpirationDate = null, string bootstrapExpirationDateLte = null, string bootstrapExpirationDateGte = null, string bootstrappedTimestamp = null, string bootstrappedTimestampLte = null, string bootstrappedTimestampGte = null, string caId = null, string connectorExpirationDate = null, string connectorExpirationDateLte = null, string connectorExpirationDateGte = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string id = null, string deviceKey = null, string endpointName = null, string etag = null, string etagLte = null, string etagGte = null, string firmwareChecksum = null, string manifest = null, string manifestTimestamp = null, string manifestTimestampLte = null, string manifestTimestampGte = null, string mechanism = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, string trustClass = null, string trustLevel = null, string updatedAt = null, string updatedAtLte = null, string updatedAtGte = null, string vendorId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-properties-all-properties-are-filterable\&quot;&gt;By device properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state&#x3D;[unenrolled|cloud_enrolling|bootstrapped|registered]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;bootstrapped&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="attestationMethod"> (optional)</param>
        /// <param name="autoUpdate"> (optional)</param>
        /// <param name="bootstrapExpirationDate"> (optional)</param>
        /// <param name="bootstrapExpirationDateLte"> (optional)</param>
        /// <param name="bootstrapExpirationDateGte"> (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="bootstrappedTimestampLte"> (optional)</param>
        /// <param name="bootstrappedTimestampGte"> (optional)</param>
        /// <param name="caId"> (optional)</param>
        /// <param name="connectorExpirationDate"> (optional)</param>
        /// <param name="connectorExpirationDateLte"> (optional)</param>
        /// <param name="connectorExpirationDateGte"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="customAttributes"> (optional)</param>
        /// <param name="deployedState"> (optional)</param>
        /// <param name="deployment"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="deviceKey"> (optional)</param>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="firmwareChecksum"> (optional)</param>
        /// <param name="manifest"> (optional)</param>
        /// <param name="manifestTimestamp"> (optional)</param>
        /// <param name="manifestTimestampLte"> (optional)</param>
        /// <param name="manifestTimestampGte"> (optional)</param>
        /// <param name="mechanism"> (optional)</param>
        /// <param name="mechanismUrl"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="trustClass"> (optional)</param>
        /// <param name="trustLevel"> (optional)</param>
        /// <param name="updatedAt"> (optional)</param>
        /// <param name="updatedAtLte"> (optional)</param>
        /// <param name="updatedAtGte"> (optional)</param>
        /// <param name="vendorId"> (optional)</param>
        /// <returns>ApiResponse of DevicePage</returns>
        ApiResponse<DevicePage> DeviceListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string accountId = null, int? attestationMethod = null, bool? autoUpdate = null, string bootstrapExpirationDate = null, string bootstrapExpirationDateLte = null, string bootstrapExpirationDateGte = null, string bootstrappedTimestamp = null, string bootstrappedTimestampLte = null, string bootstrappedTimestampGte = null, string caId = null, string connectorExpirationDate = null, string connectorExpirationDateLte = null, string connectorExpirationDateGte = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string id = null, string deviceKey = null, string endpointName = null, string etag = null, string etagLte = null, string etagGte = null, string firmwareChecksum = null, string manifest = null, string manifestTimestamp = null, string manifestTimestampLte = null, string manifestTimestampGte = null, string mechanism = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, string trustClass = null, string trustLevel = null, string updatedAt = null, string updatedAtLte = null, string updatedAtGte = null, string vendorId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device95id\&quot;&gt;By id:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;id&#x3D;{id}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-state-change\&quot;&gt;By state change:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state_change&#x3D;[True|False]&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-event-type\&quot;&gt;By event type:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;event_type&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-attributes\&quot;&gt;By Device attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__deployed_state&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__name&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;id&#x3D;0158d38771f70000000000010010038c&amp;amp;state_change&#x3D;True&amp;amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <returns>DeviceLogPage</returns>
        DeviceLogPage DeviceLogList (int? limit = null, string order = null, string after = null, string filter = null, string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device95id\&quot;&gt;By id:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;id&#x3D;{id}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-state-change\&quot;&gt;By state change:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state_change&#x3D;[True|False]&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-event-type\&quot;&gt;By event type:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;event_type&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-attributes\&quot;&gt;By Device attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__deployed_state&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__name&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;id&#x3D;0158d38771f70000000000010010038c&amp;amp;state_change&#x3D;True&amp;amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of DeviceLogPage</returns>
        ApiResponse<DeviceLogPage> DeviceLogListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>DeviceLogData</returns>
        DeviceLogData DeviceLogRetrieve (string deviceLogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>ApiResponse of DeviceLogData</returns>
        ApiResponse<DeviceLogData> DeviceLogRetrieveWithHttpInfo (string deviceLogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>DeviceData</returns>
        DeviceData DevicePartialUpdate (string id, DeviceDataPatchRequest device);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>ApiResponse of DeviceData</returns>
        ApiResponse<DeviceData> DevicePartialUpdateWithHttpInfo (string id, DeviceDataPatchRequest device);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DeviceData</returns>
        DeviceData DeviceRetrieve (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DeviceData</returns>
        ApiResponse<DeviceData> DeviceRetrieveWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>DeviceData</returns>
        DeviceData DeviceUpdate (string id, DeviceDataWriteRequest device);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>ApiResponse of DeviceData</returns>
        ApiResponse<DeviceData> DeviceUpdateWithHttpInfo (string id, DeviceDataWriteRequest device);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="device"></param>
        /// <returns>Task of DeviceData</returns>
        System.Threading.Tasks.Task<DeviceData> DeviceCreateAsync (DeviceDataWriteRequest device);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="device"></param>
        /// <returns>Task of ApiResponse (DeviceData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceData>> DeviceCreateAsyncWithHttpInfo (DeviceDataWriteRequest device);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeviceDestroyAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeviceDestroyAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-properties-all-properties-are-filterable\&quot;&gt;By device properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state&#x3D;[unenrolled|cloud_enrolling|bootstrapped|registered]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;bootstrapped&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="attestationMethod"> (optional)</param>
        /// <param name="autoUpdate"> (optional)</param>
        /// <param name="bootstrapExpirationDate"> (optional)</param>
        /// <param name="bootstrapExpirationDateLte"> (optional)</param>
        /// <param name="bootstrapExpirationDateGte"> (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="bootstrappedTimestampLte"> (optional)</param>
        /// <param name="bootstrappedTimestampGte"> (optional)</param>
        /// <param name="caId"> (optional)</param>
        /// <param name="connectorExpirationDate"> (optional)</param>
        /// <param name="connectorExpirationDateLte"> (optional)</param>
        /// <param name="connectorExpirationDateGte"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="customAttributes"> (optional)</param>
        /// <param name="deployedState"> (optional)</param>
        /// <param name="deployment"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="deviceKey"> (optional)</param>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="firmwareChecksum"> (optional)</param>
        /// <param name="manifest"> (optional)</param>
        /// <param name="manifestTimestamp"> (optional)</param>
        /// <param name="manifestTimestampLte"> (optional)</param>
        /// <param name="manifestTimestampGte"> (optional)</param>
        /// <param name="mechanism"> (optional)</param>
        /// <param name="mechanismUrl"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="trustClass"> (optional)</param>
        /// <param name="trustLevel"> (optional)</param>
        /// <param name="updatedAt"> (optional)</param>
        /// <param name="updatedAtLte"> (optional)</param>
        /// <param name="updatedAtGte"> (optional)</param>
        /// <param name="vendorId"> (optional)</param>
        /// <returns>Task of DevicePage</returns>
        System.Threading.Tasks.Task<DevicePage> DeviceListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string accountId = null, int? attestationMethod = null, bool? autoUpdate = null, string bootstrapExpirationDate = null, string bootstrapExpirationDateLte = null, string bootstrapExpirationDateGte = null, string bootstrappedTimestamp = null, string bootstrappedTimestampLte = null, string bootstrappedTimestampGte = null, string caId = null, string connectorExpirationDate = null, string connectorExpirationDateLte = null, string connectorExpirationDateGte = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string id = null, string deviceKey = null, string endpointName = null, string etag = null, string etagLte = null, string etagGte = null, string firmwareChecksum = null, string manifest = null, string manifestTimestamp = null, string manifestTimestampLte = null, string manifestTimestampGte = null, string mechanism = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, string trustClass = null, string trustLevel = null, string updatedAt = null, string updatedAtLte = null, string updatedAtGte = null, string vendorId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-properties-all-properties-are-filterable\&quot;&gt;By device properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state&#x3D;[unenrolled|cloud_enrolling|bootstrapped|registered]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;bootstrapped&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="attestationMethod"> (optional)</param>
        /// <param name="autoUpdate"> (optional)</param>
        /// <param name="bootstrapExpirationDate"> (optional)</param>
        /// <param name="bootstrapExpirationDateLte"> (optional)</param>
        /// <param name="bootstrapExpirationDateGte"> (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="bootstrappedTimestampLte"> (optional)</param>
        /// <param name="bootstrappedTimestampGte"> (optional)</param>
        /// <param name="caId"> (optional)</param>
        /// <param name="connectorExpirationDate"> (optional)</param>
        /// <param name="connectorExpirationDateLte"> (optional)</param>
        /// <param name="connectorExpirationDateGte"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="customAttributes"> (optional)</param>
        /// <param name="deployedState"> (optional)</param>
        /// <param name="deployment"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="deviceKey"> (optional)</param>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="firmwareChecksum"> (optional)</param>
        /// <param name="manifest"> (optional)</param>
        /// <param name="manifestTimestamp"> (optional)</param>
        /// <param name="manifestTimestampLte"> (optional)</param>
        /// <param name="manifestTimestampGte"> (optional)</param>
        /// <param name="mechanism"> (optional)</param>
        /// <param name="mechanismUrl"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="trustClass"> (optional)</param>
        /// <param name="trustLevel"> (optional)</param>
        /// <param name="updatedAt"> (optional)</param>
        /// <param name="updatedAtLte"> (optional)</param>
        /// <param name="updatedAtGte"> (optional)</param>
        /// <param name="vendorId"> (optional)</param>
        /// <returns>Task of ApiResponse (DevicePage)</returns>
        System.Threading.Tasks.Task<ApiResponse<DevicePage>> DeviceListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string accountId = null, int? attestationMethod = null, bool? autoUpdate = null, string bootstrapExpirationDate = null, string bootstrapExpirationDateLte = null, string bootstrapExpirationDateGte = null, string bootstrappedTimestamp = null, string bootstrappedTimestampLte = null, string bootstrappedTimestampGte = null, string caId = null, string connectorExpirationDate = null, string connectorExpirationDateLte = null, string connectorExpirationDateGte = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string id = null, string deviceKey = null, string endpointName = null, string etag = null, string etagLte = null, string etagGte = null, string firmwareChecksum = null, string manifest = null, string manifestTimestamp = null, string manifestTimestampLte = null, string manifestTimestampGte = null, string mechanism = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, string trustClass = null, string trustLevel = null, string updatedAt = null, string updatedAtLte = null, string updatedAtGte = null, string vendorId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device95id\&quot;&gt;By id:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;id&#x3D;{id}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-state-change\&quot;&gt;By state change:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state_change&#x3D;[True|False]&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-event-type\&quot;&gt;By event type:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;event_type&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-attributes\&quot;&gt;By Device attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__deployed_state&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__name&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;id&#x3D;0158d38771f70000000000010010038c&amp;amp;state_change&#x3D;True&amp;amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of DeviceLogPage</returns>
        System.Threading.Tasks.Task<DeviceLogPage> DeviceLogListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device95id\&quot;&gt;By id:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;id&#x3D;{id}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-state-change\&quot;&gt;By state change:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state_change&#x3D;[True|False]&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-event-type\&quot;&gt;By event type:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;event_type&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-attributes\&quot;&gt;By Device attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__deployed_state&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__name&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;id&#x3D;0158d38771f70000000000010010038c&amp;amp;state_change&#x3D;True&amp;amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&lt;/code&gt;&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (DeviceLogPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceLogPage>> DeviceLogListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>Task of DeviceLogData</returns>
        System.Threading.Tasks.Task<DeviceLogData> DeviceLogRetrieveAsync (string deviceLogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>Task of ApiResponse (DeviceLogData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceLogData>> DeviceLogRetrieveAsyncWithHttpInfo (string deviceLogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>Task of DeviceData</returns>
        System.Threading.Tasks.Task<DeviceData> DevicePartialUpdateAsync (string id, DeviceDataPatchRequest device);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>Task of ApiResponse (DeviceData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceData>> DevicePartialUpdateAsyncWithHttpInfo (string id, DeviceDataPatchRequest device);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DeviceData</returns>
        System.Threading.Tasks.Task<DeviceData> DeviceRetrieveAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DeviceData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceData>> DeviceRetrieveAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>Task of DeviceData</returns>
        System.Threading.Tasks.Task<DeviceData> DeviceUpdateAsync (string id, DeviceDataWriteRequest device);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>Task of ApiResponse (DeviceData)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceData>> DeviceUpdateAsyncWithHttpInfo (string id, DeviceDataWriteRequest device);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private device_catalog.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = device_catalog.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = device_catalog.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public device_catalog.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="device"></param>
        /// <returns>DeviceData</returns>
        public DeviceData DeviceCreate (DeviceDataWriteRequest device)
        {
             ApiResponse<DeviceData> localVarResponse = DeviceCreateWithHttpInfo(device);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="device"></param>
        /// <returns>ApiResponse of DeviceData</returns>
        public ApiResponse< DeviceData > DeviceCreateWithHttpInfo (DeviceDataWriteRequest device)
        {
            // verify the required parameter 'device' is set
            if (device == null)
                throw new ApiException(400, "Missing required parameter 'device' when calling DefaultApi->DeviceCreate");

            var localVarPath = "/v3/devices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (device != null && device.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(device); // http body (model) parameter
            }
            else
            {
                localVarPostBody = device; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceData)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="device"></param>
        /// <returns>Task of DeviceData</returns>
        public async System.Threading.Tasks.Task<DeviceData> DeviceCreateAsync (DeviceDataWriteRequest device)
        {
             ApiResponse<DeviceData> localVarResponse = await DeviceCreateAsyncWithHttpInfo(device);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="device"></param>
        /// <returns>Task of ApiResponse (DeviceData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceData>> DeviceCreateAsyncWithHttpInfo (DeviceDataWriteRequest device)
        {
            // verify the required parameter 'device' is set
            if (device == null)
                throw new ApiException(400, "Missing required parameter 'device' when calling DefaultApi->DeviceCreate");

            var localVarPath = "/v3/devices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (device != null && device.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(device); // http body (model) parameter
            }
            else
            {
                localVarPostBody = device; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceData)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Object</returns>
        public Object DeviceDestroy (string id)
        {
             ApiResponse<Object> localVarResponse = DeviceDestroyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeviceDestroyWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeviceDestroy");

            var localVarPath = "/v3/devices/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceDestroy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeviceDestroyAsync (string id)
        {
             ApiResponse<Object> localVarResponse = await DeviceDestroyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeviceDestroyAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeviceDestroy");

            var localVarPath = "/v3/devices/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceDestroy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-properties-all-properties-are-filterable\&quot;&gt;By device properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state&#x3D;[unenrolled|cloud_enrolling|bootstrapped|registered]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;bootstrapped&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="attestationMethod"> (optional)</param>
        /// <param name="autoUpdate"> (optional)</param>
        /// <param name="bootstrapExpirationDate"> (optional)</param>
        /// <param name="bootstrapExpirationDateLte"> (optional)</param>
        /// <param name="bootstrapExpirationDateGte"> (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="bootstrappedTimestampLte"> (optional)</param>
        /// <param name="bootstrappedTimestampGte"> (optional)</param>
        /// <param name="caId"> (optional)</param>
        /// <param name="connectorExpirationDate"> (optional)</param>
        /// <param name="connectorExpirationDateLte"> (optional)</param>
        /// <param name="connectorExpirationDateGte"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="customAttributes"> (optional)</param>
        /// <param name="deployedState"> (optional)</param>
        /// <param name="deployment"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="deviceKey"> (optional)</param>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="firmwareChecksum"> (optional)</param>
        /// <param name="manifest"> (optional)</param>
        /// <param name="manifestTimestamp"> (optional)</param>
        /// <param name="manifestTimestampLte"> (optional)</param>
        /// <param name="manifestTimestampGte"> (optional)</param>
        /// <param name="mechanism"> (optional)</param>
        /// <param name="mechanismUrl"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="trustClass"> (optional)</param>
        /// <param name="trustLevel"> (optional)</param>
        /// <param name="updatedAt"> (optional)</param>
        /// <param name="updatedAtLte"> (optional)</param>
        /// <param name="updatedAtGte"> (optional)</param>
        /// <param name="vendorId"> (optional)</param>
        /// <returns>DevicePage</returns>
        public DevicePage DeviceList (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string accountId = null, int? attestationMethod = null, bool? autoUpdate = null, string bootstrapExpirationDate = null, string bootstrapExpirationDateLte = null, string bootstrapExpirationDateGte = null, string bootstrappedTimestamp = null, string bootstrappedTimestampLte = null, string bootstrappedTimestampGte = null, string caId = null, string connectorExpirationDate = null, string connectorExpirationDateLte = null, string connectorExpirationDateGte = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string id = null, string deviceKey = null, string endpointName = null, string etag = null, string etagLte = null, string etagGte = null, string firmwareChecksum = null, string manifest = null, string manifestTimestamp = null, string manifestTimestampLte = null, string manifestTimestampGte = null, string mechanism = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, string trustClass = null, string trustLevel = null, string updatedAt = null, string updatedAtLte = null, string updatedAtGte = null, string vendorId = null)
        {
             ApiResponse<DevicePage> localVarResponse = DeviceListWithHttpInfo(limit, order, after, filter, include, accountId, attestationMethod, autoUpdate, bootstrapExpirationDate, bootstrapExpirationDateLte, bootstrapExpirationDateGte, bootstrappedTimestamp, bootstrappedTimestampLte, bootstrappedTimestampGte, caId, connectorExpirationDate, connectorExpirationDateLte, connectorExpirationDateGte, createdAt, createdAtLte, createdAtGte, customAttributes, deployedState, deployment, description, deviceClass, id, deviceKey, endpointName, etag, etagLte, etagGte, firmwareChecksum, manifest, manifestTimestamp, manifestTimestampLte, manifestTimestampGte, mechanism, mechanismUrl, name, _object, serialNumber, state, trustClass, trustLevel, updatedAt, updatedAtLte, updatedAtGte, vendorId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-properties-all-properties-are-filterable\&quot;&gt;By device properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state&#x3D;[unenrolled|cloud_enrolling|bootstrapped|registered]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;bootstrapped&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="attestationMethod"> (optional)</param>
        /// <param name="autoUpdate"> (optional)</param>
        /// <param name="bootstrapExpirationDate"> (optional)</param>
        /// <param name="bootstrapExpirationDateLte"> (optional)</param>
        /// <param name="bootstrapExpirationDateGte"> (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="bootstrappedTimestampLte"> (optional)</param>
        /// <param name="bootstrappedTimestampGte"> (optional)</param>
        /// <param name="caId"> (optional)</param>
        /// <param name="connectorExpirationDate"> (optional)</param>
        /// <param name="connectorExpirationDateLte"> (optional)</param>
        /// <param name="connectorExpirationDateGte"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="customAttributes"> (optional)</param>
        /// <param name="deployedState"> (optional)</param>
        /// <param name="deployment"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="deviceKey"> (optional)</param>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="firmwareChecksum"> (optional)</param>
        /// <param name="manifest"> (optional)</param>
        /// <param name="manifestTimestamp"> (optional)</param>
        /// <param name="manifestTimestampLte"> (optional)</param>
        /// <param name="manifestTimestampGte"> (optional)</param>
        /// <param name="mechanism"> (optional)</param>
        /// <param name="mechanismUrl"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="trustClass"> (optional)</param>
        /// <param name="trustLevel"> (optional)</param>
        /// <param name="updatedAt"> (optional)</param>
        /// <param name="updatedAtLte"> (optional)</param>
        /// <param name="updatedAtGte"> (optional)</param>
        /// <param name="vendorId"> (optional)</param>
        /// <returns>ApiResponse of DevicePage</returns>
        public ApiResponse< DevicePage > DeviceListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string accountId = null, int? attestationMethod = null, bool? autoUpdate = null, string bootstrapExpirationDate = null, string bootstrapExpirationDateLte = null, string bootstrapExpirationDateGte = null, string bootstrappedTimestamp = null, string bootstrappedTimestampLte = null, string bootstrappedTimestampGte = null, string caId = null, string connectorExpirationDate = null, string connectorExpirationDateLte = null, string connectorExpirationDateGte = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string id = null, string deviceKey = null, string endpointName = null, string etag = null, string etagLte = null, string etagGte = null, string firmwareChecksum = null, string manifest = null, string manifestTimestamp = null, string manifestTimestampLte = null, string manifestTimestampGte = null, string mechanism = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, string trustClass = null, string trustLevel = null, string updatedAt = null, string updatedAtLte = null, string updatedAtGte = null, string vendorId = null)
        {

            var localVarPath = "/v3/devices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (accountId != null) localVarQueryParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // query parameter
            if (attestationMethod != null) localVarQueryParams.Add("attestation_method", Configuration.ApiClient.ParameterToString(attestationMethod)); // query parameter
            if (autoUpdate != null) localVarQueryParams.Add("auto_update", Configuration.ApiClient.ParameterToString(autoUpdate)); // query parameter
            if (bootstrapExpirationDate != null) localVarQueryParams.Add("bootstrap_expiration_date", Configuration.ApiClient.ParameterToString(bootstrapExpirationDate)); // query parameter
            if (bootstrapExpirationDateLte != null) localVarQueryParams.Add("bootstrap_expiration_date__lte", Configuration.ApiClient.ParameterToString(bootstrapExpirationDateLte)); // query parameter
            if (bootstrapExpirationDateGte != null) localVarQueryParams.Add("bootstrap_expiration_date__gte", Configuration.ApiClient.ParameterToString(bootstrapExpirationDateGte)); // query parameter
            if (bootstrappedTimestamp != null) localVarQueryParams.Add("bootstrapped_timestamp", Configuration.ApiClient.ParameterToString(bootstrappedTimestamp)); // query parameter
            if (bootstrappedTimestampLte != null) localVarQueryParams.Add("bootstrapped_timestamp__lte", Configuration.ApiClient.ParameterToString(bootstrappedTimestampLte)); // query parameter
            if (bootstrappedTimestampGte != null) localVarQueryParams.Add("bootstrapped_timestamp__gte", Configuration.ApiClient.ParameterToString(bootstrappedTimestampGte)); // query parameter
            if (caId != null) localVarQueryParams.Add("ca_id", Configuration.ApiClient.ParameterToString(caId)); // query parameter
            if (connectorExpirationDate != null) localVarQueryParams.Add("connector_expiration_date", Configuration.ApiClient.ParameterToString(connectorExpirationDate)); // query parameter
            if (connectorExpirationDateLte != null) localVarQueryParams.Add("connector_expiration_date__lte", Configuration.ApiClient.ParameterToString(connectorExpirationDateLte)); // query parameter
            if (connectorExpirationDateGte != null) localVarQueryParams.Add("connector_expiration_date__gte", Configuration.ApiClient.ParameterToString(connectorExpirationDateGte)); // query parameter
            if (createdAt != null) localVarQueryParams.Add("created_at", Configuration.ApiClient.ParameterToString(createdAt)); // query parameter
            if (createdAtLte != null) localVarQueryParams.Add("created_at__lte", Configuration.ApiClient.ParameterToString(createdAtLte)); // query parameter
            if (createdAtGte != null) localVarQueryParams.Add("created_at__gte", Configuration.ApiClient.ParameterToString(createdAtGte)); // query parameter
            if (customAttributes != null) localVarQueryParams.Add("custom_attributes", Configuration.ApiClient.ParameterToString(customAttributes)); // query parameter
            if (deployedState != null) localVarQueryParams.Add("deployed_state", Configuration.ApiClient.ParameterToString(deployedState)); // query parameter
            if (deployment != null) localVarQueryParams.Add("deployment", Configuration.ApiClient.ParameterToString(deployment)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (deviceClass != null) localVarQueryParams.Add("device_class", Configuration.ApiClient.ParameterToString(deviceClass)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (deviceKey != null) localVarQueryParams.Add("device_key", Configuration.ApiClient.ParameterToString(deviceKey)); // query parameter
            if (endpointName != null) localVarQueryParams.Add("endpoint_name", Configuration.ApiClient.ParameterToString(endpointName)); // query parameter
            if (etag != null) localVarQueryParams.Add("etag", Configuration.ApiClient.ParameterToString(etag)); // query parameter
            if (etagLte != null) localVarQueryParams.Add("etag__lte", Configuration.ApiClient.ParameterToString(etagLte)); // query parameter
            if (etagGte != null) localVarQueryParams.Add("etag__gte", Configuration.ApiClient.ParameterToString(etagGte)); // query parameter
            if (firmwareChecksum != null) localVarQueryParams.Add("firmware_checksum", Configuration.ApiClient.ParameterToString(firmwareChecksum)); // query parameter
            if (manifest != null) localVarQueryParams.Add("manifest", Configuration.ApiClient.ParameterToString(manifest)); // query parameter
            if (manifestTimestamp != null) localVarQueryParams.Add("manifest_timestamp", Configuration.ApiClient.ParameterToString(manifestTimestamp)); // query parameter
            if (manifestTimestampLte != null) localVarQueryParams.Add("manifest_timestamp__lte", Configuration.ApiClient.ParameterToString(manifestTimestampLte)); // query parameter
            if (manifestTimestampGte != null) localVarQueryParams.Add("manifest_timestamp__gte", Configuration.ApiClient.ParameterToString(manifestTimestampGte)); // query parameter
            if (mechanism != null) localVarQueryParams.Add("mechanism", Configuration.ApiClient.ParameterToString(mechanism)); // query parameter
            if (mechanismUrl != null) localVarQueryParams.Add("mechanism_url", Configuration.ApiClient.ParameterToString(mechanismUrl)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (_object != null) localVarQueryParams.Add("object", Configuration.ApiClient.ParameterToString(_object)); // query parameter
            if (serialNumber != null) localVarQueryParams.Add("serial_number", Configuration.ApiClient.ParameterToString(serialNumber)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (trustClass != null) localVarQueryParams.Add("trust_class", Configuration.ApiClient.ParameterToString(trustClass)); // query parameter
            if (trustLevel != null) localVarQueryParams.Add("trust_level", Configuration.ApiClient.ParameterToString(trustLevel)); // query parameter
            if (updatedAt != null) localVarQueryParams.Add("updated_at", Configuration.ApiClient.ParameterToString(updatedAt)); // query parameter
            if (updatedAtLte != null) localVarQueryParams.Add("updated_at__lte", Configuration.ApiClient.ParameterToString(updatedAtLte)); // query parameter
            if (updatedAtGte != null) localVarQueryParams.Add("updated_at__gte", Configuration.ApiClient.ParameterToString(updatedAtGte)); // query parameter
            if (vendorId != null) localVarQueryParams.Add("vendor_id", Configuration.ApiClient.ParameterToString(vendorId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DevicePage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DevicePage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DevicePage)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-properties-all-properties-are-filterable\&quot;&gt;By device properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state&#x3D;[unenrolled|cloud_enrolling|bootstrapped|registered]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;bootstrapped&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="attestationMethod"> (optional)</param>
        /// <param name="autoUpdate"> (optional)</param>
        /// <param name="bootstrapExpirationDate"> (optional)</param>
        /// <param name="bootstrapExpirationDateLte"> (optional)</param>
        /// <param name="bootstrapExpirationDateGte"> (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="bootstrappedTimestampLte"> (optional)</param>
        /// <param name="bootstrappedTimestampGte"> (optional)</param>
        /// <param name="caId"> (optional)</param>
        /// <param name="connectorExpirationDate"> (optional)</param>
        /// <param name="connectorExpirationDateLte"> (optional)</param>
        /// <param name="connectorExpirationDateGte"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="customAttributes"> (optional)</param>
        /// <param name="deployedState"> (optional)</param>
        /// <param name="deployment"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="deviceKey"> (optional)</param>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="firmwareChecksum"> (optional)</param>
        /// <param name="manifest"> (optional)</param>
        /// <param name="manifestTimestamp"> (optional)</param>
        /// <param name="manifestTimestampLte"> (optional)</param>
        /// <param name="manifestTimestampGte"> (optional)</param>
        /// <param name="mechanism"> (optional)</param>
        /// <param name="mechanismUrl"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="trustClass"> (optional)</param>
        /// <param name="trustLevel"> (optional)</param>
        /// <param name="updatedAt"> (optional)</param>
        /// <param name="updatedAtLte"> (optional)</param>
        /// <param name="updatedAtGte"> (optional)</param>
        /// <param name="vendorId"> (optional)</param>
        /// <returns>Task of DevicePage</returns>
        public async System.Threading.Tasks.Task<DevicePage> DeviceListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string accountId = null, int? attestationMethod = null, bool? autoUpdate = null, string bootstrapExpirationDate = null, string bootstrapExpirationDateLte = null, string bootstrapExpirationDateGte = null, string bootstrappedTimestamp = null, string bootstrappedTimestampLte = null, string bootstrappedTimestampGte = null, string caId = null, string connectorExpirationDate = null, string connectorExpirationDateLte = null, string connectorExpirationDateGte = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string id = null, string deviceKey = null, string endpointName = null, string etag = null, string etagLte = null, string etagGte = null, string firmwareChecksum = null, string manifest = null, string manifestTimestamp = null, string manifestTimestampLte = null, string manifestTimestampGte = null, string mechanism = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, string trustClass = null, string trustLevel = null, string updatedAt = null, string updatedAtLte = null, string updatedAtGte = null, string vendorId = null)
        {
             ApiResponse<DevicePage> localVarResponse = await DeviceListAsyncWithHttpInfo(limit, order, after, filter, include, accountId, attestationMethod, autoUpdate, bootstrapExpirationDate, bootstrapExpirationDateLte, bootstrapExpirationDateGte, bootstrappedTimestamp, bootstrappedTimestampLte, bootstrappedTimestampGte, caId, connectorExpirationDate, connectorExpirationDateLte, connectorExpirationDateGte, createdAt, createdAtLte, createdAtGte, customAttributes, deployedState, deployment, description, deviceClass, id, deviceKey, endpointName, etag, etagLte, etagGte, firmwareChecksum, manifest, manifestTimestamp, manifestTimestampLte, manifestTimestampGte, mechanism, mechanismUrl, name, _object, serialNumber, state, trustClass, trustLevel, updatedAt, updatedAtLte, updatedAtGte, vendorId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-properties-all-properties-are-filterable\&quot;&gt;By device properties (all properties are filterable):&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state&#x3D;[unenrolled|cloud_enrolling|bootstrapped|registered]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;state&#x3D;bootstrapped&amp;amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;state%3Dbootstrapped%26created_at__gte%3D2016-11-30T16%3A25%3A12.1234Z%26created_at__lte%3D2016-11-30T00%3A00%3A00Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="attestationMethod"> (optional)</param>
        /// <param name="autoUpdate"> (optional)</param>
        /// <param name="bootstrapExpirationDate"> (optional)</param>
        /// <param name="bootstrapExpirationDateLte"> (optional)</param>
        /// <param name="bootstrapExpirationDateGte"> (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="bootstrappedTimestampLte"> (optional)</param>
        /// <param name="bootstrappedTimestampGte"> (optional)</param>
        /// <param name="caId"> (optional)</param>
        /// <param name="connectorExpirationDate"> (optional)</param>
        /// <param name="connectorExpirationDateLte"> (optional)</param>
        /// <param name="connectorExpirationDateGte"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="createdAtLte"> (optional)</param>
        /// <param name="createdAtGte"> (optional)</param>
        /// <param name="customAttributes"> (optional)</param>
        /// <param name="deployedState"> (optional)</param>
        /// <param name="deployment"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="id"> (optional)</param>
        /// <param name="deviceKey"> (optional)</param>
        /// <param name="endpointName"> (optional)</param>
        /// <param name="etag"> (optional)</param>
        /// <param name="etagLte"> (optional)</param>
        /// <param name="etagGte"> (optional)</param>
        /// <param name="firmwareChecksum"> (optional)</param>
        /// <param name="manifest"> (optional)</param>
        /// <param name="manifestTimestamp"> (optional)</param>
        /// <param name="manifestTimestampLte"> (optional)</param>
        /// <param name="manifestTimestampGte"> (optional)</param>
        /// <param name="mechanism"> (optional)</param>
        /// <param name="mechanismUrl"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="_object"> (optional)</param>
        /// <param name="serialNumber"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="trustClass"> (optional)</param>
        /// <param name="trustLevel"> (optional)</param>
        /// <param name="updatedAt"> (optional)</param>
        /// <param name="updatedAtLte"> (optional)</param>
        /// <param name="updatedAtGte"> (optional)</param>
        /// <param name="vendorId"> (optional)</param>
        /// <returns>Task of ApiResponse (DevicePage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DevicePage>> DeviceListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null, string accountId = null, int? attestationMethod = null, bool? autoUpdate = null, string bootstrapExpirationDate = null, string bootstrapExpirationDateLte = null, string bootstrapExpirationDateGte = null, string bootstrappedTimestamp = null, string bootstrappedTimestampLte = null, string bootstrappedTimestampGte = null, string caId = null, string connectorExpirationDate = null, string connectorExpirationDateLte = null, string connectorExpirationDateGte = null, string createdAt = null, string createdAtLte = null, string createdAtGte = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string id = null, string deviceKey = null, string endpointName = null, string etag = null, string etagLte = null, string etagGte = null, string firmwareChecksum = null, string manifest = null, string manifestTimestamp = null, string manifestTimestampLte = null, string manifestTimestampGte = null, string mechanism = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, string trustClass = null, string trustLevel = null, string updatedAt = null, string updatedAtLte = null, string updatedAtGte = null, string vendorId = null)
        {

            var localVarPath = "/v3/devices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter
            if (accountId != null) localVarQueryParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // query parameter
            if (attestationMethod != null) localVarQueryParams.Add("attestation_method", Configuration.ApiClient.ParameterToString(attestationMethod)); // query parameter
            if (autoUpdate != null) localVarQueryParams.Add("auto_update", Configuration.ApiClient.ParameterToString(autoUpdate)); // query parameter
            if (bootstrapExpirationDate != null) localVarQueryParams.Add("bootstrap_expiration_date", Configuration.ApiClient.ParameterToString(bootstrapExpirationDate)); // query parameter
            if (bootstrapExpirationDateLte != null) localVarQueryParams.Add("bootstrap_expiration_date__lte", Configuration.ApiClient.ParameterToString(bootstrapExpirationDateLte)); // query parameter
            if (bootstrapExpirationDateGte != null) localVarQueryParams.Add("bootstrap_expiration_date__gte", Configuration.ApiClient.ParameterToString(bootstrapExpirationDateGte)); // query parameter
            if (bootstrappedTimestamp != null) localVarQueryParams.Add("bootstrapped_timestamp", Configuration.ApiClient.ParameterToString(bootstrappedTimestamp)); // query parameter
            if (bootstrappedTimestampLte != null) localVarQueryParams.Add("bootstrapped_timestamp__lte", Configuration.ApiClient.ParameterToString(bootstrappedTimestampLte)); // query parameter
            if (bootstrappedTimestampGte != null) localVarQueryParams.Add("bootstrapped_timestamp__gte", Configuration.ApiClient.ParameterToString(bootstrappedTimestampGte)); // query parameter
            if (caId != null) localVarQueryParams.Add("ca_id", Configuration.ApiClient.ParameterToString(caId)); // query parameter
            if (connectorExpirationDate != null) localVarQueryParams.Add("connector_expiration_date", Configuration.ApiClient.ParameterToString(connectorExpirationDate)); // query parameter
            if (connectorExpirationDateLte != null) localVarQueryParams.Add("connector_expiration_date__lte", Configuration.ApiClient.ParameterToString(connectorExpirationDateLte)); // query parameter
            if (connectorExpirationDateGte != null) localVarQueryParams.Add("connector_expiration_date__gte", Configuration.ApiClient.ParameterToString(connectorExpirationDateGte)); // query parameter
            if (createdAt != null) localVarQueryParams.Add("created_at", Configuration.ApiClient.ParameterToString(createdAt)); // query parameter
            if (createdAtLte != null) localVarQueryParams.Add("created_at__lte", Configuration.ApiClient.ParameterToString(createdAtLte)); // query parameter
            if (createdAtGte != null) localVarQueryParams.Add("created_at__gte", Configuration.ApiClient.ParameterToString(createdAtGte)); // query parameter
            if (customAttributes != null) localVarQueryParams.Add("custom_attributes", Configuration.ApiClient.ParameterToString(customAttributes)); // query parameter
            if (deployedState != null) localVarQueryParams.Add("deployed_state", Configuration.ApiClient.ParameterToString(deployedState)); // query parameter
            if (deployment != null) localVarQueryParams.Add("deployment", Configuration.ApiClient.ParameterToString(deployment)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (deviceClass != null) localVarQueryParams.Add("device_class", Configuration.ApiClient.ParameterToString(deviceClass)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (deviceKey != null) localVarQueryParams.Add("device_key", Configuration.ApiClient.ParameterToString(deviceKey)); // query parameter
            if (endpointName != null) localVarQueryParams.Add("endpoint_name", Configuration.ApiClient.ParameterToString(endpointName)); // query parameter
            if (etag != null) localVarQueryParams.Add("etag", Configuration.ApiClient.ParameterToString(etag)); // query parameter
            if (etagLte != null) localVarQueryParams.Add("etag__lte", Configuration.ApiClient.ParameterToString(etagLte)); // query parameter
            if (etagGte != null) localVarQueryParams.Add("etag__gte", Configuration.ApiClient.ParameterToString(etagGte)); // query parameter
            if (firmwareChecksum != null) localVarQueryParams.Add("firmware_checksum", Configuration.ApiClient.ParameterToString(firmwareChecksum)); // query parameter
            if (manifest != null) localVarQueryParams.Add("manifest", Configuration.ApiClient.ParameterToString(manifest)); // query parameter
            if (manifestTimestamp != null) localVarQueryParams.Add("manifest_timestamp", Configuration.ApiClient.ParameterToString(manifestTimestamp)); // query parameter
            if (manifestTimestampLte != null) localVarQueryParams.Add("manifest_timestamp__lte", Configuration.ApiClient.ParameterToString(manifestTimestampLte)); // query parameter
            if (manifestTimestampGte != null) localVarQueryParams.Add("manifest_timestamp__gte", Configuration.ApiClient.ParameterToString(manifestTimestampGte)); // query parameter
            if (mechanism != null) localVarQueryParams.Add("mechanism", Configuration.ApiClient.ParameterToString(mechanism)); // query parameter
            if (mechanismUrl != null) localVarQueryParams.Add("mechanism_url", Configuration.ApiClient.ParameterToString(mechanismUrl)); // query parameter
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (_object != null) localVarQueryParams.Add("object", Configuration.ApiClient.ParameterToString(_object)); // query parameter
            if (serialNumber != null) localVarQueryParams.Add("serial_number", Configuration.ApiClient.ParameterToString(serialNumber)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (trustClass != null) localVarQueryParams.Add("trust_class", Configuration.ApiClient.ParameterToString(trustClass)); // query parameter
            if (trustLevel != null) localVarQueryParams.Add("trust_level", Configuration.ApiClient.ParameterToString(trustLevel)); // query parameter
            if (updatedAt != null) localVarQueryParams.Add("updated_at", Configuration.ApiClient.ParameterToString(updatedAt)); // query parameter
            if (updatedAtLte != null) localVarQueryParams.Add("updated_at__lte", Configuration.ApiClient.ParameterToString(updatedAtLte)); // query parameter
            if (updatedAtGte != null) localVarQueryParams.Add("updated_at__gte", Configuration.ApiClient.ParameterToString(updatedAtGte)); // query parameter
            if (vendorId != null) localVarQueryParams.Add("vendor_id", Configuration.ApiClient.ParameterToString(vendorId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DevicePage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DevicePage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DevicePage)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device95id\&quot;&gt;By id:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;id&#x3D;{id}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-state-change\&quot;&gt;By state change:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state_change&#x3D;[True|False]&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-event-type\&quot;&gt;By event type:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;event_type&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-attributes\&quot;&gt;By Device attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__deployed_state&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__name&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;id&#x3D;0158d38771f70000000000010010038c&amp;amp;state_change&#x3D;True&amp;amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <returns>DeviceLogPage</returns>
        public DeviceLogPage DeviceLogList (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {
             ApiResponse<DeviceLogPage> localVarResponse = DeviceLogListWithHttpInfo(limit, order, after, filter, include);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device95id\&quot;&gt;By id:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;id&#x3D;{id}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-state-change\&quot;&gt;By state change:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state_change&#x3D;[True|False]&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-event-type\&quot;&gt;By event type:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;event_type&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-attributes\&quot;&gt;By Device attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__deployed_state&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__name&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;id&#x3D;0158d38771f70000000000010010038c&amp;amp;state_change&#x3D;True&amp;amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <returns>ApiResponse of DeviceLogPage</returns>
        public ApiResponse< DeviceLogPage > DeviceLogListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {

            var localVarPath = "/v3/devicelog/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceLogList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceLogPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceLogPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceLogPage)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device95id\&quot;&gt;By id:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;id&#x3D;{id}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-state-change\&quot;&gt;By state change:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state_change&#x3D;[True|False]&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-event-type\&quot;&gt;By event type:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;event_type&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-attributes\&quot;&gt;By Device attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__deployed_state&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__name&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;id&#x3D;0158d38771f70000000000010010038c&amp;amp;state_change&#x3D;True&amp;amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of DeviceLogPage</returns>
        public async System.Threading.Tasks.Task<DeviceLogPage> DeviceLogListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {
             ApiResponse<DeviceLogPage> localVarResponse = await DeviceLogListAsyncWithHttpInfo(limit, order, after, filter, include);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt; &lt;h4 id&#x3D;\&quot;filtering\&quot;&gt;Filtering:&lt;/h4&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;{URL encoded query string}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The query string is made up of key/value pairs separated by ampersands. So for a query of &lt;code&gt;key1&#x3D;value1&amp;amp;key2&#x3D;value2&amp;amp;key3&#x3D;value3&lt;/code&gt; this would be encoded as follows:&lt;/p&gt; &lt;p&gt;&lt;code&gt;?filter&#x3D;key1%3Dvalue1%26key2%3Dvalue2%26key3%3Dvalue3&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The examples below show the queries in &lt;em&gt;unencoded&lt;/em&gt; form.&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device95id\&quot;&gt;By id:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;id&#x3D;{id}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-state-change\&quot;&gt;By state change:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;state_change&#x3D;[True|False]&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-event-type\&quot;&gt;By event type:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;event_type&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-date-time-fields\&quot;&gt;On date-time fields:&lt;/h5&gt; &lt;p&gt;Date-time fields should be specified in UTC RFC3339 format &lt;code&gt;YYYY-MM-DDThh:mm:ss.msZ&lt;/code&gt;. There are three permitted variations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;UTC RFC3339 with milliseconds e.g. 2016-11-30T16:25:12.1234Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 without milliseconds e.g. 2016-11-30T16:25:12Z&lt;/li&gt; &lt;li&gt;UTC RFC3339 shortened - without milliseconds and punctuation e.g. 20161130T162512Z&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Date-time filtering supports three operators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;equality&lt;/li&gt; &lt;li&gt;greater than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__gte&lt;/code&gt;&lt;/li&gt; &lt;li&gt;less than or equal to &amp;ndash; field name suffixed with &lt;code&gt;__lte&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lower and upper limits to a date-time range may be specified by including both the &lt;code&gt;__gte&lt;/code&gt; and &lt;code&gt;__lte&lt;/code&gt; forms in the filter.&lt;/p&gt; &lt;p&gt;&lt;code&gt;{field name}[|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;on-device-custom-attributes\&quot;&gt;On device custom attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__{param}&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__custom_attributes__tag&#x3D;TAG1&lt;/code&gt;&lt;/p&gt; &lt;h5 id&#x3D;\&quot;by-device-attributes\&quot;&gt;By Device attributes:&lt;/h5&gt; &lt;p&gt;&lt;code&gt;device__deployed_state&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__device_class&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;device__name&#x3D;{value}&lt;/code&gt;&lt;/p&gt; &lt;h4 id&#x3D;\&quot;multi-field-example\&quot;&gt;Multi-field example&lt;/h4&gt; &lt;p&gt;&lt;code&gt;id&#x3D;0158d38771f70000000000010010038c&amp;amp;state_change&#x3D;True&amp;amp;date_time__gte&#x3D;2016-11-30T16:25:12.1234Z&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Encoded: &lt;code&gt;?filter&#x3D;id%3D0158d38771f70000000000010010038c%26state_change%3DTrue%26date_time__gte%3D2016-11-30T16%3A25%3A12.1234Z&lt;/code&gt;&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">how many objects to retrieve in the page (optional)</param>
        /// <param name="order">ASC or DESC (optional)</param>
        /// <param name="after">the ID of the the item after which to retrieve the next page (optional)</param>
        /// <param name="filter">URL encoded query string parameter to filter returned data (optional)</param>
        /// <param name="include">Comma separated list of data fields to return. Currently supported: total_count (optional)</param>
        /// <returns>Task of ApiResponse (DeviceLogPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceLogPage>> DeviceLogListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {

            var localVarPath = "/v3/devicelog/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceLogList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceLogPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceLogPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceLogPage)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>DeviceLogData</returns>
        public DeviceLogData DeviceLogRetrieve (string deviceLogId)
        {
             ApiResponse<DeviceLogData> localVarResponse = DeviceLogRetrieveWithHttpInfo(deviceLogId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>ApiResponse of DeviceLogData</returns>
        public ApiResponse< DeviceLogData > DeviceLogRetrieveWithHttpInfo (string deviceLogId)
        {
            // verify the required parameter 'deviceLogId' is set
            if (deviceLogId == null)
                throw new ApiException(400, "Missing required parameter 'deviceLogId' when calling DefaultApi->DeviceLogRetrieve");

            var localVarPath = "/v3/devicelog/{device_log_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceLogId != null) localVarPathParams.Add("device_log_id", Configuration.ApiClient.ParameterToString(deviceLogId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceLogRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceLogData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceLogData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceLogData)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>Task of DeviceLogData</returns>
        public async System.Threading.Tasks.Task<DeviceLogData> DeviceLogRetrieveAsync (string deviceLogId)
        {
             ApiResponse<DeviceLogData> localVarResponse = await DeviceLogRetrieveAsyncWithHttpInfo(deviceLogId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>Task of ApiResponse (DeviceLogData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceLogData>> DeviceLogRetrieveAsyncWithHttpInfo (string deviceLogId)
        {
            // verify the required parameter 'deviceLogId' is set
            if (deviceLogId == null)
                throw new ApiException(400, "Missing required parameter 'deviceLogId' when calling DefaultApi->DeviceLogRetrieve");

            var localVarPath = "/v3/devicelog/{device_log_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceLogId != null) localVarPathParams.Add("device_log_id", Configuration.ApiClient.ParameterToString(deviceLogId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceLogRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceLogData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceLogData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceLogData)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>DeviceData</returns>
        public DeviceData DevicePartialUpdate (string id, DeviceDataPatchRequest device)
        {
             ApiResponse<DeviceData> localVarResponse = DevicePartialUpdateWithHttpInfo(id, device);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>ApiResponse of DeviceData</returns>
        public ApiResponse< DeviceData > DevicePartialUpdateWithHttpInfo (string id, DeviceDataPatchRequest device)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DevicePartialUpdate");
            // verify the required parameter 'device' is set
            if (device == null)
                throw new ApiException(400, "Missing required parameter 'device' when calling DefaultApi->DevicePartialUpdate");

            var localVarPath = "/v3/devices/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (device != null && device.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(device); // http body (model) parameter
            }
            else
            {
                localVarPostBody = device; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceData)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>Task of DeviceData</returns>
        public async System.Threading.Tasks.Task<DeviceData> DevicePartialUpdateAsync (string id, DeviceDataPatchRequest device)
        {
             ApiResponse<DeviceData> localVarResponse = await DevicePartialUpdateAsyncWithHttpInfo(id, device);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>Task of ApiResponse (DeviceData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceData>> DevicePartialUpdateAsyncWithHttpInfo (string id, DeviceDataPatchRequest device)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DevicePartialUpdate");
            // verify the required parameter 'device' is set
            if (device == null)
                throw new ApiException(400, "Missing required parameter 'device' when calling DefaultApi->DevicePartialUpdate");

            var localVarPath = "/v3/devices/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (device != null && device.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(device); // http body (model) parameter
            }
            else
            {
                localVarPostBody = device; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceData)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DeviceData</returns>
        public DeviceData DeviceRetrieve (string id)
        {
             ApiResponse<DeviceData> localVarResponse = DeviceRetrieveWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DeviceData</returns>
        public ApiResponse< DeviceData > DeviceRetrieveWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeviceRetrieve");

            var localVarPath = "/v3/devices/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceData)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DeviceData</returns>
        public async System.Threading.Tasks.Task<DeviceData> DeviceRetrieveAsync (string id)
        {
             ApiResponse<DeviceData> localVarResponse = await DeviceRetrieveAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DeviceData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceData>> DeviceRetrieveAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeviceRetrieve");

            var localVarPath = "/v3/devices/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceData)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>DeviceData</returns>
        public DeviceData DeviceUpdate (string id, DeviceDataWriteRequest device)
        {
             ApiResponse<DeviceData> localVarResponse = DeviceUpdateWithHttpInfo(id, device);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>ApiResponse of DeviceData</returns>
        public ApiResponse< DeviceData > DeviceUpdateWithHttpInfo (string id, DeviceDataWriteRequest device)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeviceUpdate");
            // verify the required parameter 'device' is set
            if (device == null)
                throw new ApiException(400, "Missing required parameter 'device' when calling DefaultApi->DeviceUpdate");

            var localVarPath = "/v3/devices/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (device != null && device.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(device); // http body (model) parameter
            }
            else
            {
                localVarPostBody = device; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceData)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>Task of DeviceData</returns>
        public async System.Threading.Tasks.Task<DeviceData> DeviceUpdateAsync (string id, DeviceDataWriteRequest device)
        {
             ApiResponse<DeviceData> localVarResponse = await DeviceUpdateAsyncWithHttpInfo(id, device);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the device</param>
        /// <param name="device"></param>
        /// <returns>Task of ApiResponse (DeviceData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceData>> DeviceUpdateAsyncWithHttpInfo (string id, DeviceDataWriteRequest device)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeviceUpdate");
            // verify the required parameter 'device' is set
            if (device == null)
                throw new ApiException(400, "Missing required parameter 'device' when calling DefaultApi->DeviceUpdate");

            var localVarPath = "/v3/devices/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (device != null && device.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(device); // http body (model) parameter
            }
            else
            {
                localVarPostBody = device; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceData)));
            
        }

    }
}
