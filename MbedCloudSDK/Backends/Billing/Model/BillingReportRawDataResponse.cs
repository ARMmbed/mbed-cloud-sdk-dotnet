/* 
 * <auto-generated>
 * Billing API
 *
 * Mbed Cloud Billing API allows users to retrieve billing reports and service package details.
 *
 * OpenAPI spec version: 1.4.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = billing.Client.SwaggerDateConverter;

namespace billing.Model
{
    /// <summary>
    /// The response includes the URL to download the raw billing data.
    /// </summary>
    [DataContract]
    public partial class BillingReportRawDataResponse :  IEquatable<BillingReportRawDataResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingReportRawDataResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BillingReportRawDataResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingReportRawDataResponse" /> class.
        /// </summary>
        /// <param name="Filename">The filename of the raw billing data file to be downloaded. It contains the file extensions. (required).</param>
        /// <param name="_Object">API Resource name. (required).</param>
        /// <param name="Url">The URL to download the raw billing data. (required).</param>
        public BillingReportRawDataResponse(string Filename = default(string), string _Object = default(string), string Url = default(string))
        {
            // to ensure "Filename" is required (not null)
            if (Filename == null)
            {
                throw new InvalidDataException("Filename is a required property for BillingReportRawDataResponse and cannot be null");
            }
            else
            {
                this.Filename = Filename;
            }
            // to ensure "_Object" is required (not null)
            if (_Object == null)
            {
                throw new InvalidDataException("_Object is a required property for BillingReportRawDataResponse and cannot be null");
            }
            else
            {
                this._Object = _Object;
            }
            // to ensure "Url" is required (not null)
            if (Url == null)
            {
                throw new InvalidDataException("Url is a required property for BillingReportRawDataResponse and cannot be null");
            }
            else
            {
                this.Url = Url;
            }
        }
        
        /// <summary>
        /// The filename of the raw billing data file to be downloaded. It contains the file extensions.
        /// </summary>
        /// <value>The filename of the raw billing data file to be downloaded. It contains the file extensions.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// API Resource name.
        /// </summary>
        /// <value>API Resource name.</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _Object { get; set; }

        /// <summary>
        /// The URL to download the raw billing data.
        /// </summary>
        /// <value>The URL to download the raw billing data.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingReportRawDataResponse {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingReportRawDataResponse);
        }

        /// <summary>
        /// Returns true if BillingReportRawDataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingReportRawDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingReportRawDataResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
