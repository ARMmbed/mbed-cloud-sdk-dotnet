/* 
 * <auto-generated>
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = iam.Client.SwaggerDateConverter;

namespace iam.Model
{
    /// <summary>
    /// This object represents an account update request.
    /// </summary>
    [DataContract]
    public partial class AccountUpdateRootReq :  IEquatable<AccountUpdateRootReq>, IValidatableObject
    {
        /// <summary>
        /// The enforcement status of setting up the multi-factor authentication. &#39;Enforced&#39; means that setting up the MFA is required after login. &#39;Optional&#39; means that the MFA is not required.
        /// </summary>
        /// <value>The enforcement status of setting up the multi-factor authentication. &#39;Enforced&#39; means that setting up the MFA is required after login. &#39;Optional&#39; means that the MFA is not required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MfaStatusEnum
        {
            
            /// <summary>
            /// Enum Enforced for "enforced"
            /// </summary>
            [EnumMember(Value = "enforced")]
            Enforced,
            
            /// <summary>
            /// Enum Optional for "optional"
            /// </summary>
            [EnumMember(Value = "optional")]
            Optional
        }

        /// <summary>
        /// The enforcement status of setting up the multi-factor authentication. &#39;Enforced&#39; means that setting up the MFA is required after login. &#39;Optional&#39; means that the MFA is not required.
        /// </summary>
        /// <value>The enforcement status of setting up the multi-factor authentication. &#39;Enforced&#39; means that setting up the MFA is required after login. &#39;Optional&#39; means that the MFA is not required.</value>
        [DataMember(Name="mfa_status", EmitDefaultValue=false)]
        public MfaStatusEnum? MfaStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountUpdateRootReq" /> class.
        /// </summary>
        /// <param name="EndMarket">The end market for this account, not longer than 100 characters..</param>
        /// <param name="PasswordPolicy">Password policy for this account..</param>
        /// <param name="SalesContact">Email address of the sales contact..</param>
        /// <param name="Email">The company email address for this account, not longer than 254 characters. Required for commercial accounts only..</param>
        /// <param name="PostalCode">The postal code part of the postal address, not longer than 100 characters..</param>
        /// <param name="AccountProperties">Properties for this account..</param>
        /// <param name="Aliases">An array of aliases, not more than 10. An alias is not shorter than 8 and not longer than 100 characters..</param>
        /// <param name="AddressLine2">Postal address line 2, not longer than 100 characters..</param>
        /// <param name="City">The city part of the postal address, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="AddressLine1">Postal address line 1, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="DisplayName">The display name for the account, not longer than 100 characters..</param>
        /// <param name="MfaStatus">The enforcement status of setting up the multi-factor authentication. &#39;Enforced&#39; means that setting up the MFA is required after login. &#39;Optional&#39; means that the MFA is not required..</param>
        /// <param name="State">The state part of the postal address, not longer than 100 characters..</param>
        /// <param name="ContractNumber">Contract number of the customer..</param>
        /// <param name="PhoneNumber">The phone number of a representative of the company, not longer than 100 characters..</param>
        /// <param name="Company">The name of the company, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="IdleTimeout">The reference token expiration time in minutes for this account. Between 1 and 120 minutes..</param>
        /// <param name="Country">The country part of the postal address, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="CustomerNumber">Customer number of the customer..</param>
        /// <param name="ExpirationWarningThreshold">Indicates how many days before the account expiration a notification email should be sent..</param>
        /// <param name="Contact">The name of the contact person for this account, not longer than 100 characters. Required for commercial accounts only..</param>
        /// <param name="NotificationEmails">A list of notification email addresses..</param>
        public AccountUpdateRootReq(string EndMarket = default(string), PasswordPolicy PasswordPolicy = default(PasswordPolicy), string SalesContact = default(string), string Email = default(string), string PostalCode = default(string), Dictionary<string, Dictionary<string, string>> AccountProperties = default(Dictionary<string, Dictionary<string, string>>), List<string> Aliases = default(List<string>), string AddressLine2 = default(string), string City = default(string), string AddressLine1 = default(string), string DisplayName = default(string), MfaStatusEnum? MfaStatus = default(MfaStatusEnum?), string State = default(string), string ContractNumber = default(string), string PhoneNumber = default(string), string Company = default(string), string IdleTimeout = default(string), string Country = default(string), string CustomerNumber = default(string), string ExpirationWarningThreshold = default(string), string Contact = default(string), List<string> NotificationEmails = default(List<string>))
        {
            this.EndMarket = EndMarket;
            this.PasswordPolicy = PasswordPolicy;
            this.SalesContact = SalesContact;
            this.Email = Email;
            this.PostalCode = PostalCode;
            this.AccountProperties = AccountProperties;
            this.Aliases = Aliases;
            this.AddressLine2 = AddressLine2;
            this.City = City;
            this.AddressLine1 = AddressLine1;
            this.DisplayName = DisplayName;
            this.MfaStatus = MfaStatus;
            this.State = State;
            this.ContractNumber = ContractNumber;
            this.PhoneNumber = PhoneNumber;
            this.Company = Company;
            this.IdleTimeout = IdleTimeout;
            this.Country = Country;
            this.CustomerNumber = CustomerNumber;
            this.ExpirationWarningThreshold = ExpirationWarningThreshold;
            this.Contact = Contact;
            this.NotificationEmails = NotificationEmails;
        }
        
        /// <summary>
        /// The end market for this account, not longer than 100 characters.
        /// </summary>
        /// <value>The end market for this account, not longer than 100 characters.</value>
        [DataMember(Name="end_market", EmitDefaultValue=false)]
        public string EndMarket { get; set; }

        /// <summary>
        /// Password policy for this account.
        /// </summary>
        /// <value>Password policy for this account.</value>
        [DataMember(Name="password_policy", EmitDefaultValue=false)]
        public PasswordPolicy PasswordPolicy { get; set; }

        /// <summary>
        /// Email address of the sales contact.
        /// </summary>
        /// <value>Email address of the sales contact.</value>
        [DataMember(Name="sales_contact", EmitDefaultValue=false)]
        public string SalesContact { get; set; }

        /// <summary>
        /// The company email address for this account, not longer than 254 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>The company email address for this account, not longer than 254 characters. Required for commercial accounts only.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The postal code part of the postal address, not longer than 100 characters.
        /// </summary>
        /// <value>The postal code part of the postal address, not longer than 100 characters.</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Properties for this account.
        /// </summary>
        /// <value>Properties for this account.</value>
        [DataMember(Name="account_properties", EmitDefaultValue=false)]
        public Dictionary<string, Dictionary<string, string>> AccountProperties { get; set; }

        /// <summary>
        /// An array of aliases, not more than 10. An alias is not shorter than 8 and not longer than 100 characters.
        /// </summary>
        /// <value>An array of aliases, not more than 10. An alias is not shorter than 8 and not longer than 100 characters.</value>
        [DataMember(Name="aliases", EmitDefaultValue=false)]
        public List<string> Aliases { get; set; }

        /// <summary>
        /// Postal address line 2, not longer than 100 characters.
        /// </summary>
        /// <value>Postal address line 2, not longer than 100 characters.</value>
        [DataMember(Name="address_line2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The city part of the postal address, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>The city part of the postal address, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Postal address line 1, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>Postal address line 1, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="address_line1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The display name for the account, not longer than 100 characters.
        /// </summary>
        /// <value>The display name for the account, not longer than 100 characters.</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }


        /// <summary>
        /// The state part of the postal address, not longer than 100 characters.
        /// </summary>
        /// <value>The state part of the postal address, not longer than 100 characters.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Contract number of the customer.
        /// </summary>
        /// <value>Contract number of the customer.</value>
        [DataMember(Name="contract_number", EmitDefaultValue=false)]
        public string ContractNumber { get; set; }

        /// <summary>
        /// The phone number of a representative of the company, not longer than 100 characters.
        /// </summary>
        /// <value>The phone number of a representative of the company, not longer than 100 characters.</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The name of the company, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>The name of the company, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// The reference token expiration time in minutes for this account. Between 1 and 120 minutes.
        /// </summary>
        /// <value>The reference token expiration time in minutes for this account. Between 1 and 120 minutes.</value>
        [DataMember(Name="idle_timeout", EmitDefaultValue=false)]
        public string IdleTimeout { get; set; }

        /// <summary>
        /// The country part of the postal address, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>The country part of the postal address, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Customer number of the customer.
        /// </summary>
        /// <value>Customer number of the customer.</value>
        [DataMember(Name="customer_number", EmitDefaultValue=false)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Indicates how many days before the account expiration a notification email should be sent.
        /// </summary>
        /// <value>Indicates how many days before the account expiration a notification email should be sent.</value>
        [DataMember(Name="expiration_warning_threshold", EmitDefaultValue=false)]
        public string ExpirationWarningThreshold { get; set; }

        /// <summary>
        /// The name of the contact person for this account, not longer than 100 characters. Required for commercial accounts only.
        /// </summary>
        /// <value>The name of the contact person for this account, not longer than 100 characters. Required for commercial accounts only.</value>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public string Contact { get; set; }

        /// <summary>
        /// A list of notification email addresses.
        /// </summary>
        /// <value>A list of notification email addresses.</value>
        [DataMember(Name="notification_emails", EmitDefaultValue=false)]
        public List<string> NotificationEmails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountUpdateRootReq {\n");
            sb.Append("  EndMarket: ").Append(EndMarket).Append("\n");
            sb.Append("  PasswordPolicy: ").Append(PasswordPolicy).Append("\n");
            sb.Append("  SalesContact: ").Append(SalesContact).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  AccountProperties: ").Append(AccountProperties).Append("\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  MfaStatus: ").Append(MfaStatus).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  IdleTimeout: ").Append(IdleTimeout).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  ExpirationWarningThreshold: ").Append(ExpirationWarningThreshold).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  NotificationEmails: ").Append(NotificationEmails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountUpdateRootReq);
        }

        /// <summary>
        /// Returns true if AccountUpdateRootReq instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountUpdateRootReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountUpdateRootReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndMarket == input.EndMarket ||
                    (this.EndMarket != null &&
                    this.EndMarket.Equals(input.EndMarket))
                ) && 
                (
                    this.PasswordPolicy == input.PasswordPolicy ||
                    (this.PasswordPolicy != null &&
                    this.PasswordPolicy.Equals(input.PasswordPolicy))
                ) && 
                (
                    this.SalesContact == input.SalesContact ||
                    (this.SalesContact != null &&
                    this.SalesContact.Equals(input.SalesContact))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.AccountProperties == input.AccountProperties ||
                    this.AccountProperties != null &&
                    this.AccountProperties.SequenceEqual(input.AccountProperties)
                ) && 
                (
                    this.Aliases == input.Aliases ||
                    this.Aliases != null &&
                    this.Aliases.SequenceEqual(input.Aliases)
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.MfaStatus == input.MfaStatus ||
                    (this.MfaStatus != null &&
                    this.MfaStatus.Equals(input.MfaStatus))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.ContractNumber == input.ContractNumber ||
                    (this.ContractNumber != null &&
                    this.ContractNumber.Equals(input.ContractNumber))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.IdleTimeout == input.IdleTimeout ||
                    (this.IdleTimeout != null &&
                    this.IdleTimeout.Equals(input.IdleTimeout))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    (this.CustomerNumber != null &&
                    this.CustomerNumber.Equals(input.CustomerNumber))
                ) && 
                (
                    this.ExpirationWarningThreshold == input.ExpirationWarningThreshold ||
                    (this.ExpirationWarningThreshold != null &&
                    this.ExpirationWarningThreshold.Equals(input.ExpirationWarningThreshold))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.NotificationEmails == input.NotificationEmails ||
                    this.NotificationEmails != null &&
                    this.NotificationEmails.SequenceEqual(input.NotificationEmails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndMarket != null)
                    hashCode = hashCode * 59 + this.EndMarket.GetHashCode();
                if (this.PasswordPolicy != null)
                    hashCode = hashCode * 59 + this.PasswordPolicy.GetHashCode();
                if (this.SalesContact != null)
                    hashCode = hashCode * 59 + this.SalesContact.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.AccountProperties != null)
                    hashCode = hashCode * 59 + this.AccountProperties.GetHashCode();
                if (this.Aliases != null)
                    hashCode = hashCode * 59 + this.Aliases.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.MfaStatus != null)
                    hashCode = hashCode * 59 + this.MfaStatus.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.ContractNumber != null)
                    hashCode = hashCode * 59 + this.ContractNumber.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.IdleTimeout != null)
                    hashCode = hashCode * 59 + this.IdleTimeout.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CustomerNumber != null)
                    hashCode = hashCode * 59 + this.CustomerNumber.GetHashCode();
                if (this.ExpirationWarningThreshold != null)
                    hashCode = hashCode * 59 + this.ExpirationWarningThreshold.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.NotificationEmails != null)
                    hashCode = hashCode * 59 + this.NotificationEmails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
