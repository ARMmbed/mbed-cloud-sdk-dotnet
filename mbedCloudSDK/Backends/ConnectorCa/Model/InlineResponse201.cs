/* 
 * mbed Cloud Connect CA REST API (R1.2)
 *
 * mbed Cloud Connect CA REST API allows services to get device credentials.
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace connector_ca.Model
{
    /// <summary>
    /// InlineResponse201
    /// </summary>
    [DataContract]
    public partial class InlineResponse201 :  IEquatable<InlineResponse201>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse201" /> class.
        /// </summary>
        /// <param name="SecurityFileContent">Content of the security.c file that will be flashed into the device to provide the security credentials.</param>
        /// <param name="Description">Description for the developer certificate..</param>
        /// <param name="DeveloperCertificate">PEM format X.509 developer certificate..</param>
        /// <param name="ServerUri">URI to which the client needs to connect to..</param>
        /// <param name="AccountId">account to which the developer certificate belongs.</param>
        /// <param name="DeveloperPrivateKey">PEM format developer private key associated to the certificate..</param>
        /// <param name="ServerCertificate">PEM format X.509 server certificate that will be used to validate the server certificate that will be received during the TLS/DTLS handshake..</param>
        /// <param name="Id">mUUID that uniquely identifies the developer certificate..</param>
        /// <param name="Name">Name of the developer certificate..</param>
        public InlineResponse201(string SecurityFileContent = default(string), string Description = default(string), string DeveloperCertificate = default(string), string ServerUri = default(string), string AccountId = default(string), string DeveloperPrivateKey = default(string), string ServerCertificate = default(string), string Id = default(string), string Name = default(string))
        {
            this.SecurityFileContent = SecurityFileContent;
            this.Description = Description;
            this.DeveloperCertificate = DeveloperCertificate;
            this.ServerUri = ServerUri;
            this.AccountId = AccountId;
            this.DeveloperPrivateKey = DeveloperPrivateKey;
            this.ServerCertificate = ServerCertificate;
            this.Id = Id;
            this.Name = Name;
        }
        
        /// <summary>
        /// Content of the security.c file that will be flashed into the device to provide the security credentials
        /// </summary>
        /// <value>Content of the security.c file that will be flashed into the device to provide the security credentials</value>
        [DataMember(Name="security_file_content", EmitDefaultValue=false)]
        public string SecurityFileContent { get; set; }
        /// <summary>
        /// Description for the developer certificate.
        /// </summary>
        /// <value>Description for the developer certificate.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// PEM format X.509 developer certificate.
        /// </summary>
        /// <value>PEM format X.509 developer certificate.</value>
        [DataMember(Name="developer_certificate", EmitDefaultValue=false)]
        public string DeveloperCertificate { get; set; }
        /// <summary>
        /// URI to which the client needs to connect to.
        /// </summary>
        /// <value>URI to which the client needs to connect to.</value>
        [DataMember(Name="server_uri", EmitDefaultValue=false)]
        public string ServerUri { get; set; }
        /// <summary>
        /// account to which the developer certificate belongs
        /// </summary>
        /// <value>account to which the developer certificate belongs</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// PEM format developer private key associated to the certificate.
        /// </summary>
        /// <value>PEM format developer private key associated to the certificate.</value>
        [DataMember(Name="developer_private_key", EmitDefaultValue=false)]
        public string DeveloperPrivateKey { get; set; }
        /// <summary>
        /// PEM format X.509 server certificate that will be used to validate the server certificate that will be received during the TLS/DTLS handshake.
        /// </summary>
        /// <value>PEM format X.509 server certificate that will be used to validate the server certificate that will be received during the TLS/DTLS handshake.</value>
        [DataMember(Name="server_certificate", EmitDefaultValue=false)]
        public string ServerCertificate { get; set; }
        /// <summary>
        /// mUUID that uniquely identifies the developer certificate.
        /// </summary>
        /// <value>mUUID that uniquely identifies the developer certificate.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Name of the developer certificate.
        /// </summary>
        /// <value>Name of the developer certificate.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse201 {\n");
            sb.Append("  SecurityFileContent: ").Append(SecurityFileContent).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeveloperCertificate: ").Append(DeveloperCertificate).Append("\n");
            sb.Append("  ServerUri: ").Append(ServerUri).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  DeveloperPrivateKey: ").Append(DeveloperPrivateKey).Append("\n");
            sb.Append("  ServerCertificate: ").Append(ServerCertificate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse201);
        }

        /// <summary>
        /// Returns true if InlineResponse201 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse201 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse201 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SecurityFileContent == other.SecurityFileContent ||
                    this.SecurityFileContent != null &&
                    this.SecurityFileContent.Equals(other.SecurityFileContent)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DeveloperCertificate == other.DeveloperCertificate ||
                    this.DeveloperCertificate != null &&
                    this.DeveloperCertificate.Equals(other.DeveloperCertificate)
                ) && 
                (
                    this.ServerUri == other.ServerUri ||
                    this.ServerUri != null &&
                    this.ServerUri.Equals(other.ServerUri)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.DeveloperPrivateKey == other.DeveloperPrivateKey ||
                    this.DeveloperPrivateKey != null &&
                    this.DeveloperPrivateKey.Equals(other.DeveloperPrivateKey)
                ) && 
                (
                    this.ServerCertificate == other.ServerCertificate ||
                    this.ServerCertificate != null &&
                    this.ServerCertificate.Equals(other.ServerCertificate)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SecurityFileContent != null)
                    hash = hash * 59 + this.SecurityFileContent.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DeveloperCertificate != null)
                    hash = hash * 59 + this.DeveloperCertificate.GetHashCode();
                if (this.ServerUri != null)
                    hash = hash * 59 + this.ServerUri.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.DeveloperPrivateKey != null)
                    hash = hash * 59 + this.DeveloperPrivateKey.GetHashCode();
                if (this.ServerCertificate != null)
                    hash = hash * 59 + this.ServerCertificate.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
