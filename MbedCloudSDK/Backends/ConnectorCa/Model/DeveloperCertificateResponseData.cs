/* 
 * <auto-generated>
 * Connect CA API
 *
 * Connect CA API provides methods to create and get Developer certificate. Also Connect CA provides server-credentials for Bootstarp and LWM2M Server.
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace connector_ca.Model
{
    /// <summary>
    /// DeveloperCertificateResponseData
    /// </summary>
    [DataContract]
    public partial class DeveloperCertificateResponseData :  IEquatable<DeveloperCertificateResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeveloperCertificateResponseData" /> class.
        /// </summary>
        /// <param name="SecurityFileContent">The content of the &#x60;security.c&#x60; file that is flashed into the device to provide the security credentials.</param>
        /// <param name="Description">Description for the developer certificate..</param>
        /// <param name="Name">The name of the developer certificate..</param>
        /// <param name="DeveloperCertificate">The PEM format X.509 developer certificate..</param>
        /// <param name="ServerUri">The URI to which the client needs to connect to..</param>
        /// <param name="CreatedAt">Creation UTC time RFC3339..</param>
        /// <param name="_Object">Entity name, always &#x60;trusted-cert&#x60;..</param>
        /// <param name="DeveloperPrivateKey">The PEM format developer private key associated to the certificate..</param>
        /// <param name="ServerCertificate">The PEM format X.509 server certificate that is used to validate the server certificate that is received during the TLS/DTLS handshake..</param>
        /// <param name="Etag">API resource entity version..</param>
        /// <param name="Id">The mUUID that uniquely identifies the developer certificate..</param>
        /// <param name="AccountId">The account to which the developer certificate belongs..</param>
        public DeveloperCertificateResponseData(string SecurityFileContent = default(string), string Description = default(string), string Name = default(string), string DeveloperCertificate = default(string), string ServerUri = default(string), string CreatedAt = default(string), string _Object = default(string), string DeveloperPrivateKey = default(string), string ServerCertificate = default(string), string Etag = default(string), string Id = default(string), string AccountId = default(string))
        {
            this.SecurityFileContent = SecurityFileContent;
            this.Description = Description;
            this.Name = Name;
            this.DeveloperCertificate = DeveloperCertificate;
            this.ServerUri = ServerUri;
            this.CreatedAt = CreatedAt;
            this._Object = _Object;
            this.DeveloperPrivateKey = DeveloperPrivateKey;
            this.ServerCertificate = ServerCertificate;
            this.Etag = Etag;
            this.Id = Id;
            this.AccountId = AccountId;
        }
        
        /// <summary>
        /// The content of the &#x60;security.c&#x60; file that is flashed into the device to provide the security credentials
        /// </summary>
        /// <value>The content of the &#x60;security.c&#x60; file that is flashed into the device to provide the security credentials</value>
        [DataMember(Name="security_file_content", EmitDefaultValue=false)]
        public string SecurityFileContent { get; set; }
        /// <summary>
        /// Description for the developer certificate.
        /// </summary>
        /// <value>Description for the developer certificate.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The name of the developer certificate.
        /// </summary>
        /// <value>The name of the developer certificate.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The PEM format X.509 developer certificate.
        /// </summary>
        /// <value>The PEM format X.509 developer certificate.</value>
        [DataMember(Name="developer_certificate", EmitDefaultValue=false)]
        public string DeveloperCertificate { get; set; }
        /// <summary>
        /// The URI to which the client needs to connect to.
        /// </summary>
        /// <value>The URI to which the client needs to connect to.</value>
        [DataMember(Name="server_uri", EmitDefaultValue=false)]
        public string ServerUri { get; set; }
        /// <summary>
        /// Creation UTC time RFC3339.
        /// </summary>
        /// <value>Creation UTC time RFC3339.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Entity name, always &#x60;trusted-cert&#x60;.
        /// </summary>
        /// <value>Entity name, always &#x60;trusted-cert&#x60;.</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _Object { get; set; }
        /// <summary>
        /// The PEM format developer private key associated to the certificate.
        /// </summary>
        /// <value>The PEM format developer private key associated to the certificate.</value>
        [DataMember(Name="developer_private_key", EmitDefaultValue=false)]
        public string DeveloperPrivateKey { get; set; }
        /// <summary>
        /// The PEM format X.509 server certificate that is used to validate the server certificate that is received during the TLS/DTLS handshake.
        /// </summary>
        /// <value>The PEM format X.509 server certificate that is used to validate the server certificate that is received during the TLS/DTLS handshake.</value>
        [DataMember(Name="server_certificate", EmitDefaultValue=false)]
        public string ServerCertificate { get; set; }
        /// <summary>
        /// API resource entity version.
        /// </summary>
        /// <value>API resource entity version.</value>
        [DataMember(Name="etag", EmitDefaultValue=false)]
        public string Etag { get; set; }
        /// <summary>
        /// The mUUID that uniquely identifies the developer certificate.
        /// </summary>
        /// <value>The mUUID that uniquely identifies the developer certificate.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The account to which the developer certificate belongs.
        /// </summary>
        /// <value>The account to which the developer certificate belongs.</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeveloperCertificateResponseData {\n");
            sb.Append("  SecurityFileContent: ").Append(SecurityFileContent).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DeveloperCertificate: ").Append(DeveloperCertificate).Append("\n");
            sb.Append("  ServerUri: ").Append(ServerUri).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  DeveloperPrivateKey: ").Append(DeveloperPrivateKey).Append("\n");
            sb.Append("  ServerCertificate: ").Append(ServerCertificate).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeveloperCertificateResponseData);
        }

        /// <summary>
        /// Returns true if DeveloperCertificateResponseData instances are equal
        /// </summary>
        /// <param name="other">Instance of DeveloperCertificateResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeveloperCertificateResponseData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SecurityFileContent == other.SecurityFileContent ||
                    this.SecurityFileContent != null &&
                    this.SecurityFileContent.Equals(other.SecurityFileContent)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.DeveloperCertificate == other.DeveloperCertificate ||
                    this.DeveloperCertificate != null &&
                    this.DeveloperCertificate.Equals(other.DeveloperCertificate)
                ) && 
                (
                    this.ServerUri == other.ServerUri ||
                    this.ServerUri != null &&
                    this.ServerUri.Equals(other.ServerUri)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this._Object == other._Object ||
                    this._Object != null &&
                    this._Object.Equals(other._Object)
                ) && 
                (
                    this.DeveloperPrivateKey == other.DeveloperPrivateKey ||
                    this.DeveloperPrivateKey != null &&
                    this.DeveloperPrivateKey.Equals(other.DeveloperPrivateKey)
                ) && 
                (
                    this.ServerCertificate == other.ServerCertificate ||
                    this.ServerCertificate != null &&
                    this.ServerCertificate.Equals(other.ServerCertificate)
                ) && 
                (
                    this.Etag == other.Etag ||
                    this.Etag != null &&
                    this.Etag.Equals(other.Etag)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SecurityFileContent != null)
                    hash = hash * 59 + this.SecurityFileContent.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.DeveloperCertificate != null)
                    hash = hash * 59 + this.DeveloperCertificate.GetHashCode();
                if (this.ServerUri != null)
                    hash = hash * 59 + this.ServerUri.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this._Object != null)
                    hash = hash * 59 + this._Object.GetHashCode();
                if (this.DeveloperPrivateKey != null)
                    hash = hash * 59 + this.DeveloperPrivateKey.GetHashCode();
                if (this.ServerCertificate != null)
                    hash = hash * 59 + this.ServerCertificate.GetHashCode();
                if (this.Etag != null)
                    hash = hash * 59 + this.Etag.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
