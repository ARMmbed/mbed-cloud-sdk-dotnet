/* 
 * Provisioning endpoints - the factory provisioning package.
 *
 * The factory provisioning package needs to be installed in factories to enroll devices onto the mbed Cloud ecosystem.  These APIs allow downloading the most recent version of the factory provisioning package for various operating systems. 
 *
 * OpenAPI spec version: 0.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using factory_tool.Client;
using factory_tool.Model;

namespace factory_tool.
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific Factory Tool package in a ZIP archive. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </remarks>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="os">Requires Factory Tool OS name (Windows or Linux).</param>
        /// <returns>byte[]</returns>
        byte[] DownloadsMbedFactoryProvisioningPackageGet (string os);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific Factory Tool package in a ZIP archive. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </remarks>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="os">Requires Factory Tool OS name (Windows or Linux).</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> DownloadsMbedFactoryProvisioningPackageGetWithHttpInfo (string os);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of downloadable Factory Tool versions. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </remarks>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AListOfDownloadableFactoryToolVersions_</returns>
        AListOfDownloadableFactoryToolVersions_ DownloadsMbedFactoryProvisioningPackageInfoGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of downloadable Factory Tool versions. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </remarks>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AListOfDownloadableFactoryToolVersions_</returns>
        ApiResponse<AListOfDownloadableFactoryToolVersions_> DownloadsMbedFactoryProvisioningPackageInfoGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific Factory Tool package in a ZIP archive. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </remarks>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="os">Requires Factory Tool OS name (Windows or Linux).</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> DownloadsMbedFactoryProvisioningPackageGetAsync (string os);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific Factory Tool package in a ZIP archive. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </remarks>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="os">Requires Factory Tool OS name (Windows or Linux).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadsMbedFactoryProvisioningPackageGetAsyncWithHttpInfo (string os);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of downloadable Factory Tool versions. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </remarks>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AListOfDownloadableFactoryToolVersions_</returns>
        System.Threading.Tasks.Task<AListOfDownloadableFactoryToolVersions_> DownloadsMbedFactoryProvisioningPackageInfoGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of downloadable Factory Tool versions. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </remarks>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AListOfDownloadableFactoryToolVersions_)</returns>
        System.Threading.Tasks.Task<ApiResponse<AListOfDownloadableFactoryToolVersions_>> DownloadsMbedFactoryProvisioningPackageInfoGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private factory_tool.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = factory_tool.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = factory_tool.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public factory_tool.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a specific Factory Tool package in a ZIP archive. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </summary>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="os">Requires Factory Tool OS name (Windows or Linux).</param>
        /// <returns>byte[]</returns>
        public byte[] DownloadsMbedFactoryProvisioningPackageGet (string os)
        {
             ApiResponse<byte[]> localVarResponse = DownloadsMbedFactoryProvisioningPackageGetWithHttpInfo(os);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a specific Factory Tool package in a ZIP archive. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </summary>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="os">Requires Factory Tool OS name (Windows or Linux).</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > DownloadsMbedFactoryProvisioningPackageGetWithHttpInfo (string os)
        {
            // verify the required parameter 'os' is set
            if (os == null)
                throw new ApiException(400, "Missing required parameter 'os' when calling DefaultApi->DownloadsMbedFactoryProvisioningPackageGet");

            var localVarPath = "/downloads/mbed_factory_provisioning_package";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (os != null) localVarQueryParams.Add("os", Configuration.ApiClient.ParameterToString(os)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadsMbedFactoryProvisioningPackageGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        ///  Returns a specific Factory Tool package in a ZIP archive. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </summary>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="os">Requires Factory Tool OS name (Windows or Linux).</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> DownloadsMbedFactoryProvisioningPackageGetAsync (string os)
        {
             ApiResponse<byte[]> localVarResponse = await DownloadsMbedFactoryProvisioningPackageGetAsyncWithHttpInfo(os);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a specific Factory Tool package in a ZIP archive. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </summary>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="os">Requires Factory Tool OS name (Windows or Linux).</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> DownloadsMbedFactoryProvisioningPackageGetAsyncWithHttpInfo (string os)
        {
            // verify the required parameter 'os' is set
            if (os == null)
                throw new ApiException(400, "Missing required parameter 'os' when calling DefaultApi->DownloadsMbedFactoryProvisioningPackageGet");

            var localVarPath = "/downloads/mbed_factory_provisioning_package";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (os != null) localVarQueryParams.Add("os", Configuration.ApiClient.ParameterToString(os)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadsMbedFactoryProvisioningPackageGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
            
        }

        /// <summary>
        ///  Gets a list of downloadable Factory Tool versions. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </summary>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AListOfDownloadableFactoryToolVersions_</returns>
        public AListOfDownloadableFactoryToolVersions_ DownloadsMbedFactoryProvisioningPackageInfoGet ()
        {
             ApiResponse<AListOfDownloadableFactoryToolVersions_> localVarResponse = DownloadsMbedFactoryProvisioningPackageInfoGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of downloadable Factory Tool versions. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </summary>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AListOfDownloadableFactoryToolVersions_</returns>
        public ApiResponse< AListOfDownloadableFactoryToolVersions_ > DownloadsMbedFactoryProvisioningPackageInfoGetWithHttpInfo ()
        {

            var localVarPath = "/downloads/mbed_factory_provisioning_package/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadsMbedFactoryProvisioningPackageInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AListOfDownloadableFactoryToolVersions_>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AListOfDownloadableFactoryToolVersions_) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AListOfDownloadableFactoryToolVersions_)));
            
        }

        /// <summary>
        ///  Gets a list of downloadable Factory Tool versions. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </summary>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AListOfDownloadableFactoryToolVersions_</returns>
        public async System.Threading.Tasks.Task<AListOfDownloadableFactoryToolVersions_> DownloadsMbedFactoryProvisioningPackageInfoGetAsync ()
        {
             ApiResponse<AListOfDownloadableFactoryToolVersions_> localVarResponse = await DownloadsMbedFactoryProvisioningPackageInfoGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of downloadable Factory Tool versions. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        /// </summary>
        /// <exception cref="factory_tool.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AListOfDownloadableFactoryToolVersions_)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AListOfDownloadableFactoryToolVersions_>> DownloadsMbedFactoryProvisioningPackageInfoGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/downloads/mbed_factory_provisioning_package/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadsMbedFactoryProvisioningPackageInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AListOfDownloadableFactoryToolVersions_>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AListOfDownloadableFactoryToolVersions_) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AListOfDownloadableFactoryToolVersions_)));
            
        }

    }
}
