/* 
 * mbed-billing REST API documentation for API-server
 *
 * This document contains the public REST API definitions of the mbed-billing service's API server component.
 *
 * OpenAPI spec version: 1.3.7-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace billing.Model
{
    /// <summary>
    /// BillingData
    /// </summary>
    [DataContract]
    public partial class BillingData :  IEquatable<BillingData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BillingData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingData" /> class.
        /// </summary>
        /// <param name="Transactions">Transactions (required).</param>
        /// <param name="ActiveDevices">ActiveDevices (required).</param>
        /// <param name="Generated">Generated (required).</param>
        /// <param name="PeriodEnd">PeriodEnd (required).</param>
        /// <param name="FirmwareUpdates">FirmwareUpdates (required).</param>
        /// <param name="PeriodStart">PeriodStart (required).</param>
        /// <param name="Bootstraps">Bootstraps (required).</param>
        public BillingData(long? Transactions = default(long?), long? ActiveDevices = default(long?), string Generated = default(string), string PeriodEnd = default(string), long? FirmwareUpdates = default(long?), string PeriodStart = default(string), long? Bootstraps = default(long?))
        {
            // to ensure "Transactions" is required (not null)
            if (Transactions == null)
            {
                throw new InvalidDataException("Transactions is a required property for BillingData and cannot be null");
            }
            else
            {
                this.Transactions = Transactions;
            }
            // to ensure "ActiveDevices" is required (not null)
            if (ActiveDevices == null)
            {
                throw new InvalidDataException("ActiveDevices is a required property for BillingData and cannot be null");
            }
            else
            {
                this.ActiveDevices = ActiveDevices;
            }
            // to ensure "Generated" is required (not null)
            if (Generated == null)
            {
                throw new InvalidDataException("Generated is a required property for BillingData and cannot be null");
            }
            else
            {
                this.Generated = Generated;
            }
            // to ensure "PeriodEnd" is required (not null)
            if (PeriodEnd == null)
            {
                throw new InvalidDataException("PeriodEnd is a required property for BillingData and cannot be null");
            }
            else
            {
                this.PeriodEnd = PeriodEnd;
            }
            // to ensure "FirmwareUpdates" is required (not null)
            if (FirmwareUpdates == null)
            {
                throw new InvalidDataException("FirmwareUpdates is a required property for BillingData and cannot be null");
            }
            else
            {
                this.FirmwareUpdates = FirmwareUpdates;
            }
            // to ensure "PeriodStart" is required (not null)
            if (PeriodStart == null)
            {
                throw new InvalidDataException("PeriodStart is a required property for BillingData and cannot be null");
            }
            else
            {
                this.PeriodStart = PeriodStart;
            }
            // to ensure "Bootstraps" is required (not null)
            if (Bootstraps == null)
            {
                throw new InvalidDataException("Bootstraps is a required property for BillingData and cannot be null");
            }
            else
            {
                this.Bootstraps = Bootstraps;
            }
        }
        
        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public long? Transactions { get; set; }
        /// <summary>
        /// Gets or Sets ActiveDevices
        /// </summary>
        [DataMember(Name="active_devices", EmitDefaultValue=false)]
        public long? ActiveDevices { get; set; }
        /// <summary>
        /// Gets or Sets Generated
        /// </summary>
        [DataMember(Name="generated", EmitDefaultValue=false)]
        public string Generated { get; set; }
        /// <summary>
        /// Gets or Sets PeriodEnd
        /// </summary>
        [DataMember(Name="period_end", EmitDefaultValue=false)]
        public string PeriodEnd { get; set; }
        /// <summary>
        /// Gets or Sets FirmwareUpdates
        /// </summary>
        [DataMember(Name="firmware_updates", EmitDefaultValue=false)]
        public long? FirmwareUpdates { get; set; }
        /// <summary>
        /// Gets or Sets PeriodStart
        /// </summary>
        [DataMember(Name="period_start", EmitDefaultValue=false)]
        public string PeriodStart { get; set; }
        /// <summary>
        /// Gets or Sets Bootstraps
        /// </summary>
        [DataMember(Name="bootstraps", EmitDefaultValue=false)]
        public long? Bootstraps { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingData {\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  ActiveDevices: ").Append(ActiveDevices).Append("\n");
            sb.Append("  Generated: ").Append(Generated).Append("\n");
            sb.Append("  PeriodEnd: ").Append(PeriodEnd).Append("\n");
            sb.Append("  FirmwareUpdates: ").Append(FirmwareUpdates).Append("\n");
            sb.Append("  PeriodStart: ").Append(PeriodStart).Append("\n");
            sb.Append("  Bootstraps: ").Append(Bootstraps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BillingData);
        }

        /// <summary>
        /// Returns true if BillingData instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Transactions == other.Transactions ||
                    this.Transactions != null &&
                    this.Transactions.Equals(other.Transactions)
                ) && 
                (
                    this.ActiveDevices == other.ActiveDevices ||
                    this.ActiveDevices != null &&
                    this.ActiveDevices.Equals(other.ActiveDevices)
                ) && 
                (
                    this.Generated == other.Generated ||
                    this.Generated != null &&
                    this.Generated.Equals(other.Generated)
                ) && 
                (
                    this.PeriodEnd == other.PeriodEnd ||
                    this.PeriodEnd != null &&
                    this.PeriodEnd.Equals(other.PeriodEnd)
                ) && 
                (
                    this.FirmwareUpdates == other.FirmwareUpdates ||
                    this.FirmwareUpdates != null &&
                    this.FirmwareUpdates.Equals(other.FirmwareUpdates)
                ) && 
                (
                    this.PeriodStart == other.PeriodStart ||
                    this.PeriodStart != null &&
                    this.PeriodStart.Equals(other.PeriodStart)
                ) && 
                (
                    this.Bootstraps == other.Bootstraps ||
                    this.Bootstraps != null &&
                    this.Bootstraps.Equals(other.Bootstraps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Transactions != null)
                    hash = hash * 59 + this.Transactions.GetHashCode();
                if (this.ActiveDevices != null)
                    hash = hash * 59 + this.ActiveDevices.GetHashCode();
                if (this.Generated != null)
                    hash = hash * 59 + this.Generated.GetHashCode();
                if (this.PeriodEnd != null)
                    hash = hash * 59 + this.PeriodEnd.GetHashCode();
                if (this.FirmwareUpdates != null)
                    hash = hash * 59 + this.FirmwareUpdates.GetHashCode();
                if (this.PeriodStart != null)
                    hash = hash * 59 + this.PeriodStart.GetHashCode();
                if (this.Bootstraps != null)
                    hash = hash * 59 + this.Bootstraps.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Generated (string) pattern
            Regex regexGenerated = new Regex(@"(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z", RegexOptions.CultureInvariant);
            if (false == regexGenerated.Match(this.Generated).Success)
            {
                yield return new ValidationResult("Invalid value for Generated, must match a pattern of /(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z/.", new [] { "Generated" });
            }

            // PeriodEnd (string) pattern
            Regex regexPeriodEnd = new Regex(@"(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z", RegexOptions.CultureInvariant);
            if (false == regexPeriodEnd.Match(this.PeriodEnd).Success)
            {
                yield return new ValidationResult("Invalid value for PeriodEnd, must match a pattern of /(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z/.", new [] { "PeriodEnd" });
            }

            // PeriodStart (string) pattern
            Regex regexPeriodStart = new Regex(@"(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z", RegexOptions.CultureInvariant);
            if (false == regexPeriodStart.Match(this.PeriodStart).Success)
            {
                yield return new ValidationResult("Invalid value for PeriodStart, must match a pattern of /(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{9})Z/.", new [] { "PeriodStart" });
            }

            yield break;
        }
    }

}
