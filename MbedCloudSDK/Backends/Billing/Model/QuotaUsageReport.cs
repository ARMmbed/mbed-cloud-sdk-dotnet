/* 
 * <auto-generated>
 * billing REST API documentation
 *
 * This document contains the public REST API definitions of the mbed-billing service.
 *
 * OpenAPI spec version: 1.4.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = billing.Client.SwaggerDateConverter;

namespace billing.Model
{
    /// <summary>
    /// Account&#39;s quota usage entry for queried month.
    /// </summary>
    [DataContract]
    public partial class QuotaUsageReport :  IEquatable<QuotaUsageReport>, IValidatableObject
    {
        /// <summary>
        /// Type of quota usage entry.
        /// </summary>
        /// <value>Type of quota usage entry.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Reservation for "reservation"
            /// </summary>
            [EnumMember(Value = "reservation")]
            Reservation,
            
            /// <summary>
            /// Enum Reservationrelease for "reservation_release"
            /// </summary>
            [EnumMember(Value = "reservation_release")]
            Reservationrelease,
            
            /// <summary>
            /// Enum Reservationtermination for "reservation_termination"
            /// </summary>
            [EnumMember(Value = "reservation_termination")]
            Reservationtermination,
            
            /// <summary>
            /// Enum Packagerenewal for "package_renewal"
            /// </summary>
            [EnumMember(Value = "package_renewal")]
            Packagerenewal,
            
            /// <summary>
            /// Enum Packagecreation for "package_creation"
            /// </summary>
            [EnumMember(Value = "package_creation")]
            Packagecreation,
            
            /// <summary>
            /// Enum Packagetermination for "package_termination"
            /// </summary>
            [EnumMember(Value = "package_termination")]
            Packagetermination
        }

        /// <summary>
        /// Type of quota usage entry.
        /// </summary>
        /// <value>Type of quota usage entry.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuotaUsageReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuotaUsageReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuotaUsageReport" /> class.
        /// </summary>
        /// <param name="Amount">Amount of quota usage entry. Negative if it is quota consumption. (required).</param>
        /// <param name="CampaignName">Campaign name of quota usage entry. Null if quota usage entry type is not reservation or reservation release..</param>
        /// <param name="Time">Added time of quota usage entry in RFC3339 date-time with millisecond accuracy and UTC time zone. (required).</param>
        /// <param name="Type">Type of quota usage entry. (required).</param>
        public QuotaUsageReport(long? Amount = default(long?), string CampaignName = default(string), DateTime? Time = default(DateTime?), TypeEnum? Type = default(TypeEnum?))
        {
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for QuotaUsageReport and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "Time" is required (not null)
            if (Time == null)
            {
                throw new InvalidDataException("Time is a required property for QuotaUsageReport and cannot be null");
            }
            else
            {
                this.Time = Time;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for QuotaUsageReport and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.CampaignName = CampaignName;
        }
        
        /// <summary>
        /// Amount of quota usage entry. Negative if it is quota consumption.
        /// </summary>
        /// <value>Amount of quota usage entry. Negative if it is quota consumption.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// Campaign name of quota usage entry. Null if quota usage entry type is not reservation or reservation release.
        /// </summary>
        /// <value>Campaign name of quota usage entry. Null if quota usage entry type is not reservation or reservation release.</value>
        [DataMember(Name="campaign_name", EmitDefaultValue=false)]
        public string CampaignName { get; set; }

        /// <summary>
        /// Added time of quota usage entry in RFC3339 date-time with millisecond accuracy and UTC time zone.
        /// </summary>
        /// <value>Added time of quota usage entry in RFC3339 date-time with millisecond accuracy and UTC time zone.</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime? Time { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuotaUsageReport {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuotaUsageReport);
        }

        /// <summary>
        /// Returns true if QuotaUsageReport instances are equal
        /// </summary>
        /// <param name="input">Instance of QuotaUsageReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuotaUsageReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CampaignName == input.CampaignName ||
                    (this.CampaignName != null &&
                    this.CampaignName.Equals(input.CampaignName))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CampaignName != null)
                    hashCode = hashCode * 59 + this.CampaignName.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
