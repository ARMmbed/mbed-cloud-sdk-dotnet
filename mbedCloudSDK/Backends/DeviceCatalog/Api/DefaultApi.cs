/* 
 * Device Catalog API
 *
 * This is the API Documentation for the mbed device catalog update service.
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using device_catalog.Client;
using device_catalog.Model;

namespace device_catalog.
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mechanism">The ID of the channel used to communicate with the device</param>
        /// <param name="provisionKey">The key used to provision the device</param>
        /// <param name="accountId">The owning IAM account ID (optional)</param>
        /// <param name="autoUpdate">Mark this device for auto firmware update (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="customAttributes">Up to 5 custom JSON attributes (optional)</param>
        /// <param name="deployedState">The state of the device&#39;s deployment (optional)</param>
        /// <param name="deployment">The last deployment used on the device (optional)</param>
        /// <param name="description">The description of the object (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="deviceId">DEPRECATED: The ID of the device (optional)</param>
        /// <param name="etag">The entity instance signature (optional)</param>
        /// <param name="id">The ID of the device (optional)</param>
        /// <param name="manifest">URL for the current device manifest (optional)</param>
        /// <param name="mechanismUrl">The address of the connector to use (optional)</param>
        /// <param name="name">The name of the object (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="serialNumber">The serial number of the device (optional)</param>
        /// <param name="state">The current state of the device (optional)</param>
        /// <param name="trustClass">The device trust class (optional)</param>
        /// <param name="trustLevel">The device trust level (optional)</param>
        /// <param name="updatedAt">The time the object was updated (optional)</param>
        /// <param name="vendorId">The device vendor ID (optional)</param>
        /// <returns>DeviceDetail</returns>
        DeviceDetail DeviceCreate (string mechanism, string provisionKey, string accountId = null, bool? autoUpdate = null, string bootstrappedTimestamp = null, DateTime? createdAt = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string deviceId = null, DateTime? etag = null, string id = null, string manifest = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, long? trustClass = null, long? trustLevel = null, DateTime? updatedAt = null, string vendorId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mechanism">The ID of the channel used to communicate with the device</param>
        /// <param name="provisionKey">The key used to provision the device</param>
        /// <param name="accountId">The owning IAM account ID (optional)</param>
        /// <param name="autoUpdate">Mark this device for auto firmware update (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="customAttributes">Up to 5 custom JSON attributes (optional)</param>
        /// <param name="deployedState">The state of the device&#39;s deployment (optional)</param>
        /// <param name="deployment">The last deployment used on the device (optional)</param>
        /// <param name="description">The description of the object (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="deviceId">DEPRECATED: The ID of the device (optional)</param>
        /// <param name="etag">The entity instance signature (optional)</param>
        /// <param name="id">The ID of the device (optional)</param>
        /// <param name="manifest">URL for the current device manifest (optional)</param>
        /// <param name="mechanismUrl">The address of the connector to use (optional)</param>
        /// <param name="name">The name of the object (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="serialNumber">The serial number of the device (optional)</param>
        /// <param name="state">The current state of the device (optional)</param>
        /// <param name="trustClass">The device trust class (optional)</param>
        /// <param name="trustLevel">The device trust level (optional)</param>
        /// <param name="updatedAt">The time the object was updated (optional)</param>
        /// <param name="vendorId">The device vendor ID (optional)</param>
        /// <returns>ApiResponse of DeviceDetail</returns>
        ApiResponse<DeviceDetail> DeviceCreateWithHttpInfo (string mechanism, string provisionKey, string accountId = null, bool? autoUpdate = null, string bootstrappedTimestamp = null, DateTime? createdAt = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string deviceId = null, DateTime? etag = null, string id = null, string manifest = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, long? trustClass = null, long? trustLevel = null, DateTime? updatedAt = null, string vendorId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>DeviceListResp</returns>
        DeviceListResp DeviceDestroy (string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of DeviceListResp</returns>
        ApiResponse<DeviceListResp> DeviceDestroyWithHttpInfo (string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>DeviceListResp</returns>
        DeviceListResp DeviceList (int? limit = null, string order = null, string after = null, string filter = null, string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>ApiResponse of DeviceListResp</returns>
        ApiResponse<DeviceListResp> DeviceListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>DeviceLogSerializer</returns>
        DeviceLogSerializer DeviceLogList (int? limit = null, string order = null, string after = null, string filter = null, string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>ApiResponse of DeviceLogSerializer</returns>
        ApiResponse<DeviceLogSerializer> DeviceLogListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>DeviceLogSerializer</returns>
        DeviceLogSerializer DeviceLogRetrieve (string deviceLogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>ApiResponse of DeviceLogSerializer</returns>
        ApiResponse<DeviceLogSerializer> DeviceLogRetrieveWithHttpInfo (string deviceLogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>DeviceListResp</returns>
        DeviceListResp DevicePartialUpdate (string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>ApiResponse of DeviceListResp</returns>
        ApiResponse<DeviceListResp> DevicePartialUpdateWithHttpInfo (string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>DeviceListResp</returns>
        DeviceListResp DeviceRetrieve (string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of DeviceListResp</returns>
        ApiResponse<DeviceListResp> DeviceRetrieveWithHttpInfo (string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>DeviceListResp</returns>
        DeviceListResp DeviceUpdate (string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>ApiResponse of DeviceListResp</returns>
        ApiResponse<DeviceListResp> DeviceUpdateWithHttpInfo (string deviceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mechanism">The ID of the channel used to communicate with the device</param>
        /// <param name="provisionKey">The key used to provision the device</param>
        /// <param name="accountId">The owning IAM account ID (optional)</param>
        /// <param name="autoUpdate">Mark this device for auto firmware update (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="customAttributes">Up to 5 custom JSON attributes (optional)</param>
        /// <param name="deployedState">The state of the device&#39;s deployment (optional)</param>
        /// <param name="deployment">The last deployment used on the device (optional)</param>
        /// <param name="description">The description of the object (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="deviceId">DEPRECATED: The ID of the device (optional)</param>
        /// <param name="etag">The entity instance signature (optional)</param>
        /// <param name="id">The ID of the device (optional)</param>
        /// <param name="manifest">URL for the current device manifest (optional)</param>
        /// <param name="mechanismUrl">The address of the connector to use (optional)</param>
        /// <param name="name">The name of the object (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="serialNumber">The serial number of the device (optional)</param>
        /// <param name="state">The current state of the device (optional)</param>
        /// <param name="trustClass">The device trust class (optional)</param>
        /// <param name="trustLevel">The device trust level (optional)</param>
        /// <param name="updatedAt">The time the object was updated (optional)</param>
        /// <param name="vendorId">The device vendor ID (optional)</param>
        /// <returns>Task of DeviceDetail</returns>
        System.Threading.Tasks.Task<DeviceDetail> DeviceCreateAsync (string mechanism, string provisionKey, string accountId = null, bool? autoUpdate = null, string bootstrappedTimestamp = null, DateTime? createdAt = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string deviceId = null, DateTime? etag = null, string id = null, string manifest = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, long? trustClass = null, long? trustLevel = null, DateTime? updatedAt = null, string vendorId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mechanism">The ID of the channel used to communicate with the device</param>
        /// <param name="provisionKey">The key used to provision the device</param>
        /// <param name="accountId">The owning IAM account ID (optional)</param>
        /// <param name="autoUpdate">Mark this device for auto firmware update (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="customAttributes">Up to 5 custom JSON attributes (optional)</param>
        /// <param name="deployedState">The state of the device&#39;s deployment (optional)</param>
        /// <param name="deployment">The last deployment used on the device (optional)</param>
        /// <param name="description">The description of the object (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="deviceId">DEPRECATED: The ID of the device (optional)</param>
        /// <param name="etag">The entity instance signature (optional)</param>
        /// <param name="id">The ID of the device (optional)</param>
        /// <param name="manifest">URL for the current device manifest (optional)</param>
        /// <param name="mechanismUrl">The address of the connector to use (optional)</param>
        /// <param name="name">The name of the object (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="serialNumber">The serial number of the device (optional)</param>
        /// <param name="state">The current state of the device (optional)</param>
        /// <param name="trustClass">The device trust class (optional)</param>
        /// <param name="trustLevel">The device trust level (optional)</param>
        /// <param name="updatedAt">The time the object was updated (optional)</param>
        /// <param name="vendorId">The device vendor ID (optional)</param>
        /// <returns>Task of ApiResponse (DeviceDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceDetail>> DeviceCreateAsyncWithHttpInfo (string mechanism, string provisionKey, string accountId = null, bool? autoUpdate = null, string bootstrappedTimestamp = null, DateTime? createdAt = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string deviceId = null, DateTime? etag = null, string id = null, string manifest = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, long? trustClass = null, long? trustLevel = null, DateTime? updatedAt = null, string vendorId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of DeviceListResp</returns>
        System.Threading.Tasks.Task<DeviceListResp> DeviceDestroyAsync (string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (DeviceListResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceListResp>> DeviceDestroyAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of DeviceListResp</returns>
        System.Threading.Tasks.Task<DeviceListResp> DeviceListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of ApiResponse (DeviceListResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceListResp>> DeviceListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of DeviceLogSerializer</returns>
        System.Threading.Tasks.Task<DeviceLogSerializer> DeviceLogListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of ApiResponse (DeviceLogSerializer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceLogSerializer>> DeviceLogListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>Task of DeviceLogSerializer</returns>
        System.Threading.Tasks.Task<DeviceLogSerializer> DeviceLogRetrieveAsync (string deviceLogId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>Task of ApiResponse (DeviceLogSerializer)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceLogSerializer>> DeviceLogRetrieveAsyncWithHttpInfo (string deviceLogId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>Task of DeviceListResp</returns>
        System.Threading.Tasks.Task<DeviceListResp> DevicePartialUpdateAsync (string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>Task of ApiResponse (DeviceListResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceListResp>> DevicePartialUpdateAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of DeviceListResp</returns>
        System.Threading.Tasks.Task<DeviceListResp> DeviceRetrieveAsync (string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (DeviceListResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceListResp>> DeviceRetrieveAsyncWithHttpInfo (string deviceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>Task of DeviceListResp</returns>
        System.Threading.Tasks.Task<DeviceListResp> DeviceUpdateAsync (string deviceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>Task of ApiResponse (DeviceListResp)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceListResp>> DeviceUpdateAsyncWithHttpInfo (string deviceId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private device_catalog.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = device_catalog.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = device_catalog.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public device_catalog.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mechanism">The ID of the channel used to communicate with the device</param>
        /// <param name="provisionKey">The key used to provision the device</param>
        /// <param name="accountId">The owning IAM account ID (optional)</param>
        /// <param name="autoUpdate">Mark this device for auto firmware update (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="customAttributes">Up to 5 custom JSON attributes (optional)</param>
        /// <param name="deployedState">The state of the device&#39;s deployment (optional)</param>
        /// <param name="deployment">The last deployment used on the device (optional)</param>
        /// <param name="description">The description of the object (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="deviceId">DEPRECATED: The ID of the device (optional)</param>
        /// <param name="etag">The entity instance signature (optional)</param>
        /// <param name="id">The ID of the device (optional)</param>
        /// <param name="manifest">URL for the current device manifest (optional)</param>
        /// <param name="mechanismUrl">The address of the connector to use (optional)</param>
        /// <param name="name">The name of the object (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="serialNumber">The serial number of the device (optional)</param>
        /// <param name="state">The current state of the device (optional)</param>
        /// <param name="trustClass">The device trust class (optional)</param>
        /// <param name="trustLevel">The device trust level (optional)</param>
        /// <param name="updatedAt">The time the object was updated (optional)</param>
        /// <param name="vendorId">The device vendor ID (optional)</param>
        /// <returns>DeviceDetail</returns>
        public DeviceDetail DeviceCreate (string mechanism, string provisionKey, string accountId = null, bool? autoUpdate = null, string bootstrappedTimestamp = null, DateTime? createdAt = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string deviceId = null, DateTime? etag = null, string id = null, string manifest = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, long? trustClass = null, long? trustLevel = null, DateTime? updatedAt = null, string vendorId = null)
        {
             ApiResponse<DeviceDetail> localVarResponse = DeviceCreateWithHttpInfo(mechanism, provisionKey, accountId, autoUpdate, bootstrappedTimestamp, createdAt, customAttributes, deployedState, deployment, description, deviceClass, deviceId, etag, id, manifest, mechanismUrl, name, _object, serialNumber, state, trustClass, trustLevel, updatedAt, vendorId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mechanism">The ID of the channel used to communicate with the device</param>
        /// <param name="provisionKey">The key used to provision the device</param>
        /// <param name="accountId">The owning IAM account ID (optional)</param>
        /// <param name="autoUpdate">Mark this device for auto firmware update (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="customAttributes">Up to 5 custom JSON attributes (optional)</param>
        /// <param name="deployedState">The state of the device&#39;s deployment (optional)</param>
        /// <param name="deployment">The last deployment used on the device (optional)</param>
        /// <param name="description">The description of the object (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="deviceId">DEPRECATED: The ID of the device (optional)</param>
        /// <param name="etag">The entity instance signature (optional)</param>
        /// <param name="id">The ID of the device (optional)</param>
        /// <param name="manifest">URL for the current device manifest (optional)</param>
        /// <param name="mechanismUrl">The address of the connector to use (optional)</param>
        /// <param name="name">The name of the object (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="serialNumber">The serial number of the device (optional)</param>
        /// <param name="state">The current state of the device (optional)</param>
        /// <param name="trustClass">The device trust class (optional)</param>
        /// <param name="trustLevel">The device trust level (optional)</param>
        /// <param name="updatedAt">The time the object was updated (optional)</param>
        /// <param name="vendorId">The device vendor ID (optional)</param>
        /// <returns>ApiResponse of DeviceDetail</returns>
        public ApiResponse< DeviceDetail > DeviceCreateWithHttpInfo (string mechanism, string provisionKey, string accountId = null, bool? autoUpdate = null, string bootstrappedTimestamp = null, DateTime? createdAt = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string deviceId = null, DateTime? etag = null, string id = null, string manifest = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, long? trustClass = null, long? trustLevel = null, DateTime? updatedAt = null, string vendorId = null)
        {
            // verify the required parameter 'mechanism' is set
            if (mechanism == null)
                throw new ApiException(400, "Missing required parameter 'mechanism' when calling DefaultApi->DeviceCreate");
            // verify the required parameter 'provisionKey' is set
            if (provisionKey == null)
                throw new ApiException(400, "Missing required parameter 'provisionKey' when calling DefaultApi->DeviceCreate");

            var localVarPath = "/v3/devices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarFormParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // form parameter
            if (autoUpdate != null) localVarFormParams.Add("auto_update", Configuration.ApiClient.ParameterToString(autoUpdate)); // form parameter
            if (bootstrappedTimestamp != null) localVarFormParams.Add("bootstrapped_timestamp", Configuration.ApiClient.ParameterToString(bootstrappedTimestamp)); // form parameter
            if (createdAt != null) localVarFormParams.Add("created_at", Configuration.ApiClient.ParameterToString(createdAt)); // form parameter
            if (customAttributes != null) localVarFormParams.Add("custom_attributes", Configuration.ApiClient.ParameterToString(customAttributes)); // form parameter
            if (deployedState != null) localVarFormParams.Add("deployed_state", Configuration.ApiClient.ParameterToString(deployedState)); // form parameter
            if (deployment != null) localVarFormParams.Add("deployment", Configuration.ApiClient.ParameterToString(deployment)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (deviceClass != null) localVarFormParams.Add("device_class", Configuration.ApiClient.ParameterToString(deviceClass)); // form parameter
            if (deviceId != null) localVarFormParams.Add("device_id", Configuration.ApiClient.ParameterToString(deviceId)); // form parameter
            if (etag != null) localVarFormParams.Add("etag", Configuration.ApiClient.ParameterToString(etag)); // form parameter
            if (id != null) localVarFormParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (manifest != null) localVarFormParams.Add("manifest", Configuration.ApiClient.ParameterToString(manifest)); // form parameter
            if (mechanism != null) localVarFormParams.Add("mechanism", Configuration.ApiClient.ParameterToString(mechanism)); // form parameter
            if (mechanismUrl != null) localVarFormParams.Add("mechanism_url", Configuration.ApiClient.ParameterToString(mechanismUrl)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (_object != null) localVarFormParams.Add("object", Configuration.ApiClient.ParameterToString(_object)); // form parameter
            if (provisionKey != null) localVarFormParams.Add("provision_key", Configuration.ApiClient.ParameterToString(provisionKey)); // form parameter
            if (serialNumber != null) localVarFormParams.Add("serial_number", Configuration.ApiClient.ParameterToString(serialNumber)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (trustClass != null) localVarFormParams.Add("trust_class", Configuration.ApiClient.ParameterToString(trustClass)); // form parameter
            if (trustLevel != null) localVarFormParams.Add("trust_level", Configuration.ApiClient.ParameterToString(trustLevel)); // form parameter
            if (updatedAt != null) localVarFormParams.Add("updated_at", Configuration.ApiClient.ParameterToString(updatedAt)); // form parameter
            if (vendorId != null) localVarFormParams.Add("vendor_id", Configuration.ApiClient.ParameterToString(vendorId)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceDetail)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mechanism">The ID of the channel used to communicate with the device</param>
        /// <param name="provisionKey">The key used to provision the device</param>
        /// <param name="accountId">The owning IAM account ID (optional)</param>
        /// <param name="autoUpdate">Mark this device for auto firmware update (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="customAttributes">Up to 5 custom JSON attributes (optional)</param>
        /// <param name="deployedState">The state of the device&#39;s deployment (optional)</param>
        /// <param name="deployment">The last deployment used on the device (optional)</param>
        /// <param name="description">The description of the object (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="deviceId">DEPRECATED: The ID of the device (optional)</param>
        /// <param name="etag">The entity instance signature (optional)</param>
        /// <param name="id">The ID of the device (optional)</param>
        /// <param name="manifest">URL for the current device manifest (optional)</param>
        /// <param name="mechanismUrl">The address of the connector to use (optional)</param>
        /// <param name="name">The name of the object (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="serialNumber">The serial number of the device (optional)</param>
        /// <param name="state">The current state of the device (optional)</param>
        /// <param name="trustClass">The device trust class (optional)</param>
        /// <param name="trustLevel">The device trust level (optional)</param>
        /// <param name="updatedAt">The time the object was updated (optional)</param>
        /// <param name="vendorId">The device vendor ID (optional)</param>
        /// <returns>Task of DeviceDetail</returns>
        public async System.Threading.Tasks.Task<DeviceDetail> DeviceCreateAsync (string mechanism, string provisionKey, string accountId = null, bool? autoUpdate = null, string bootstrappedTimestamp = null, DateTime? createdAt = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string deviceId = null, DateTime? etag = null, string id = null, string manifest = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, long? trustClass = null, long? trustLevel = null, DateTime? updatedAt = null, string vendorId = null)
        {
             ApiResponse<DeviceDetail> localVarResponse = await DeviceCreateAsyncWithHttpInfo(mechanism, provisionKey, accountId, autoUpdate, bootstrappedTimestamp, createdAt, customAttributes, deployedState, deployment, description, deviceClass, deviceId, etag, id, manifest, mechanismUrl, name, _object, serialNumber, state, trustClass, trustLevel, updatedAt, vendorId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Create device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mechanism">The ID of the channel used to communicate with the device</param>
        /// <param name="provisionKey">The key used to provision the device</param>
        /// <param name="accountId">The owning IAM account ID (optional)</param>
        /// <param name="autoUpdate">Mark this device for auto firmware update (optional)</param>
        /// <param name="bootstrappedTimestamp"> (optional)</param>
        /// <param name="createdAt"> (optional)</param>
        /// <param name="customAttributes">Up to 5 custom JSON attributes (optional)</param>
        /// <param name="deployedState">The state of the device&#39;s deployment (optional)</param>
        /// <param name="deployment">The last deployment used on the device (optional)</param>
        /// <param name="description">The description of the object (optional)</param>
        /// <param name="deviceClass"> (optional)</param>
        /// <param name="deviceId">DEPRECATED: The ID of the device (optional)</param>
        /// <param name="etag">The entity instance signature (optional)</param>
        /// <param name="id">The ID of the device (optional)</param>
        /// <param name="manifest">URL for the current device manifest (optional)</param>
        /// <param name="mechanismUrl">The address of the connector to use (optional)</param>
        /// <param name="name">The name of the object (optional)</param>
        /// <param name="_object">The API resource entity (optional)</param>
        /// <param name="serialNumber">The serial number of the device (optional)</param>
        /// <param name="state">The current state of the device (optional)</param>
        /// <param name="trustClass">The device trust class (optional)</param>
        /// <param name="trustLevel">The device trust level (optional)</param>
        /// <param name="updatedAt">The time the object was updated (optional)</param>
        /// <param name="vendorId">The device vendor ID (optional)</param>
        /// <returns>Task of ApiResponse (DeviceDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceDetail>> DeviceCreateAsyncWithHttpInfo (string mechanism, string provisionKey, string accountId = null, bool? autoUpdate = null, string bootstrappedTimestamp = null, DateTime? createdAt = null, string customAttributes = null, string deployedState = null, string deployment = null, string description = null, string deviceClass = null, string deviceId = null, DateTime? etag = null, string id = null, string manifest = null, string mechanismUrl = null, string name = null, string _object = null, string serialNumber = null, string state = null, long? trustClass = null, long? trustLevel = null, DateTime? updatedAt = null, string vendorId = null)
        {
            // verify the required parameter 'mechanism' is set
            if (mechanism == null)
                throw new ApiException(400, "Missing required parameter 'mechanism' when calling DefaultApi->DeviceCreate");
            // verify the required parameter 'provisionKey' is set
            if (provisionKey == null)
                throw new ApiException(400, "Missing required parameter 'provisionKey' when calling DefaultApi->DeviceCreate");

            var localVarPath = "/v3/devices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarFormParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // form parameter
            if (autoUpdate != null) localVarFormParams.Add("auto_update", Configuration.ApiClient.ParameterToString(autoUpdate)); // form parameter
            if (bootstrappedTimestamp != null) localVarFormParams.Add("bootstrapped_timestamp", Configuration.ApiClient.ParameterToString(bootstrappedTimestamp)); // form parameter
            if (createdAt != null) localVarFormParams.Add("created_at", Configuration.ApiClient.ParameterToString(createdAt)); // form parameter
            if (customAttributes != null) localVarFormParams.Add("custom_attributes", Configuration.ApiClient.ParameterToString(customAttributes)); // form parameter
            if (deployedState != null) localVarFormParams.Add("deployed_state", Configuration.ApiClient.ParameterToString(deployedState)); // form parameter
            if (deployment != null) localVarFormParams.Add("deployment", Configuration.ApiClient.ParameterToString(deployment)); // form parameter
            if (description != null) localVarFormParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (deviceClass != null) localVarFormParams.Add("device_class", Configuration.ApiClient.ParameterToString(deviceClass)); // form parameter
            if (deviceId != null) localVarFormParams.Add("device_id", Configuration.ApiClient.ParameterToString(deviceId)); // form parameter
            if (etag != null) localVarFormParams.Add("etag", Configuration.ApiClient.ParameterToString(etag)); // form parameter
            if (id != null) localVarFormParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (manifest != null) localVarFormParams.Add("manifest", Configuration.ApiClient.ParameterToString(manifest)); // form parameter
            if (mechanism != null) localVarFormParams.Add("mechanism", Configuration.ApiClient.ParameterToString(mechanism)); // form parameter
            if (mechanismUrl != null) localVarFormParams.Add("mechanism_url", Configuration.ApiClient.ParameterToString(mechanismUrl)); // form parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (_object != null) localVarFormParams.Add("object", Configuration.ApiClient.ParameterToString(_object)); // form parameter
            if (provisionKey != null) localVarFormParams.Add("provision_key", Configuration.ApiClient.ParameterToString(provisionKey)); // form parameter
            if (serialNumber != null) localVarFormParams.Add("serial_number", Configuration.ApiClient.ParameterToString(serialNumber)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (trustClass != null) localVarFormParams.Add("trust_class", Configuration.ApiClient.ParameterToString(trustClass)); // form parameter
            if (trustLevel != null) localVarFormParams.Add("trust_level", Configuration.ApiClient.ParameterToString(trustLevel)); // form parameter
            if (updatedAt != null) localVarFormParams.Add("updated_at", Configuration.ApiClient.ParameterToString(updatedAt)); // form parameter
            if (vendorId != null) localVarFormParams.Add("vendor_id", Configuration.ApiClient.ParameterToString(vendorId)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceDetail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceDetail)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>DeviceListResp</returns>
        public DeviceListResp DeviceDestroy (string deviceId)
        {
             ApiResponse<DeviceListResp> localVarResponse = DeviceDestroyWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of DeviceListResp</returns>
        public ApiResponse< DeviceListResp > DeviceDestroyWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DefaultApi->DeviceDestroy");

            var localVarPath = "/v3/devices/{device_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceId != null) localVarPathParams.Add("device_id", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceDestroy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceListResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceListResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceListResp)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of DeviceListResp</returns>
        public async System.Threading.Tasks.Task<DeviceListResp> DeviceDestroyAsync (string deviceId)
        {
             ApiResponse<DeviceListResp> localVarResponse = await DeviceDestroyAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Delete device&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (DeviceListResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceListResp>> DeviceDestroyAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DefaultApi->DeviceDestroy");

            var localVarPath = "/v3/devices/{device_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceId != null) localVarPathParams.Add("device_id", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceDestroy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceListResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceListResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceListResp)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>DeviceListResp</returns>
        public DeviceListResp DeviceList (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {
             ApiResponse<DeviceListResp> localVarResponse = DeviceListWithHttpInfo(limit, order, after, filter, include);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>ApiResponse of DeviceListResp</returns>
        public ApiResponse< DeviceListResp > DeviceListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {

            var localVarPath = "/v3/devices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceListResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceListResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceListResp)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of DeviceListResp</returns>
        public async System.Threading.Tasks.Task<DeviceListResp> DeviceListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {
             ApiResponse<DeviceListResp> localVarResponse = await DeviceListAsyncWithHttpInfo(limit, order, after, filter, include);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all update devices. The result is paged into pages of 100.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of ApiResponse (DeviceListResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceListResp>> DeviceListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {

            var localVarPath = "/v3/devices/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceListResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceListResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceListResp)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>DeviceLogSerializer</returns>
        public DeviceLogSerializer DeviceLogList (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {
             ApiResponse<DeviceLogSerializer> localVarResponse = DeviceLogListWithHttpInfo(limit, order, after, filter, include);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>ApiResponse of DeviceLogSerializer</returns>
        public ApiResponse< DeviceLogSerializer > DeviceLogListWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {

            var localVarPath = "/v3/devicelog/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceLogList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceLogSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceLogSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceLogSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of DeviceLogSerializer</returns>
        public async System.Threading.Tasks.Task<DeviceLogSerializer> DeviceLogListAsync (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {
             ApiResponse<DeviceLogSerializer> localVarResponse = await DeviceLogListAsyncWithHttpInfo(limit, order, after, filter, include);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;List all device logs.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="after"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of ApiResponse (DeviceLogSerializer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceLogSerializer>> DeviceLogListAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string filter = null, string include = null)
        {

            var localVarPath = "/v3/devicelog/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (after != null) localVarQueryParams.Add("after", Configuration.ApiClient.ParameterToString(after)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceLogList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceLogSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceLogSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceLogSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>DeviceLogSerializer</returns>
        public DeviceLogSerializer DeviceLogRetrieve (string deviceLogId)
        {
             ApiResponse<DeviceLogSerializer> localVarResponse = DeviceLogRetrieveWithHttpInfo(deviceLogId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>ApiResponse of DeviceLogSerializer</returns>
        public ApiResponse< DeviceLogSerializer > DeviceLogRetrieveWithHttpInfo (string deviceLogId)
        {
            // verify the required parameter 'deviceLogId' is set
            if (deviceLogId == null)
                throw new ApiException(400, "Missing required parameter 'deviceLogId' when calling DefaultApi->DeviceLogRetrieve");

            var localVarPath = "/v3/devicelog/{device_log_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceLogId != null) localVarPathParams.Add("device_log_id", Configuration.ApiClient.ParameterToString(deviceLogId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceLogRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceLogSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceLogSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceLogSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>Task of DeviceLogSerializer</returns>
        public async System.Threading.Tasks.Task<DeviceLogSerializer> DeviceLogRetrieveAsync (string deviceLogId)
        {
             ApiResponse<DeviceLogSerializer> localVarResponse = await DeviceLogRetrieveAsyncWithHttpInfo(deviceLogId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device log.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceLogId"></param>
        /// <returns>Task of ApiResponse (DeviceLogSerializer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceLogSerializer>> DeviceLogRetrieveAsyncWithHttpInfo (string deviceLogId)
        {
            // verify the required parameter 'deviceLogId' is set
            if (deviceLogId == null)
                throw new ApiException(400, "Missing required parameter 'deviceLogId' when calling DefaultApi->DeviceLogRetrieve");

            var localVarPath = "/v3/devicelog/{device_log_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceLogId != null) localVarPathParams.Add("device_log_id", Configuration.ApiClient.ParameterToString(deviceLogId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceLogRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceLogSerializer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceLogSerializer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceLogSerializer)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>DeviceListResp</returns>
        public DeviceListResp DevicePartialUpdate (string deviceId)
        {
             ApiResponse<DeviceListResp> localVarResponse = DevicePartialUpdateWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>ApiResponse of DeviceListResp</returns>
        public ApiResponse< DeviceListResp > DevicePartialUpdateWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DefaultApi->DevicePartialUpdate");

            var localVarPath = "/v3/devices/{device_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceId != null) localVarPathParams.Add("device_id", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceListResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceListResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceListResp)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>Task of DeviceListResp</returns>
        public async System.Threading.Tasks.Task<DeviceListResp> DevicePartialUpdateAsync (string deviceId)
        {
             ApiResponse<DeviceListResp> localVarResponse = await DevicePartialUpdateAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device fields&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>Task of ApiResponse (DeviceListResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceListResp>> DevicePartialUpdateAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DefaultApi->DevicePartialUpdate");

            var localVarPath = "/v3/devices/{device_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceId != null) localVarPathParams.Add("device_id", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DevicePartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceListResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceListResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceListResp)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>DeviceListResp</returns>
        public DeviceListResp DeviceRetrieve (string deviceId)
        {
             ApiResponse<DeviceListResp> localVarResponse = DeviceRetrieveWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of DeviceListResp</returns>
        public ApiResponse< DeviceListResp > DeviceRetrieveWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DefaultApi->DeviceRetrieve");

            var localVarPath = "/v3/devices/{device_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceId != null) localVarPathParams.Add("device_id", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceListResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceListResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceListResp)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of DeviceListResp</returns>
        public async System.Threading.Tasks.Task<DeviceListResp> DeviceRetrieveAsync (string deviceId)
        {
             ApiResponse<DeviceListResp> localVarResponse = await DeviceRetrieveAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Retrieve device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (DeviceListResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceListResp>> DeviceRetrieveAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DefaultApi->DeviceRetrieve");

            var localVarPath = "/v3/devices/{device_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceId != null) localVarPathParams.Add("device_id", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceRetrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceListResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceListResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceListResp)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>DeviceListResp</returns>
        public DeviceListResp DeviceUpdate (string deviceId)
        {
             ApiResponse<DeviceListResp> localVarResponse = DeviceUpdateWithHttpInfo(deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>ApiResponse of DeviceListResp</returns>
        public ApiResponse< DeviceListResp > DeviceUpdateWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DefaultApi->DeviceUpdate");

            var localVarPath = "/v3/devices/{device_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceId != null) localVarPathParams.Add("device_id", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceListResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceListResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceListResp)));
            
        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>Task of DeviceListResp</returns>
        public async System.Threading.Tasks.Task<DeviceListResp> DeviceUpdateAsync (string deviceId)
        {
             ApiResponse<DeviceListResp> localVarResponse = await DeviceUpdateAsyncWithHttpInfo(deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  &lt;p&gt;The APIs for creating and manipulating devices.  &lt;/p&gt; &lt;p&gt;Update device.&lt;/p&gt;
        /// </summary>
        /// <exception cref="device_catalog.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">The ID of the device</param>
        /// <returns>Task of ApiResponse (DeviceListResp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceListResp>> DeviceUpdateAsyncWithHttpInfo (string deviceId)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DefaultApi->DeviceUpdate");

            var localVarPath = "/v3/devices/{device_id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (deviceId != null) localVarPathParams.Add("device_id", Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeviceUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceListResp>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceListResp) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceListResp)));
            
        }

    }
}
