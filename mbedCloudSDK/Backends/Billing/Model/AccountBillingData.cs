/* 
 * mbed-billing REST API documentation for API-server
 *
 * This document contains the public REST API definitions of the mbed-billing service's API server component.
 *
 * OpenAPI spec version: 1.3.6-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace billing.Model
{
    /// <summary>
    /// AccountBillingData
    /// </summary>
    [DataContract]
    public partial class AccountBillingData :  IEquatable<AccountBillingData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBillingData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountBillingData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountBillingData" /> class.
        /// </summary>
        /// <param name="BootstrapCount">BootstrapCount (required).</param>
        /// <param name="Account">Account (required).</param>
        /// <param name="FirmwareUpdateCount">FirmwareUpdateCount (required).</param>
        /// <param name="TransactionCount">TransactionCount (required).</param>
        /// <param name="DeviceCount">DeviceCount (required).</param>
        public AccountBillingData(long? BootstrapCount = default(long?), string Account = default(string), long? FirmwareUpdateCount = default(long?), long? TransactionCount = default(long?), long? DeviceCount = default(long?))
        {
            // to ensure "BootstrapCount" is required (not null)
            if (BootstrapCount == null)
            {
                throw new InvalidDataException("BootstrapCount is a required property for AccountBillingData and cannot be null");
            }
            else
            {
                this.BootstrapCount = BootstrapCount;
            }
            // to ensure "Account" is required (not null)
            if (Account == null)
            {
                throw new InvalidDataException("Account is a required property for AccountBillingData and cannot be null");
            }
            else
            {
                this.Account = Account;
            }
            // to ensure "FirmwareUpdateCount" is required (not null)
            if (FirmwareUpdateCount == null)
            {
                throw new InvalidDataException("FirmwareUpdateCount is a required property for AccountBillingData and cannot be null");
            }
            else
            {
                this.FirmwareUpdateCount = FirmwareUpdateCount;
            }
            // to ensure "TransactionCount" is required (not null)
            if (TransactionCount == null)
            {
                throw new InvalidDataException("TransactionCount is a required property for AccountBillingData and cannot be null");
            }
            else
            {
                this.TransactionCount = TransactionCount;
            }
            // to ensure "DeviceCount" is required (not null)
            if (DeviceCount == null)
            {
                throw new InvalidDataException("DeviceCount is a required property for AccountBillingData and cannot be null");
            }
            else
            {
                this.DeviceCount = DeviceCount;
            }
        }
        
        /// <summary>
        /// Gets or Sets BootstrapCount
        /// </summary>
        [DataMember(Name="bootstrap_count", EmitDefaultValue=false)]
        public long? BootstrapCount { get; set; }
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }
        /// <summary>
        /// Gets or Sets FirmwareUpdateCount
        /// </summary>
        [DataMember(Name="firmware_update_count", EmitDefaultValue=false)]
        public long? FirmwareUpdateCount { get; set; }
        /// <summary>
        /// Gets or Sets TransactionCount
        /// </summary>
        [DataMember(Name="transaction_count", EmitDefaultValue=false)]
        public long? TransactionCount { get; set; }
        /// <summary>
        /// Gets or Sets DeviceCount
        /// </summary>
        [DataMember(Name="device_count", EmitDefaultValue=false)]
        public long? DeviceCount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountBillingData {\n");
            sb.Append("  BootstrapCount: ").Append(BootstrapCount).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  FirmwareUpdateCount: ").Append(FirmwareUpdateCount).Append("\n");
            sb.Append("  TransactionCount: ").Append(TransactionCount).Append("\n");
            sb.Append("  DeviceCount: ").Append(DeviceCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccountBillingData);
        }

        /// <summary>
        /// Returns true if AccountBillingData instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountBillingData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountBillingData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BootstrapCount == other.BootstrapCount ||
                    this.BootstrapCount != null &&
                    this.BootstrapCount.Equals(other.BootstrapCount)
                ) && 
                (
                    this.Account == other.Account ||
                    this.Account != null &&
                    this.Account.Equals(other.Account)
                ) && 
                (
                    this.FirmwareUpdateCount == other.FirmwareUpdateCount ||
                    this.FirmwareUpdateCount != null &&
                    this.FirmwareUpdateCount.Equals(other.FirmwareUpdateCount)
                ) && 
                (
                    this.TransactionCount == other.TransactionCount ||
                    this.TransactionCount != null &&
                    this.TransactionCount.Equals(other.TransactionCount)
                ) && 
                (
                    this.DeviceCount == other.DeviceCount ||
                    this.DeviceCount != null &&
                    this.DeviceCount.Equals(other.DeviceCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BootstrapCount != null)
                    hash = hash * 59 + this.BootstrapCount.GetHashCode();
                if (this.Account != null)
                    hash = hash * 59 + this.Account.GetHashCode();
                if (this.FirmwareUpdateCount != null)
                    hash = hash * 59 + this.FirmwareUpdateCount.GetHashCode();
                if (this.TransactionCount != null)
                    hash = hash * 59 + this.TransactionCount.GetHashCode();
                if (this.DeviceCount != null)
                    hash = hash * 59 + this.DeviceCount.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
