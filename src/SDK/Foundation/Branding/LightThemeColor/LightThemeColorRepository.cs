// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 2.0.0
//
// <copyright file="LightThemeColorRepository.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace Mbed.Cloud.Foundation
{
    using Mbed.Cloud.Common;
    using System.Threading.Tasks;
    using MbedCloudSDK.Exceptions;
    using System.Collections.Generic;
    using System;
    using Mbed.Cloud.RestClient;

    /// <summary>
    /// LightThemeColorRepository
    /// </summary>
    public class LightThemeColorRepository : Repository, ILightThemeColorRepository
    {
        public LightThemeColorRepository()
        {
        }

        public LightThemeColorRepository(Config config, Client client = null) : base(config, client)
        {
        }

        public async Task Delete(string reference)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "reference", reference }, };
                await Client.CallApi<LightThemeColor>(path: "/v3/branding-colors/light/{reference}", pathParams: pathParams, method: HttpMethods.DELETE);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<ILightThemeColorLightThemeColorListOptions, LightThemeColor> List(ILightThemeColorLightThemeColorListOptions options = null)
        {
            try
            {
                if (options == null)
                {
                    options = new LightThemeColorLightThemeColorListOptions();
                }

                Func<ILightThemeColorLightThemeColorListOptions, Task<ResponsePage<LightThemeColor>>> paginatedFunc = async (ILightThemeColorLightThemeColorListOptions _options) => { return await Client.CallApi<ResponsePage<LightThemeColor>>(path: "/v3/branding-colors/light", method: HttpMethods.GET); };
                return new PaginatedResponse<ILightThemeColorLightThemeColorListOptions, LightThemeColor>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<LightThemeColor> Read(string reference)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "reference", reference }, };
                return await Client.CallApi<LightThemeColor>(path: "/v3/branding-colors/light/{reference}", pathParams: pathParams, method: HttpMethods.GET);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<LightThemeColor> Update(string reference, LightThemeColor request)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "reference", reference }, };
                var bodyParams = new LightThemeColor { Color = request.Color, UpdatedAt = request.UpdatedAt, };
                return await Client.CallApi<LightThemeColor>(path: "/v3/branding-colors/light/{reference}", pathParams: pathParams, bodyParams: bodyParams, objectToUnpack: request, method: HttpMethods.PUT);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }
    }
}