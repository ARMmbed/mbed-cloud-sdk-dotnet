/* 
 * <auto-generated>
 * Third party CA management API
 *
 * API for managing third party CA for creating certificates on Pelion Device Management
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using external_ca.Client;
using external_ca.Model;

namespace external_ca.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICertificateIssuersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create certificate issuer.
        /// </summary>
        /// <remarks>
        /// Create a certificate issuer. The maximum number of issuers is limited to 20 per account. Multiple certificate issuers of the same issuer type can be created, provided they have a different name. This allows verification of the certificate issuer configuration before activating it. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers \\ -d &#39;{   \&quot;issuer_type\&quot;: \&quot;GLOBAL_SIGN\&quot;,   \&quot;name\&quot;: \&quot;GS Issuer\&quot;,   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer\&quot;,   \&quot;issuer_attributes\&quot;: null,   \&quot;issuer_credentials\&quot;: {       \&quot;api_key\&quot;: \&quot;e510e289e6cd8947\&quot;,       \&quot;api_secret\&quot;: \&quot;a477a8393d17a55ecb2ba6a61f58feb84770b621\&quot;,       \&quot;client_certificate\&quot;: \&quot;- -- --BEGIN CERTIFICATE- -- --MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko&#x3D;- -- --END CERTIFICATE- -- --\&quot;,         \&quot;private_key\&quot;:\&quot;- -- --BEGIN RSA PRIVATE KEY- -- --\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\\n\\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg&#x3D;&#x3D;\\n- -- --END RSA PRIVATE KEY- -- --\&quot;,       \&quot;passphrase\&quot;: \&quot;helloworld\&quot;   } }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerRequest">Certificate issuer request.</param>
        /// <returns>CertificateIssuerInfo</returns>
        CertificateIssuerInfo CreateCertificateIssuer (CertificateIssuerRequest certificateIssuerRequest);

        /// <summary>
        /// Create certificate issuer.
        /// </summary>
        /// <remarks>
        /// Create a certificate issuer. The maximum number of issuers is limited to 20 per account. Multiple certificate issuers of the same issuer type can be created, provided they have a different name. This allows verification of the certificate issuer configuration before activating it. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers \\ -d &#39;{   \&quot;issuer_type\&quot;: \&quot;GLOBAL_SIGN\&quot;,   \&quot;name\&quot;: \&quot;GS Issuer\&quot;,   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer\&quot;,   \&quot;issuer_attributes\&quot;: null,   \&quot;issuer_credentials\&quot;: {       \&quot;api_key\&quot;: \&quot;e510e289e6cd8947\&quot;,       \&quot;api_secret\&quot;: \&quot;a477a8393d17a55ecb2ba6a61f58feb84770b621\&quot;,       \&quot;client_certificate\&quot;: \&quot;- -- --BEGIN CERTIFICATE- -- --MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko&#x3D;- -- --END CERTIFICATE- -- --\&quot;,         \&quot;private_key\&quot;:\&quot;- -- --BEGIN RSA PRIVATE KEY- -- --\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\\n\\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg&#x3D;&#x3D;\\n- -- --END RSA PRIVATE KEY- -- --\&quot;,       \&quot;passphrase\&quot;: \&quot;helloworld\&quot;   } }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerRequest">Certificate issuer request.</param>
        /// <returns>ApiResponse of CertificateIssuerInfo</returns>
        ApiResponse<CertificateIssuerInfo> CreateCertificateIssuerWithHttpInfo (CertificateIssuerRequest certificateIssuerRequest);
        /// <summary>
        /// Delete certificate issuer.
        /// </summary>
        /// <remarks>
        /// Delete a certificate issuer by ID. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. An active certificate issuer may not be deleted. </param>
        /// <returns></returns>
        void DeleteCertificateIssuer (string certificateIssuerId);

        /// <summary>
        /// Delete certificate issuer.
        /// </summary>
        /// <remarks>
        /// Delete a certificate issuer by ID. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. An active certificate issuer may not be deleted. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCertificateIssuerWithHttpInfo (string certificateIssuerId);
        /// <summary>
        /// Get certificate issuer by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. The ID of the certificate issuer. </param>
        /// <returns>CertificateIssuerInfo</returns>
        CertificateIssuerInfo GetCertificateIssuer (string certificateIssuerId);

        /// <summary>
        /// Get certificate issuer by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. The ID of the certificate issuer. </param>
        /// <returns>ApiResponse of CertificateIssuerInfo</returns>
        ApiResponse<CertificateIssuerInfo> GetCertificateIssuerWithHttpInfo (string certificateIssuerId);
        /// <summary>
        /// Get certificate issuers list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CertificateIssuerInfoListResponse</returns>
        CertificateIssuerInfoListResponse GetCertificateIssuers ();

        /// <summary>
        /// Get certificate issuers list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CertificateIssuerInfoListResponse</returns>
        ApiResponse<CertificateIssuerInfoListResponse> GetCertificateIssuersWithHttpInfo ();
        /// <summary>
        /// Update certificate issuer.
        /// </summary>
        /// <remarks>
        /// Update a certificate issuer. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000 \\ -d &#39;{   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer - updated.\&quot;,   \&quot;name\&quot;: \&quot;GlobalSign Issuer\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <param name="certificateIssuerUpdateRequest">Certificate issuer update request.</param>
        /// <returns>CertificateIssuerInfo</returns>
        CertificateIssuerInfo UpdateCertificateIssuer (string certificateIssuerId, CertificateIssuerUpdateRequest certificateIssuerUpdateRequest);

        /// <summary>
        /// Update certificate issuer.
        /// </summary>
        /// <remarks>
        /// Update a certificate issuer. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000 \\ -d &#39;{   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer - updated.\&quot;,   \&quot;name\&quot;: \&quot;GlobalSign Issuer\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <param name="certificateIssuerUpdateRequest">Certificate issuer update request.</param>
        /// <returns>ApiResponse of CertificateIssuerInfo</returns>
        ApiResponse<CertificateIssuerInfo> UpdateCertificateIssuerWithHttpInfo (string certificateIssuerId, CertificateIssuerUpdateRequest certificateIssuerUpdateRequest);
        /// <summary>
        /// Verify certificate issuer.
        /// </summary>
        /// <remarks>
        /// A utility API that can be used to validate the user configuration before activating a certificate issuer. Verifies that the certificate issuer is accessible and can be used to generate certificates by Device Management. &lt;br&gt; **Note:** The API requests the 3rd party CA to sign a test certificate. For some 3rd party CAs, this operation may make use of the account quota. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621a36719d507b9d48a91b00000000/verify &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <returns>CertificateIssuerVerifyResponse</returns>
        CertificateIssuerVerifyResponse VerifyCertificateIssuer (string certificateIssuerId);

        /// <summary>
        /// Verify certificate issuer.
        /// </summary>
        /// <remarks>
        /// A utility API that can be used to validate the user configuration before activating a certificate issuer. Verifies that the certificate issuer is accessible and can be used to generate certificates by Device Management. &lt;br&gt; **Note:** The API requests the 3rd party CA to sign a test certificate. For some 3rd party CAs, this operation may make use of the account quota. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621a36719d507b9d48a91b00000000/verify &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <returns>ApiResponse of CertificateIssuerVerifyResponse</returns>
        ApiResponse<CertificateIssuerVerifyResponse> VerifyCertificateIssuerWithHttpInfo (string certificateIssuerId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create certificate issuer.
        /// </summary>
        /// <remarks>
        /// Create a certificate issuer. The maximum number of issuers is limited to 20 per account. Multiple certificate issuers of the same issuer type can be created, provided they have a different name. This allows verification of the certificate issuer configuration before activating it. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers \\ -d &#39;{   \&quot;issuer_type\&quot;: \&quot;GLOBAL_SIGN\&quot;,   \&quot;name\&quot;: \&quot;GS Issuer\&quot;,   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer\&quot;,   \&quot;issuer_attributes\&quot;: null,   \&quot;issuer_credentials\&quot;: {       \&quot;api_key\&quot;: \&quot;e510e289e6cd8947\&quot;,       \&quot;api_secret\&quot;: \&quot;a477a8393d17a55ecb2ba6a61f58feb84770b621\&quot;,       \&quot;client_certificate\&quot;: \&quot;- -- --BEGIN CERTIFICATE- -- --MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko&#x3D;- -- --END CERTIFICATE- -- --\&quot;,         \&quot;private_key\&quot;:\&quot;- -- --BEGIN RSA PRIVATE KEY- -- --\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\\n\\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg&#x3D;&#x3D;\\n- -- --END RSA PRIVATE KEY- -- --\&quot;,       \&quot;passphrase\&quot;: \&quot;helloworld\&quot;   } }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerRequest">Certificate issuer request.</param>
        /// <returns>Task of CertificateIssuerInfo</returns>
        System.Threading.Tasks.Task<CertificateIssuerInfo> CreateCertificateIssuerAsync (CertificateIssuerRequest certificateIssuerRequest);

        /// <summary>
        /// Create certificate issuer.
        /// </summary>
        /// <remarks>
        /// Create a certificate issuer. The maximum number of issuers is limited to 20 per account. Multiple certificate issuers of the same issuer type can be created, provided they have a different name. This allows verification of the certificate issuer configuration before activating it. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers \\ -d &#39;{   \&quot;issuer_type\&quot;: \&quot;GLOBAL_SIGN\&quot;,   \&quot;name\&quot;: \&quot;GS Issuer\&quot;,   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer\&quot;,   \&quot;issuer_attributes\&quot;: null,   \&quot;issuer_credentials\&quot;: {       \&quot;api_key\&quot;: \&quot;e510e289e6cd8947\&quot;,       \&quot;api_secret\&quot;: \&quot;a477a8393d17a55ecb2ba6a61f58feb84770b621\&quot;,       \&quot;client_certificate\&quot;: \&quot;- -- --BEGIN CERTIFICATE- -- --MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko&#x3D;- -- --END CERTIFICATE- -- --\&quot;,         \&quot;private_key\&quot;:\&quot;- -- --BEGIN RSA PRIVATE KEY- -- --\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\\n\\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg&#x3D;&#x3D;\\n- -- --END RSA PRIVATE KEY- -- --\&quot;,       \&quot;passphrase\&quot;: \&quot;helloworld\&quot;   } }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerRequest">Certificate issuer request.</param>
        /// <returns>Task of ApiResponse (CertificateIssuerInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerInfo>> CreateCertificateIssuerAsyncWithHttpInfo (CertificateIssuerRequest certificateIssuerRequest);
        /// <summary>
        /// Delete certificate issuer.
        /// </summary>
        /// <remarks>
        /// Delete a certificate issuer by ID. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. An active certificate issuer may not be deleted. </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCertificateIssuerAsync (string certificateIssuerId);

        /// <summary>
        /// Delete certificate issuer.
        /// </summary>
        /// <remarks>
        /// Delete a certificate issuer by ID. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000 &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. An active certificate issuer may not be deleted. </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCertificateIssuerAsyncWithHttpInfo (string certificateIssuerId);
        /// <summary>
        /// Get certificate issuer by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. The ID of the certificate issuer. </param>
        /// <returns>Task of CertificateIssuerInfo</returns>
        System.Threading.Tasks.Task<CertificateIssuerInfo> GetCertificateIssuerAsync (string certificateIssuerId);

        /// <summary>
        /// Get certificate issuer by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. The ID of the certificate issuer. </param>
        /// <returns>Task of ApiResponse (CertificateIssuerInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerInfo>> GetCertificateIssuerAsyncWithHttpInfo (string certificateIssuerId);
        /// <summary>
        /// Get certificate issuers list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CertificateIssuerInfoListResponse</returns>
        System.Threading.Tasks.Task<CertificateIssuerInfoListResponse> GetCertificateIssuersAsync ();

        /// <summary>
        /// Get certificate issuers list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CertificateIssuerInfoListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerInfoListResponse>> GetCertificateIssuersAsyncWithHttpInfo ();
        /// <summary>
        /// Update certificate issuer.
        /// </summary>
        /// <remarks>
        /// Update a certificate issuer. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000 \\ -d &#39;{   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer - updated.\&quot;,   \&quot;name\&quot;: \&quot;GlobalSign Issuer\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <param name="certificateIssuerUpdateRequest">Certificate issuer update request.</param>
        /// <returns>Task of CertificateIssuerInfo</returns>
        System.Threading.Tasks.Task<CertificateIssuerInfo> UpdateCertificateIssuerAsync (string certificateIssuerId, CertificateIssuerUpdateRequest certificateIssuerUpdateRequest);

        /// <summary>
        /// Update certificate issuer.
        /// </summary>
        /// <remarks>
        /// Update a certificate issuer. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000 \\ -d &#39;{   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer - updated.\&quot;,   \&quot;name\&quot;: \&quot;GlobalSign Issuer\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <param name="certificateIssuerUpdateRequest">Certificate issuer update request.</param>
        /// <returns>Task of ApiResponse (CertificateIssuerInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerInfo>> UpdateCertificateIssuerAsyncWithHttpInfo (string certificateIssuerId, CertificateIssuerUpdateRequest certificateIssuerUpdateRequest);
        /// <summary>
        /// Verify certificate issuer.
        /// </summary>
        /// <remarks>
        /// A utility API that can be used to validate the user configuration before activating a certificate issuer. Verifies that the certificate issuer is accessible and can be used to generate certificates by Device Management. &lt;br&gt; **Note:** The API requests the 3rd party CA to sign a test certificate. For some 3rd party CAs, this operation may make use of the account quota. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621a36719d507b9d48a91b00000000/verify &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <returns>Task of CertificateIssuerVerifyResponse</returns>
        System.Threading.Tasks.Task<CertificateIssuerVerifyResponse> VerifyCertificateIssuerAsync (string certificateIssuerId);

        /// <summary>
        /// Verify certificate issuer.
        /// </summary>
        /// <remarks>
        /// A utility API that can be used to validate the user configuration before activating a certificate issuer. Verifies that the certificate issuer is accessible and can be used to generate certificates by Device Management. &lt;br&gt; **Note:** The API requests the 3rd party CA to sign a test certificate. For some 3rd party CAs, this operation may make use of the account quota. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621a36719d507b9d48a91b00000000/verify &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <returns>Task of ApiResponse (CertificateIssuerVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateIssuerVerifyResponse>> VerifyCertificateIssuerAsyncWithHttpInfo (string certificateIssuerId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CertificateIssuersApi : ICertificateIssuersApi
    {
        private external_ca.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssuersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CertificateIssuersApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = external_ca.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateIssuersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CertificateIssuersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = external_ca.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public external_ca.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create certificate issuer. Create a certificate issuer. The maximum number of issuers is limited to 20 per account. Multiple certificate issuers of the same issuer type can be created, provided they have a different name. This allows verification of the certificate issuer configuration before activating it. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers \\ -d &#39;{   \&quot;issuer_type\&quot;: \&quot;GLOBAL_SIGN\&quot;,   \&quot;name\&quot;: \&quot;GS Issuer\&quot;,   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer\&quot;,   \&quot;issuer_attributes\&quot;: null,   \&quot;issuer_credentials\&quot;: {       \&quot;api_key\&quot;: \&quot;e510e289e6cd8947\&quot;,       \&quot;api_secret\&quot;: \&quot;a477a8393d17a55ecb2ba6a61f58feb84770b621\&quot;,       \&quot;client_certificate\&quot;: \&quot;- -- --BEGIN CERTIFICATE- -- --MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko&#x3D;- -- --END CERTIFICATE- -- --\&quot;,         \&quot;private_key\&quot;:\&quot;- -- --BEGIN RSA PRIVATE KEY- -- --\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\\n\\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg&#x3D;&#x3D;\\n- -- --END RSA PRIVATE KEY- -- --\&quot;,       \&quot;passphrase\&quot;: \&quot;helloworld\&quot;   } }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerRequest">Certificate issuer request.</param>
        /// <returns>CertificateIssuerInfo</returns>
        public CertificateIssuerInfo CreateCertificateIssuer (CertificateIssuerRequest certificateIssuerRequest)
        {
             ApiResponse<CertificateIssuerInfo> localVarResponse = CreateCertificateIssuerWithHttpInfo(certificateIssuerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create certificate issuer. Create a certificate issuer. The maximum number of issuers is limited to 20 per account. Multiple certificate issuers of the same issuer type can be created, provided they have a different name. This allows verification of the certificate issuer configuration before activating it. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers \\ -d &#39;{   \&quot;issuer_type\&quot;: \&quot;GLOBAL_SIGN\&quot;,   \&quot;name\&quot;: \&quot;GS Issuer\&quot;,   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer\&quot;,   \&quot;issuer_attributes\&quot;: null,   \&quot;issuer_credentials\&quot;: {       \&quot;api_key\&quot;: \&quot;e510e289e6cd8947\&quot;,       \&quot;api_secret\&quot;: \&quot;a477a8393d17a55ecb2ba6a61f58feb84770b621\&quot;,       \&quot;client_certificate\&quot;: \&quot;- -- --BEGIN CERTIFICATE- -- --MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko&#x3D;- -- --END CERTIFICATE- -- --\&quot;,         \&quot;private_key\&quot;:\&quot;- -- --BEGIN RSA PRIVATE KEY- -- --\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\\n\\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg&#x3D;&#x3D;\\n- -- --END RSA PRIVATE KEY- -- --\&quot;,       \&quot;passphrase\&quot;: \&quot;helloworld\&quot;   } }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerRequest">Certificate issuer request.</param>
        /// <returns>ApiResponse of CertificateIssuerInfo</returns>
        public ApiResponse< CertificateIssuerInfo > CreateCertificateIssuerWithHttpInfo (CertificateIssuerRequest certificateIssuerRequest)
        {
            // verify the required parameter 'certificateIssuerRequest' is set
            if (certificateIssuerRequest == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerRequest' when calling CertificateIssuersApi->CreateCertificateIssuer");

            var localVarPath = "/v3/certificate-issuers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerRequest != null && certificateIssuerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificateIssuerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificateIssuerRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerInfo)));
        }

        /// <summary>
        /// Create certificate issuer. Create a certificate issuer. The maximum number of issuers is limited to 20 per account. Multiple certificate issuers of the same issuer type can be created, provided they have a different name. This allows verification of the certificate issuer configuration before activating it. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers \\ -d &#39;{   \&quot;issuer_type\&quot;: \&quot;GLOBAL_SIGN\&quot;,   \&quot;name\&quot;: \&quot;GS Issuer\&quot;,   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer\&quot;,   \&quot;issuer_attributes\&quot;: null,   \&quot;issuer_credentials\&quot;: {       \&quot;api_key\&quot;: \&quot;e510e289e6cd8947\&quot;,       \&quot;api_secret\&quot;: \&quot;a477a8393d17a55ecb2ba6a61f58feb84770b621\&quot;,       \&quot;client_certificate\&quot;: \&quot;- -- --BEGIN CERTIFICATE- -- --MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko&#x3D;- -- --END CERTIFICATE- -- --\&quot;,         \&quot;private_key\&quot;:\&quot;- -- --BEGIN RSA PRIVATE KEY- -- --\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\\n\\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg&#x3D;&#x3D;\\n- -- --END RSA PRIVATE KEY- -- --\&quot;,       \&quot;passphrase\&quot;: \&quot;helloworld\&quot;   } }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerRequest">Certificate issuer request.</param>
        /// <returns>Task of CertificateIssuerInfo</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerInfo> CreateCertificateIssuerAsync (CertificateIssuerRequest certificateIssuerRequest)
        {
             ApiResponse<CertificateIssuerInfo> localVarResponse = await CreateCertificateIssuerAsyncWithHttpInfo(certificateIssuerRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create certificate issuer. Create a certificate issuer. The maximum number of issuers is limited to 20 per account. Multiple certificate issuers of the same issuer type can be created, provided they have a different name. This allows verification of the certificate issuer configuration before activating it. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: Bearer &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers \\ -d &#39;{   \&quot;issuer_type\&quot;: \&quot;GLOBAL_SIGN\&quot;,   \&quot;name\&quot;: \&quot;GS Issuer\&quot;,   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer\&quot;,   \&quot;issuer_attributes\&quot;: null,   \&quot;issuer_credentials\&quot;: {       \&quot;api_key\&quot;: \&quot;e510e289e6cd8947\&quot;,       \&quot;api_secret\&quot;: \&quot;a477a8393d17a55ecb2ba6a61f58feb84770b621\&quot;,       \&quot;client_certificate\&quot;: \&quot;- -- --BEGIN CERTIFICATE- -- --MIIC7zCCAdegAwIBAgIJANTlU4x5S74VMA0GCSqGSIb3DQEBCwUAMA4xDDAKBgNVBAoMA0FybTAeFw0xODAzMTExMzE5MTFaFw0xOTAzMTExMzE5MTFaMA4xDDAKBgNVBAoMA0FybTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJWLStsVMJULZtxdieK9qocM4ymDXMaAusmd9TZLzBgznKQe/CW2yxyA8C8K5e6MmvMYGeKDd4Lkw/ezOj2OsUj2xzNIltUxpGi/GhsNYiN/khNJa/Y1SllLoihJAPm/xbMywOBRu/dM88PiJsNZccOk0I8DYvvyAs9wCTkbKLnfHygl98DCRqXw7nBCplU6F03qpUd/4BUtMtugyqt7yboGH+4YewnUh4Yh4QNOJIvE93Ob++eKjO3pIOYEhQmUxzOLaLNuWXlv2l1WuN281hUP4XBcV8mCzRQfTBBDYTWt+5BEWoLOUkXjW0Um6EAaN3usph1IKDEH6Ia5VHP4Pj0CAwEAAaNQME4wHQYDVR0OBBYEFLsfYZxFcQTjPJKYMjHI2In316fmMB8GA1UdIwQYMBaAFLsfYZxFcQTjPJKYMjHI2In316fmMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAFl08GFsIkkUs6M7QgCWmsnwP6PtD8V87wM1GAqQQlOOeztaeRR2TEOeYiKRZQugYszJ/FVfVp4ggqzepJMn6UZ42j5nmSJs+6t79i23QAzX1zNQ354lr/t7kt3fMdhuL3AP0oZGzdy+EnXXiWeAD22UwzvVmLt38ypJIl+pmTsx9jJy4PN7yoRgtP9k+50m3X6oDxVruehC/JPSeTvEhqyLW3fLcG6IoJMX3vIwfO9uXbFJumTowQeViNJJ9duWvD2KBXn/muOOBe97TPuvAms1gOtMmmPT9/jpo9b4+NsfFiAN6bMici81aIKZzLC+lLGOUmR2fFJyM5OsVLxKsko&#x3D;- -- --END CERTIFICATE- -- --\&quot;,         \&quot;private_key\&quot;:\&quot;- -- --BEGIN RSA PRIVATE KEY- -- --\\nProc-Type: 4,ENCRYPTED\\nDEK-Info: DES-EDE3-CBC,CCAC26A4133947CB\\n\\np3KJ4FI3wcz3I0MtiLkrznkjWFvprVmoNywySUGb5IqZViJZqCMEsyU9a9iDsSfP\\nZ07cg9GviV21WYIPSxZOQrpy1g1VWILzFnH+J6z8dSH4mxXh0PwdOzYgAeqkrIVM\\nJ7KRm6t222dZFjjXK3eEcLmBLGo29XwVJxKHx+l4++gU1LZmeHZR5M8fJ4jejUly\\n7sqzPlmRF0N3I4lwKVj+PfQTVz43QoCnpxOjuSEL4liBrc2agY2xH1O0PFyHimz9\\n3XM9HR/iuPHW0N2D+NPjXlWKacerupH9d4i9IYIagzB+HTgej8limdo03GmmxcZ6\\nYNa58n5yQSaqu0TPRU9DsrKeGjadHTlZQGdzfq1SWsROCnHLrXFKE2ozIG3+hxA5\\nujBF/QWpX5+inXUwDJhBxp8isHbPEnBEUUd6ZRzCTjvN0jaUti5B9yFhO2G6mbE8\\nCvhyzQK8oJqsjZXnlcpPf95LP+9XbcCDjLSIaWJstzXO9tPiv6+x1MVWmivtRHcC\\nSTzpx8jAGCiG6ejLqWB87ZXiZm7ujlCBheHSf5RHwNHhUvoP2JEYalDDRxjcDMSx\\n4uV42Np4yJlIQEDlGHcBlXoL7vEukFpuWgkYdpcZy/Ou9qz8mXrpLcu8C8MhLmSC\\nixGoR5iRhV7cxoHLyuCzj87eYEA73Xu238DQorSEEuiVFnLzQ2+PJMs4qoI14q/L\\notlBDz+Ko6DrU/EZROYmiqMkLKXR2sx9zNAJwPYRs6nSH08tZ3dwqzZbgtP3Wazi\\nhLWHt5/En7wQRA5a+/dDEHXSoLvvSQ9jvhclhWf+eCYuq2eH+g54oyJGRSY+8GV7\\nujhLxkzl/3OZdhZPWoz4U13KpbSTcNWu5Y7oGDoabw19UbvqmLf1PJkpDH/tQgzB\\nxYtsLBRUcofpYoeIiIxfAA4do5WilJc8xqrGhkE4WcHfY24HXAiOvsjbxV+BRprX\\n1jtgJpV/9nJESMap+8PxipGUFRGjB83/uwJaa6mLftEKflX8i4MZ+HnqraXERsqA\\nWRUcDHIWmFfpzIB3iNuxawVvPH8NdCSPmQ9qTb8Cozl0AuOK2E9S+ke8oiYQScWR\\nLdu+zhej7GjuQ9R+Ub+wPWqvOA5qLXejqnCexVScDUuN+z9JWM3N2FG1MwxhAzhP\\ndEfoQHoBn6uyOmrVGP6fosV3chqhPoec42KeOAm1xDvx692isaIy1jPgIyPxeqhm\\n2Tw4E+02R7dlP8Ljf7JzfLm4oKpWHWlcHeqg24x6lY/wXU1RBcWaTa0AQUwoGm2m\\nIQCPfIqOEv/QC2HpO7SVCYkl65KwR0oTd1AzYxdxEq3xHQbh69EL0FGZPVxVCPI+\\nhEAyifKy1/tm3l91Rf/kGpHY7nIQKCXH49tmFwix8gke2nZJmRgX7/zAdMOAKeKH\\nAaIl4nQtv14EbaasMgnn9qgaDYnWzaReEob2QlQ/WYlTor61+KFpGtcf9jAkgudT\\n2op+4CF7wT2+aTXdtkVWfmv++iB8GnlqZdxLvyG1cTYjjYHVFbMSWQnxzQqiE2ms\\nQgp+byjWCumpsWTMdTO+d9NkDOo80vDpaRxEgebmhJ0MbX+eFjBgVg&#x3D;&#x3D;\\n- -- --END RSA PRIVATE KEY- -- --\&quot;,       \&quot;passphrase\&quot;: \&quot;helloworld\&quot;   } }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerRequest">Certificate issuer request.</param>
        /// <returns>Task of ApiResponse (CertificateIssuerInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerInfo>> CreateCertificateIssuerAsyncWithHttpInfo (CertificateIssuerRequest certificateIssuerRequest)
        {
            // verify the required parameter 'certificateIssuerRequest' is set
            if (certificateIssuerRequest == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerRequest' when calling CertificateIssuersApi->CreateCertificateIssuer");

            var localVarPath = "/v3/certificate-issuers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerRequest != null && certificateIssuerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificateIssuerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificateIssuerRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerInfo)));
        }

        /// <summary>
        /// Delete certificate issuer. Delete a certificate issuer by ID. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. An active certificate issuer may not be deleted. </param>
        /// <returns></returns>
        public void DeleteCertificateIssuer (string certificateIssuerId)
        {
             DeleteCertificateIssuerWithHttpInfo(certificateIssuerId);
        }

        /// <summary>
        /// Delete certificate issuer. Delete a certificate issuer by ID. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. An active certificate issuer may not be deleted. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCertificateIssuerWithHttpInfo (string certificateIssuerId)
        {
            // verify the required parameter 'certificateIssuerId' is set
            if (certificateIssuerId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerId' when calling CertificateIssuersApi->DeleteCertificateIssuer");

            var localVarPath = "/v3/certificate-issuers/{certificate-issuer-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerId != null) localVarPathParams.Add("certificate-issuer-id", Configuration.ApiClient.ParameterToString(certificateIssuerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete certificate issuer. Delete a certificate issuer by ID. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. An active certificate issuer may not be deleted. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCertificateIssuerAsync (string certificateIssuerId)
        {
             await DeleteCertificateIssuerAsyncWithHttpInfo(certificateIssuerId);

        }

        /// <summary>
        /// Delete certificate issuer. Delete a certificate issuer by ID. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X DELETE \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/0162155dc77d507b9d48a91b00000000 &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. An active certificate issuer may not be deleted. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCertificateIssuerAsyncWithHttpInfo (string certificateIssuerId)
        {
            // verify the required parameter 'certificateIssuerId' is set
            if (certificateIssuerId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerId' when calling CertificateIssuersApi->DeleteCertificateIssuer");

            var localVarPath = "/v3/certificate-issuers/{certificate-issuer-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerId != null) localVarPathParams.Add("certificate-issuer-id", Configuration.ApiClient.ParameterToString(certificateIssuerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get certificate issuer by ID. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. The ID of the certificate issuer. </param>
        /// <returns>CertificateIssuerInfo</returns>
        public CertificateIssuerInfo GetCertificateIssuer (string certificateIssuerId)
        {
             ApiResponse<CertificateIssuerInfo> localVarResponse = GetCertificateIssuerWithHttpInfo(certificateIssuerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get certificate issuer by ID. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. The ID of the certificate issuer. </param>
        /// <returns>ApiResponse of CertificateIssuerInfo</returns>
        public ApiResponse< CertificateIssuerInfo > GetCertificateIssuerWithHttpInfo (string certificateIssuerId)
        {
            // verify the required parameter 'certificateIssuerId' is set
            if (certificateIssuerId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerId' when calling CertificateIssuersApi->GetCertificateIssuer");

            var localVarPath = "/v3/certificate-issuers/{certificate-issuer-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerId != null) localVarPathParams.Add("certificate-issuer-id", Configuration.ApiClient.ParameterToString(certificateIssuerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerInfo)));
        }

        /// <summary>
        /// Get certificate issuer by ID. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. The ID of the certificate issuer. </param>
        /// <returns>Task of CertificateIssuerInfo</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerInfo> GetCertificateIssuerAsync (string certificateIssuerId)
        {
             ApiResponse<CertificateIssuerInfo> localVarResponse = await GetCertificateIssuerAsyncWithHttpInfo(certificateIssuerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get certificate issuer by ID. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. The ID of the certificate issuer. </param>
        /// <returns>Task of ApiResponse (CertificateIssuerInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerInfo>> GetCertificateIssuerAsyncWithHttpInfo (string certificateIssuerId)
        {
            // verify the required parameter 'certificateIssuerId' is set
            if (certificateIssuerId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerId' when calling CertificateIssuersApi->GetCertificateIssuer");

            var localVarPath = "/v3/certificate-issuers/{certificate-issuer-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerId != null) localVarPathParams.Add("certificate-issuer-id", Configuration.ApiClient.ParameterToString(certificateIssuerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerInfo)));
        }

        /// <summary>
        /// Get certificate issuers list. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CertificateIssuerInfoListResponse</returns>
        public CertificateIssuerInfoListResponse GetCertificateIssuers ()
        {
             ApiResponse<CertificateIssuerInfoListResponse> localVarResponse = GetCertificateIssuersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get certificate issuers list. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CertificateIssuerInfoListResponse</returns>
        public ApiResponse< CertificateIssuerInfoListResponse > GetCertificateIssuersWithHttpInfo ()
        {

            var localVarPath = "/v3/certificate-issuers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerInfoListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerInfoListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerInfoListResponse)));
        }

        /// <summary>
        /// Get certificate issuers list. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CertificateIssuerInfoListResponse</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerInfoListResponse> GetCertificateIssuersAsync ()
        {
             ApiResponse<CertificateIssuerInfoListResponse> localVarResponse = await GetCertificateIssuersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get certificate issuers list. 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CertificateIssuerInfoListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerInfoListResponse>> GetCertificateIssuersAsyncWithHttpInfo ()
        {

            var localVarPath = "/v3/certificate-issuers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCertificateIssuers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerInfoListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerInfoListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerInfoListResponse)));
        }

        /// <summary>
        /// Update certificate issuer. Update a certificate issuer. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000 \\ -d &#39;{   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer - updated.\&quot;,   \&quot;name\&quot;: \&quot;GlobalSign Issuer\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <param name="certificateIssuerUpdateRequest">Certificate issuer update request.</param>
        /// <returns>CertificateIssuerInfo</returns>
        public CertificateIssuerInfo UpdateCertificateIssuer (string certificateIssuerId, CertificateIssuerUpdateRequest certificateIssuerUpdateRequest)
        {
             ApiResponse<CertificateIssuerInfo> localVarResponse = UpdateCertificateIssuerWithHttpInfo(certificateIssuerId, certificateIssuerUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update certificate issuer. Update a certificate issuer. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000 \\ -d &#39;{   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer - updated.\&quot;,   \&quot;name\&quot;: \&quot;GlobalSign Issuer\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <param name="certificateIssuerUpdateRequest">Certificate issuer update request.</param>
        /// <returns>ApiResponse of CertificateIssuerInfo</returns>
        public ApiResponse< CertificateIssuerInfo > UpdateCertificateIssuerWithHttpInfo (string certificateIssuerId, CertificateIssuerUpdateRequest certificateIssuerUpdateRequest)
        {
            // verify the required parameter 'certificateIssuerId' is set
            if (certificateIssuerId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerId' when calling CertificateIssuersApi->UpdateCertificateIssuer");
            // verify the required parameter 'certificateIssuerUpdateRequest' is set
            if (certificateIssuerUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerUpdateRequest' when calling CertificateIssuersApi->UpdateCertificateIssuer");

            var localVarPath = "/v3/certificate-issuers/{certificate-issuer-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerId != null) localVarPathParams.Add("certificate-issuer-id", Configuration.ApiClient.ParameterToString(certificateIssuerId)); // path parameter
            if (certificateIssuerUpdateRequest != null && certificateIssuerUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificateIssuerUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificateIssuerUpdateRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerInfo)));
        }

        /// <summary>
        /// Update certificate issuer. Update a certificate issuer. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000 \\ -d &#39;{   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer - updated.\&quot;,   \&quot;name\&quot;: \&quot;GlobalSign Issuer\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <param name="certificateIssuerUpdateRequest">Certificate issuer update request.</param>
        /// <returns>Task of CertificateIssuerInfo</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerInfo> UpdateCertificateIssuerAsync (string certificateIssuerId, CertificateIssuerUpdateRequest certificateIssuerUpdateRequest)
        {
             ApiResponse<CertificateIssuerInfo> localVarResponse = await UpdateCertificateIssuerAsyncWithHttpInfo(certificateIssuerId, certificateIssuerUpdateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update certificate issuer. Update a certificate issuer. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X PUT \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621560be51507b9d48a91b00000000 \\ -d &#39;{   \&quot;description\&quot;: \&quot;Sample GlobalSign certificate issuer - updated.\&quot;,   \&quot;name\&quot;: \&quot;GlobalSign Issuer\&quot; }&#39; &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <param name="certificateIssuerUpdateRequest">Certificate issuer update request.</param>
        /// <returns>Task of ApiResponse (CertificateIssuerInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerInfo>> UpdateCertificateIssuerAsyncWithHttpInfo (string certificateIssuerId, CertificateIssuerUpdateRequest certificateIssuerUpdateRequest)
        {
            // verify the required parameter 'certificateIssuerId' is set
            if (certificateIssuerId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerId' when calling CertificateIssuersApi->UpdateCertificateIssuer");
            // verify the required parameter 'certificateIssuerUpdateRequest' is set
            if (certificateIssuerUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerUpdateRequest' when calling CertificateIssuersApi->UpdateCertificateIssuer");

            var localVarPath = "/v3/certificate-issuers/{certificate-issuer-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerId != null) localVarPathParams.Add("certificate-issuer-id", Configuration.ApiClient.ParameterToString(certificateIssuerId)); // path parameter
            if (certificateIssuerUpdateRequest != null && certificateIssuerUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(certificateIssuerUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = certificateIssuerUpdateRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerInfo)));
        }

        /// <summary>
        /// Verify certificate issuer. A utility API that can be used to validate the user configuration before activating a certificate issuer. Verifies that the certificate issuer is accessible and can be used to generate certificates by Device Management. &lt;br&gt; **Note:** The API requests the 3rd party CA to sign a test certificate. For some 3rd party CAs, this operation may make use of the account quota. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621a36719d507b9d48a91b00000000/verify &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <returns>CertificateIssuerVerifyResponse</returns>
        public CertificateIssuerVerifyResponse VerifyCertificateIssuer (string certificateIssuerId)
        {
             ApiResponse<CertificateIssuerVerifyResponse> localVarResponse = VerifyCertificateIssuerWithHttpInfo(certificateIssuerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify certificate issuer. A utility API that can be used to validate the user configuration before activating a certificate issuer. Verifies that the certificate issuer is accessible and can be used to generate certificates by Device Management. &lt;br&gt; **Note:** The API requests the 3rd party CA to sign a test certificate. For some 3rd party CAs, this operation may make use of the account quota. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621a36719d507b9d48a91b00000000/verify &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <returns>ApiResponse of CertificateIssuerVerifyResponse</returns>
        public ApiResponse< CertificateIssuerVerifyResponse > VerifyCertificateIssuerWithHttpInfo (string certificateIssuerId)
        {
            // verify the required parameter 'certificateIssuerId' is set
            if (certificateIssuerId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerId' when calling CertificateIssuersApi->VerifyCertificateIssuer");

            var localVarPath = "/v3/certificate-issuers/{certificate-issuer-id}/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerId != null) localVarPathParams.Add("certificate-issuer-id", Configuration.ApiClient.ParameterToString(certificateIssuerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerVerifyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerVerifyResponse)));
        }

        /// <summary>
        /// Verify certificate issuer. A utility API that can be used to validate the user configuration before activating a certificate issuer. Verifies that the certificate issuer is accessible and can be used to generate certificates by Device Management. &lt;br&gt; **Note:** The API requests the 3rd party CA to sign a test certificate. For some 3rd party CAs, this operation may make use of the account quota. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621a36719d507b9d48a91b00000000/verify &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <returns>Task of CertificateIssuerVerifyResponse</returns>
        public async System.Threading.Tasks.Task<CertificateIssuerVerifyResponse> VerifyCertificateIssuerAsync (string certificateIssuerId)
        {
             ApiResponse<CertificateIssuerVerifyResponse> localVarResponse = await VerifyCertificateIssuerAsyncWithHttpInfo(certificateIssuerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify certificate issuer. A utility API that can be used to validate the user configuration before activating a certificate issuer. Verifies that the certificate issuer is accessible and can be used to generate certificates by Device Management. &lt;br&gt; **Note:** The API requests the 3rd party CA to sign a test certificate. For some 3rd party CAs, this operation may make use of the account quota. &lt;br&gt; **Example usage:**  &#x60;&#x60;&#x60; curl -X POST \\ -H &#39;authorization: &lt;valid access token&gt;&#39; \\ -H &#39;content-type: application/json;charset&#x3D;UTF-8&#39; \\ https://api.us-east-1.mbedcloud.com/v3/certificate-issuers/01621a36719d507b9d48a91b00000000/verify &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="external_ca.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateIssuerId">Certificate issuer ID. &lt;br&gt; The ID of the certificate issuer. </param>
        /// <returns>Task of ApiResponse (CertificateIssuerVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CertificateIssuerVerifyResponse>> VerifyCertificateIssuerAsyncWithHttpInfo (string certificateIssuerId)
        {
            // verify the required parameter 'certificateIssuerId' is set
            if (certificateIssuerId == null)
                throw new ApiException(400, "Missing required parameter 'certificateIssuerId' when calling CertificateIssuersApi->VerifyCertificateIssuer");

            var localVarPath = "/v3/certificate-issuers/{certificate-issuer-id}/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json; charset=utf-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateIssuerId != null) localVarPathParams.Add("certificate-issuer-id", Configuration.ApiClient.ParameterToString(certificateIssuerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyCertificateIssuer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CertificateIssuerVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CertificateIssuerVerifyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CertificateIssuerVerifyResponse)));
        }

    }
}
