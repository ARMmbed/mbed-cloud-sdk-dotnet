/* 
 * Update Service API
 *
 * This is the API Documentation for the mbed deployment service which is part of the update service.
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace update_service.Model
{
    /// <summary>
    /// ManifestContentsPayloadInfoPayload
    /// </summary>
    [DataContract]
    public partial class ManifestContentsPayloadInfoPayload :  IEquatable<ManifestContentsPayloadInfoPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestContentsPayloadInfoPayload" /> class.
        /// </summary>
        /// <param name="Integrated">Integrated.</param>
        /// <param name="Reference">Reference.</param>
        public ManifestContentsPayloadInfoPayload(string Integrated = default(string), ManifestContentsPayloadInfoPayloadReference Reference = default(ManifestContentsPayloadInfoPayloadReference))
        {
            this.Integrated = Integrated;
            this.Reference = Reference;
        }
        
        /// <summary>
        /// Gets or Sets Integrated
        /// </summary>
        [DataMember(Name="integrated", EmitDefaultValue=false)]
        public string Integrated { get; set; }
        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public ManifestContentsPayloadInfoPayloadReference Reference { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManifestContentsPayloadInfoPayload {\n");
            sb.Append("  Integrated: ").Append(Integrated).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ManifestContentsPayloadInfoPayload);
        }

        /// <summary>
        /// Returns true if ManifestContentsPayloadInfoPayload instances are equal
        /// </summary>
        /// <param name="other">Instance of ManifestContentsPayloadInfoPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManifestContentsPayloadInfoPayload other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Integrated == other.Integrated ||
                    this.Integrated != null &&
                    this.Integrated.Equals(other.Integrated)
                ) && 
                (
                    this.Reference == other.Reference ||
                    this.Reference != null &&
                    this.Reference.Equals(other.Reference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Integrated != null)
                    hash = hash * 59 + this.Integrated.GetHashCode();
                if (this.Reference != null)
                    hash = hash * 59 + this.Reference.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
