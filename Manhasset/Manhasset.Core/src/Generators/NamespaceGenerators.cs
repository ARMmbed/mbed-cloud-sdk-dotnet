namespace Manhasset.Core.src.Generators
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    public static class NamespaceGenerators
    {
        public static NamespaceDeclarationSyntax CreateNamespace(string name, params string[] usings)
        {
            var @namespace = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(name));

            foreach (var @using in usings)
            {
                @namespace = @namespace.AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(@using)));
            }

            return @namespace;//.NormalizeWhitespace();
        }

        public static NamespaceDeclarationSyntax AddClass(this NamespaceDeclarationSyntax me, ClassDeclarationSyntax @class)
        {
            return me.AddMembers(@class);//.NormalizeWhitespace();
        }

        public static NamespaceDeclarationSyntax AddEnum(this NamespaceDeclarationSyntax me, EnumDeclarationSyntax @enum)
        {
            return me.AddMembers(@enum);//.NormalizeWhitespace();
        }

        public static NamespaceDeclarationSyntax AddUsing(this NamespaceDeclarationSyntax me, string @using)
        {
            return me.AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(@using)));//.NormalizeWhitespace();
        }

        public static NamespaceDeclarationSyntax RemoveDuplicateUsings(this NamespaceDeclarationSyntax me)
        {
            var temp = new List<UsingDirectiveSyntax>();
            foreach (var item in me.Usings)
            {
                if (!temp.Any(u => u.Name.ToFullString() == item.Name.ToFullString()))
                {
                    temp.Add(item);
                }
            }
            return me.WithUsings(SyntaxFactory.List(temp));
        }

        public static NamespaceDeclarationSyntax AddFileHeader(this NamespaceDeclarationSyntax me, string fileHeader)
        {
            var header = SyntaxFactory.TriviaList(
                new[]{
                    SyntaxFactory.Comment("// <auto-generated>"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("//"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("// Generated by"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("//                     _                        _"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("//   /\\/\\   __ _ _ __ | |__   __ _ ___ ___  ___| |_"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("//  /    \\ / _` | '_ \\| '_ \\ / _` / __/ __|/ _ \\ __|"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("// / /\\/\\ \\ (_| | | | | | | | (_| \\__ \\__ \\  __/ |_"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("// \\/    \\/\\__,_|_| |_|_| |_|\\__,_|___/___/\\___|\\__| v 1.0.0"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("//"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("// <copyright file=\"AccountManagementApi.Account.cs\" company=\"Arm\">"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("// Copyright (c) Arm. All rights reserved."),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("// </copyright>"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.Comment("// </auto-generated>"),
                        SyntaxFactory.LineFeed,
                        SyntaxFactory.LineFeed,
                }
            );

            return me.InsertTriviaBefore(me.GetLeadingTrivia().First(), header);//.NormalizeWhitespace();
        }
    }
}