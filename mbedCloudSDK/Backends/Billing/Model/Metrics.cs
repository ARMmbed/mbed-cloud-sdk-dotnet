/* 
 * mbed-billing REST API documentation for API-server
 *
 * This document contains the public REST API definitions of the mbed-billing service's API server component.
 *
 * OpenAPI spec version: 1.3.7-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace billing.Model
{
    /// <summary>
    /// Metrics
    /// </summary>
    [DataContract]
    public partial class Metrics :  IEquatable<Metrics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Metrics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Metrics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Metrics" /> class.
        /// </summary>
        /// <param name="VertxHttpServersDeleteRequests">VertxHttpServersDeleteRequests (required).</param>
        /// <param name="JvmMemPoolsPSSurvivorSpaceInit">JvmMemPoolsPSSurvivorSpaceInit (required).</param>
        /// <param name="VertxPoolsWorkerVertXWorkerThreadQueueSize">VertxPoolsWorkerVertXWorkerThreadQueueSize (required).</param>
        /// <param name="VertxHttpServersOptionsRequests">VertxHttpServersOptionsRequests (required).</param>
        /// <param name="JvmMemNonHeapMax">JvmMemNonHeapMax (required).</param>
        /// <param name="JvmMemHeapUsed">JvmMemHeapUsed (required).</param>
        /// <param name="JvmMemTotalMax">JvmMemTotalMax (required).</param>
        /// <param name="PersistenceInsertAccount">PersistenceInsertAccount (required).</param>
        /// <param name="VertxHttpServersBytesRead">VertxHttpServersBytesRead (required).</param>
        /// <param name="VertxHttpClientsIamBytesWritten">VertxHttpClientsIamBytesWritten (required).</param>
        /// <param name="VertxHttpClientsIamOptionsRequests">VertxHttpClientsIamOptionsRequests (required).</param>
        /// <param name="VertxHttpClientsIamRequests">VertxHttpClientsIamRequests (required).</param>
        /// <param name="PersistentStoreDsPoolUsage">PersistentStoreDsPoolUsage (required).</param>
        /// <param name="VertxPoolsWorkerVertXInternalBlockingPoolRatio">VertxPoolsWorkerVertXInternalBlockingPoolRatio (required).</param>
        /// <param name="PersistenceInsertActiveDevices">PersistenceInsertActiveDevices (required).</param>
        /// <param name="JvmMemTotalInit">JvmMemTotalInit (required).</param>
        /// <param name="JvmMemPoolsPSOldGenCommitted">JvmMemPoolsPSOldGenCommitted (required).</param>
        /// <param name="VertxTimers">VertxTimers (required).</param>
        /// <param name="VertxEventbusMessagesSent">VertxEventbusMessagesSent (required).</param>
        /// <param name="PersistenceSelectServiceUpdateLog">PersistenceSelectServiceUpdateLog (required).</param>
        /// <param name="PersistenceSelectAccountsStatisticsWithAccounts">PersistenceSelectAccountsStatisticsWithAccounts (required).</param>
        /// <param name="HttpHandlerActivedevicesInImportsTimer">HttpHandlerActivedevicesInImportsTimer (required).</param>
        /// <param name="PersistenceSelectHealthcheck">PersistenceSelectHealthcheck (required).</param>
        /// <param name="VertxHttpClientsIamBytesRead">VertxHttpClientsIamBytesRead (required).</param>
        /// <param name="PersistenceSelectInitialAccounts">PersistenceSelectInitialAccounts (required).</param>
        /// <param name="VertxEventbusHandlers">VertxEventbusHandlers (required).</param>
        /// <param name="VertxHttpServersExceptions">VertxHttpServersExceptions (required).</param>
        /// <param name="VertxEventbusMessagesReplyFailures">VertxEventbusMessagesReplyFailures (required).</param>
        /// <param name="VertxHttpClientsIamHeadRequests">VertxHttpClientsIamHeadRequests (required).</param>
        /// <param name="JvmMemPoolsPSOldGenMax">JvmMemPoolsPSOldGenMax (required).</param>
        /// <param name="PersistenceUpdateUpdateAccountUpgradeTime">PersistenceUpdateUpdateAccountUpgradeTime (required).</param>
        /// <param name="JvmMemPoolsCompressedClassSpaceInit">JvmMemPoolsCompressedClassSpaceInit (required).</param>
        /// <param name="JvmMemPoolsCodeCacheUsage">JvmMemPoolsCodeCacheUsage (required).</param>
        /// <param name="VertxVerticles">VertxVerticles (required).</param>
        /// <param name="VertxHttpServersResponses2xx">VertxHttpServersResponses2xx (required).</param>
        /// <param name="PersistenceInsertImportLog">PersistenceInsertImportLog (required).</param>
        /// <param name="VertxHttpServersPatchRequests">VertxHttpServersPatchRequests (required).</param>
        /// <param name="HttpHandlerServiceUpdateLogTimer">HttpHandlerServiceUpdateLogTimer (required).</param>
        /// <param name="JvmMemPoolsMetaspaceInit">JvmMemPoolsMetaspaceInit (required).</param>
        /// <param name="JvmGcPSMarkSweepTime">JvmGcPSMarkSweepTime (required).</param>
        /// <param name="HttpHandlerTimeSeriesTimer">HttpHandlerTimeSeriesTimer (required).</param>
        /// <param name="VertxHttpServersConnections">VertxHttpServersConnections (required).</param>
        /// <param name="VertxEventbusMessagesSentLocal">VertxEventbusMessagesSentLocal (required).</param>
        /// <param name="VertxHttpClientsIamOtherRequests">VertxHttpClientsIamOtherRequests (required).</param>
        /// <param name="VertxHttpClientsIamResponses5xx">VertxHttpClientsIamResponses5xx (required).</param>
        /// <param name="JvmMemPoolsPSEdenSpaceMax">JvmMemPoolsPSEdenSpaceMax (required).</param>
        /// <param name="VertxEventbusMessagesDeliveredRemote">VertxEventbusMessagesDeliveredRemote (required).</param>
        /// <param name="VertxHttpClientsIamConnectionsPoolRatio">VertxHttpClientsIamConnectionsPoolRatio (required).</param>
        /// <param name="PersistentStoreDsPoolConnectionTimeoutRate">PersistentStoreDsPoolConnectionTimeoutRate (required).</param>
        /// <param name="JvmMemPoolsPSSurvivorSpaceUsage">JvmMemPoolsPSSurvivorSpaceUsage (required).</param>
        /// <param name="JvmMemTotalCommitted">JvmMemTotalCommitted (required).</param>
        /// <param name="JvmMemNonHeapUsed">JvmMemNonHeapUsed (required).</param>
        /// <param name="PersistentStoreDsPoolWait">PersistentStoreDsPoolWait (required).</param>
        /// <param name="VertxWorkerPoolSize">VertxWorkerPoolSize (required).</param>
        /// <param name="VertxPoolsWorkerVertXInternalBlockingInUse">VertxPoolsWorkerVertXInternalBlockingInUse (required).</param>
        /// <param name="VertxEventbusMessagesPublished">VertxEventbusMessagesPublished (required).</param>
        /// <param name="VertxHttpServersGetRequests">VertxHttpServersGetRequests (required).</param>
        /// <param name="VertxHttpClientsIamOpenNetsockets">VertxHttpClientsIamOpenNetsockets (required).</param>
        /// <param name="JvmMemNonHeapInit">JvmMemNonHeapInit (required).</param>
        /// <param name="VertxHttpClientsIamDeleteRequests">VertxHttpClientsIamDeleteRequests (required).</param>
        /// <param name="JvmMemPoolsPSEdenSpaceUsed">JvmMemPoolsPSEdenSpaceUsed (required).</param>
        /// <param name="HttpHandlerMetricsHandlerTimer">HttpHandlerMetricsHandlerTimer (required).</param>
        /// <param name="PersistenceSelectImportLogActiveDevices">PersistenceSelectImportLogActiveDevices (required).</param>
        /// <param name="HttpHandlerActivedevicesTimer">HttpHandlerActivedevicesTimer (required).</param>
        /// <param name="VertxHttpClientsIamOpenConnections">VertxHttpClientsIamOpenConnections (required).</param>
        /// <param name="JvmMemPoolsPSSurvivorSpaceUsed">JvmMemPoolsPSSurvivorSpaceUsed (required).</param>
        /// <param name="VertxHttpClientsIamResponses1xx">VertxHttpClientsIamResponses1xx (required).</param>
        /// <param name="PersistenceInsertDlq">PersistenceInsertDlq (required).</param>
        /// <param name="VertxEventbusMessagesPublishedRemote">VertxEventbusMessagesPublishedRemote (required).</param>
        /// <param name="JvmMemPoolsPSOldGenInit">JvmMemPoolsPSOldGenInit (required).</param>
        /// <param name="VertxHttpClientsIamConnections">VertxHttpClientsIamConnections (required).</param>
        /// <param name="VertxEventbusMessagesPending">VertxEventbusMessagesPending (required).</param>
        /// <param name="VertxHttpServersConnectRequests">VertxHttpServersConnectRequests (required).</param>
        /// <param name="VertxPoolsWorkerVertXInternalBlockingQueueSize">VertxPoolsWorkerVertXInternalBlockingQueueSize (required).</param>
        /// <param name="HttpHandlerBuildInfoTimer">HttpHandlerBuildInfoTimer (required).</param>
        /// <param name="JvmMemPoolsPSEdenSpaceUsage">JvmMemPoolsPSEdenSpaceUsage (required).</param>
        /// <param name="VertxEventbusMessagesPublishedLocal">VertxEventbusMessagesPublishedLocal (required).</param>
        /// <param name="PersistenceSelectAccountsStatisticsAll">PersistenceSelectAccountsStatisticsAll (required).</param>
        /// <param name="PersistenceSelectAccountsStatisticsWithAccount">PersistenceSelectAccountsStatisticsWithAccount (required).</param>
        /// <param name="JvmGcPSScavengeTime">JvmGcPSScavengeTime (required).</param>
        /// <param name="VertxHttpClientsIamExceptions">VertxHttpClientsIamExceptions (required).</param>
        /// <param name="JvmMemPoolsPSOldGenUsage">JvmMemPoolsPSOldGenUsage (required).</param>
        /// <param name="VertxHttpServersPostRequests">VertxHttpServersPostRequests (required).</param>
        /// <param name="JvmMemPoolsPSOldGenUsedAfterGc">JvmMemPoolsPSOldGenUsedAfterGc (required).</param>
        /// <param name="VertxEventbusMessagesSentRemote">VertxEventbusMessagesSentRemote (required).</param>
        /// <param name="PersistenceSelectAccounts">PersistenceSelectAccounts (required).</param>
        /// <param name="VertxEventbusMessagesPendingRemote">VertxEventbusMessagesPendingRemote (required).</param>
        /// <param name="VertxEventbusMessagesReceivedLocal">VertxEventbusMessagesReceivedLocal (required).</param>
        /// <param name="JvmMemPoolsCodeCacheMax">JvmMemPoolsCodeCacheMax (required).</param>
        /// <param name="VertxPoolsWorkerVertXInternalBlockingMaxPoolSize">VertxPoolsWorkerVertXInternalBlockingMaxPoolSize (required).</param>
        /// <param name="PersistenceOperationStore">PersistenceOperationStore (required).</param>
        /// <param name="HttpHandlerHealthCheckTimer">HttpHandlerHealthCheckTimer (required).</param>
        /// <param name="VertxHttpClientsIamConnectRequests">VertxHttpClientsIamConnectRequests (required).</param>
        /// <param name="VertxHttpServersTraceRequests">VertxHttpServersTraceRequests (required).</param>
        /// <param name="JvmMemNonHeapUsage">JvmMemNonHeapUsage (required).</param>
        /// <param name="VertxHttpServersPutRequests">VertxHttpServersPutRequests (required).</param>
        /// <param name="JvmMemTotalUsed">JvmMemTotalUsed (required).</param>
        /// <param name="JvmMemPoolsCodeCacheCommitted">JvmMemPoolsCodeCacheCommitted (required).</param>
        /// <param name="HttpHandlerAccountStatsWithoutAccount">HttpHandlerAccountStatsWithoutAccount (required).</param>
        /// <param name="VertxEventbusMessagesDeliveredLocal">VertxEventbusMessagesDeliveredLocal (required).</param>
        /// <param name="JvmMemPoolsPSEdenSpaceUsedAfterGc">JvmMemPoolsPSEdenSpaceUsedAfterGc (required).</param>
        /// <param name="JvmMemPoolsCompressedClassSpaceUsed">JvmMemPoolsCompressedClassSpaceUsed (required).</param>
        /// <param name="VertxPoolsWorkerVertXWorkerThreadQueueDelay">VertxPoolsWorkerVertXWorkerThreadQueueDelay (required).</param>
        /// <param name="VertxPoolsWorkerVertXInternalBlockingQueueDelay">VertxPoolsWorkerVertXInternalBlockingQueueDelay (required).</param>
        /// <param name="HttpHandlerAccountStatsWithAccount">HttpHandlerAccountStatsWithAccount (required).</param>
        /// <param name="JvmMemPoolsCompressedClassSpaceMax">JvmMemPoolsCompressedClassSpaceMax (required).</param>
        /// <param name="HttpHandlerAccountListTimer">HttpHandlerAccountListTimer (required).</param>
        /// <param name="PersistentStoreDsPoolTotalConnections">PersistentStoreDsPoolTotalConnections (required).</param>
        /// <param name="JvmMemPoolsPSSurvivorSpaceCommitted">JvmMemPoolsPSSurvivorSpaceCommitted (required).</param>
        /// <param name="VertxHttpServersResponses5xx">VertxHttpServersResponses5xx (required).</param>
        /// <param name="JvmMemPoolsCodeCacheInit">JvmMemPoolsCodeCacheInit (required).</param>
        /// <param name="HttpHandlerReportJson">HttpHandlerReportJson (required).</param>
        /// <param name="VertxHttpServersResponses4xx">VertxHttpServersResponses4xx (required).</param>
        /// <param name="VertxPoolsWorkerVertXWorkerThreadUsage">VertxPoolsWorkerVertXWorkerThreadUsage (required).</param>
        /// <param name="JvmMemHeapInit">JvmMemHeapInit (required).</param>
        /// <param name="JvmMemHeapMax">JvmMemHeapMax (required).</param>
        /// <param name="VertxHttpServersResponses1xx">VertxHttpServersResponses1xx (required).</param>
        /// <param name="VertxHttpClientsIamPostRequests">VertxHttpClientsIamPostRequests (required).</param>
        /// <param name="VertxHttpServersOpenWebsockets">VertxHttpServersOpenWebsockets (required).</param>
        /// <param name="VertxHttpServersOtherRequests">VertxHttpServersOtherRequests (required).</param>
        /// <param name="HttpHandlerReportActivedevicesTimer">HttpHandlerReportActivedevicesTimer (required).</param>
        /// <param name="JvmMemHeapUsage">JvmMemHeapUsage (required).</param>
        /// <param name="JvmMemNonHeapCommitted">JvmMemNonHeapCommitted (required).</param>
        /// <param name="JvmMemPoolsCompressedClassSpaceUsage">JvmMemPoolsCompressedClassSpaceUsage (required).</param>
        /// <param name="PersistentStoreDsPoolConnectionCreation">PersistentStoreDsPoolConnectionCreation (required).</param>
        /// <param name="VertxHttpClientsIamOpenWebsockets">VertxHttpClientsIamOpenWebsockets (required).</param>
        /// <param name="PersistenceSelectImportLog">PersistenceSelectImportLog (required).</param>
        /// <param name="PersistenceSelectAccountsStatisticsWithAccountsAndStarttime">PersistenceSelectAccountsStatisticsWithAccountsAndStarttime (required).</param>
        /// <param name="PersistenceOperationDlq">PersistenceOperationDlq (required).</param>
        /// <param name="JvmGcPSScavengeCount">JvmGcPSScavengeCount (required).</param>
        /// <param name="VertxHttpClientsIamConnectionsMaxPoolSize">VertxHttpClientsIamConnectionsMaxPoolSize (required).</param>
        /// <param name="VertxEventbusMessagesBytesWritten">VertxEventbusMessagesBytesWritten (required).</param>
        /// <param name="JvmMemPoolsCompressedClassSpaceCommitted">JvmMemPoolsCompressedClassSpaceCommitted (required).</param>
        /// <param name="VertxVerticlesComMbedBillingServerApiserverHttpHttpServer">VertxVerticlesComMbedBillingServerApiserverHttpHttpServer (required).</param>
        /// <param name="JvmMemPoolsCodeCacheUsed">JvmMemPoolsCodeCacheUsed (required).</param>
        /// <param name="HttpHandlerImportLogTimer">HttpHandlerImportLogTimer (required).</param>
        /// <param name="VertxEventbusMessagesPendingLocal">VertxEventbusMessagesPendingLocal (required).</param>
        /// <param name="VertxHttpServersBytesWritten">VertxHttpServersBytesWritten (required).</param>
        /// <param name="VertxEventbusMessagesBytesRead">VertxEventbusMessagesBytesRead (required).</param>
        /// <param name="VertxHttpServersHeadRequests">VertxHttpServersHeadRequests (required).</param>
        /// <param name="JvmMemPoolsPSSurvivorSpaceUsedAfterGc">JvmMemPoolsPSSurvivorSpaceUsedAfterGc (required).</param>
        /// <param name="PersistentStoreDsPoolActiveConnections">PersistentStoreDsPoolActiveConnections (required).</param>
        /// <param name="PersistenceConnectionConnect">PersistenceConnectionConnect (required).</param>
        /// <param name="JvmMemPoolsPSEdenSpaceInit">JvmMemPoolsPSEdenSpaceInit (required).</param>
        /// <param name="VertxHttpClientsIamResponses2xx">VertxHttpClientsIamResponses2xx (required).</param>
        /// <param name="PersistenceInsertAccountStatistics">PersistenceInsertAccountStatistics (required).</param>
        /// <param name="JvmMemPoolsMetaspaceUsed">JvmMemPoolsMetaspaceUsed (required).</param>
        /// <param name="JvmMemPoolsMetaspaceMax">JvmMemPoolsMetaspaceMax (required).</param>
        /// <param name="HttpHandlerReportZip">HttpHandlerReportZip (required).</param>
        /// <param name="VertxEventLoopSize">VertxEventLoopSize (required).</param>
        /// <param name="VertxHttpServersOpenConnections">VertxHttpServersOpenConnections (required).</param>
        /// <param name="VertxHttpClientsIamResponses3xx">VertxHttpClientsIamResponses3xx (required).</param>
        /// <param name="JvmMemPoolsPSEdenSpaceCommitted">JvmMemPoolsPSEdenSpaceCommitted (required).</param>
        /// <param name="VertxHttpServersResponses3xx">VertxHttpServersResponses3xx (required).</param>
        /// <param name="VertxHttpClientsIamGetRequests">VertxHttpClientsIamGetRequests (required).</param>
        /// <param name="JvmMemHeapCommitted">JvmMemHeapCommitted (required).</param>
        /// <param name="VertxHttpServersOpenNetsockets">VertxHttpServersOpenNetsockets (required).</param>
        /// <param name="VertxHttpServersRequests">VertxHttpServersRequests (required).</param>
        /// <param name="PersistentStoreDsPoolPendingConnections">PersistentStoreDsPoolPendingConnections (required).</param>
        /// <param name="JvmMemPoolsPSOldGenUsed">JvmMemPoolsPSOldGenUsed (required).</param>
        /// <param name="JvmMemPoolsMetaspaceUsage">JvmMemPoolsMetaspaceUsage (required).</param>
        /// <param name="VertxPoolsWorkerVertXWorkerThreadInUse">VertxPoolsWorkerVertXWorkerThreadInUse (required).</param>
        /// <param name="PersistenceSelectTimeSeries">PersistenceSelectTimeSeries (required).</param>
        /// <param name="JvmMemPoolsMetaspaceCommitted">JvmMemPoolsMetaspaceCommitted (required).</param>
        /// <param name="VertxEventbusMessagesDelivered">VertxEventbusMessagesDelivered (required).</param>
        /// <param name="VertxHttpClientsIamPatchRequests">VertxHttpClientsIamPatchRequests (required).</param>
        /// <param name="VertxEventbusMessagesReceivedRemote">VertxEventbusMessagesReceivedRemote (required).</param>
        /// <param name="VertxHttpClientsIamResponses4xx">VertxHttpClientsIamResponses4xx (required).</param>
        /// <param name="VertxPoolsWorkerVertXWorkerThreadPoolRatio">VertxPoolsWorkerVertXWorkerThreadPoolRatio (required).</param>
        /// <param name="VertxHttpClientsIamTraceRequests">VertxHttpClientsIamTraceRequests (required).</param>
        /// <param name="VertxPoolsWorkerVertXWorkerThreadMaxPoolSize">VertxPoolsWorkerVertXWorkerThreadMaxPoolSize (required).</param>
        /// <param name="VertxPoolsWorkerVertXInternalBlockingUsage">VertxPoolsWorkerVertXInternalBlockingUsage (required).</param>
        /// <param name="PersistenceSelectCheckIfExists">PersistenceSelectCheckIfExists (required).</param>
        /// <param name="VertxEventbusMessagesReceived">VertxEventbusMessagesReceived (required).</param>
        /// <param name="JvmGcPSMarkSweepCount">JvmGcPSMarkSweepCount (required).</param>
        /// <param name="JvmMemPoolsPSSurvivorSpaceMax">JvmMemPoolsPSSurvivorSpaceMax (required).</param>
        /// <param name="PersistentStoreDsPoolIdleConnections">PersistentStoreDsPoolIdleConnections (required).</param>
        /// <param name="VertxHttpClientsIamPutRequests">VertxHttpClientsIamPutRequests (required).</param>
        public Metrics(MetricTimer VertxHttpServersDeleteRequests = default(MetricTimer), MetricGauge JvmMemPoolsPSSurvivorSpaceInit = default(MetricGauge), MetricCounter VertxPoolsWorkerVertXWorkerThreadQueueSize = default(MetricCounter), MetricTimer VertxHttpServersOptionsRequests = default(MetricTimer), MetricGauge JvmMemNonHeapMax = default(MetricGauge), MetricGauge JvmMemHeapUsed = default(MetricGauge), MetricGauge JvmMemTotalMax = default(MetricGauge), MetricTimer PersistenceInsertAccount = default(MetricTimer), MetricHistogram VertxHttpServersBytesRead = default(MetricHistogram), MetricHistogram VertxHttpClientsIamBytesWritten = default(MetricHistogram), MetricTimer VertxHttpClientsIamOptionsRequests = default(MetricTimer), MetricTimer VertxHttpClientsIamRequests = default(MetricTimer), MetricHistogram PersistentStoreDsPoolUsage = default(MetricHistogram), MetricGauge VertxPoolsWorkerVertXInternalBlockingPoolRatio = default(MetricGauge), MetricTimer PersistenceInsertActiveDevices = default(MetricTimer), MetricGauge JvmMemTotalInit = default(MetricGauge), MetricGauge JvmMemPoolsPSOldGenCommitted = default(MetricGauge), MetricCounter VertxTimers = default(MetricCounter), MetricMeter VertxEventbusMessagesSent = default(MetricMeter), MetricTimer PersistenceSelectServiceUpdateLog = default(MetricTimer), MetricTimer PersistenceSelectAccountsStatisticsWithAccounts = default(MetricTimer), MetricTimer HttpHandlerActivedevicesInImportsTimer = default(MetricTimer), MetricTimer PersistenceSelectHealthcheck = default(MetricTimer), MetricHistogram VertxHttpClientsIamBytesRead = default(MetricHistogram), MetricTimer PersistenceSelectInitialAccounts = default(MetricTimer), MetricCounter VertxEventbusHandlers = default(MetricCounter), MetricCounter VertxHttpServersExceptions = default(MetricCounter), MetricMeter VertxEventbusMessagesReplyFailures = default(MetricMeter), MetricTimer VertxHttpClientsIamHeadRequests = default(MetricTimer), MetricGauge JvmMemPoolsPSOldGenMax = default(MetricGauge), MetricTimer PersistenceUpdateUpdateAccountUpgradeTime = default(MetricTimer), MetricGauge JvmMemPoolsCompressedClassSpaceInit = default(MetricGauge), MetricGauge JvmMemPoolsCodeCacheUsage = default(MetricGauge), MetricCounter VertxVerticles = default(MetricCounter), MetricMeter VertxHttpServersResponses2xx = default(MetricMeter), MetricTimer PersistenceInsertImportLog = default(MetricTimer), MetricTimer VertxHttpServersPatchRequests = default(MetricTimer), MetricTimer HttpHandlerServiceUpdateLogTimer = default(MetricTimer), MetricGauge JvmMemPoolsMetaspaceInit = default(MetricGauge), MetricGauge JvmGcPSMarkSweepTime = default(MetricGauge), MetricTimer HttpHandlerTimeSeriesTimer = default(MetricTimer), MetricTimer VertxHttpServersConnections = default(MetricTimer), MetricMeter VertxEventbusMessagesSentLocal = default(MetricMeter), MetricTimer VertxHttpClientsIamOtherRequests = default(MetricTimer), MetricMeter VertxHttpClientsIamResponses5xx = default(MetricMeter), MetricGauge JvmMemPoolsPSEdenSpaceMax = default(MetricGauge), MetricMeter VertxEventbusMessagesDeliveredRemote = default(MetricMeter), MetricGauge VertxHttpClientsIamConnectionsPoolRatio = default(MetricGauge), MetricMeter PersistentStoreDsPoolConnectionTimeoutRate = default(MetricMeter), MetricGauge JvmMemPoolsPSSurvivorSpaceUsage = default(MetricGauge), MetricGauge JvmMemTotalCommitted = default(MetricGauge), MetricGauge JvmMemNonHeapUsed = default(MetricGauge), MetricTimer PersistentStoreDsPoolWait = default(MetricTimer), MetricGauge VertxWorkerPoolSize = default(MetricGauge), MetricCounter VertxPoolsWorkerVertXInternalBlockingInUse = default(MetricCounter), MetricMeter VertxEventbusMessagesPublished = default(MetricMeter), MetricTimer VertxHttpServersGetRequests = default(MetricTimer), MetricCounter VertxHttpClientsIamOpenNetsockets = default(MetricCounter), MetricGauge JvmMemNonHeapInit = default(MetricGauge), MetricTimer VertxHttpClientsIamDeleteRequests = default(MetricTimer), MetricGauge JvmMemPoolsPSEdenSpaceUsed = default(MetricGauge), MetricTimer HttpHandlerMetricsHandlerTimer = default(MetricTimer), MetricTimer PersistenceSelectImportLogActiveDevices = default(MetricTimer), MetricTimer HttpHandlerActivedevicesTimer = default(MetricTimer), List<MetricHostCounter> VertxHttpClientsIamOpenConnections = default(List<MetricHostCounter>), MetricGauge JvmMemPoolsPSSurvivorSpaceUsed = default(MetricGauge), MetricMeter VertxHttpClientsIamResponses1xx = default(MetricMeter), MetricTimer PersistenceInsertDlq = default(MetricTimer), MetricMeter VertxEventbusMessagesPublishedRemote = default(MetricMeter), MetricGauge JvmMemPoolsPSOldGenInit = default(MetricGauge), MetricTimer VertxHttpClientsIamConnections = default(MetricTimer), MetricCounter VertxEventbusMessagesPending = default(MetricCounter), MetricTimer VertxHttpServersConnectRequests = default(MetricTimer), MetricCounter VertxPoolsWorkerVertXInternalBlockingQueueSize = default(MetricCounter), MetricTimer HttpHandlerBuildInfoTimer = default(MetricTimer), MetricGauge JvmMemPoolsPSEdenSpaceUsage = default(MetricGauge), MetricMeter VertxEventbusMessagesPublishedLocal = default(MetricMeter), MetricTimer PersistenceSelectAccountsStatisticsAll = default(MetricTimer), MetricTimer PersistenceSelectAccountsStatisticsWithAccount = default(MetricTimer), MetricGauge JvmGcPSScavengeTime = default(MetricGauge), MetricCounter VertxHttpClientsIamExceptions = default(MetricCounter), MetricGauge JvmMemPoolsPSOldGenUsage = default(MetricGauge), MetricTimer VertxHttpServersPostRequests = default(MetricTimer), MetricGauge JvmMemPoolsPSOldGenUsedAfterGc = default(MetricGauge), MetricMeter VertxEventbusMessagesSentRemote = default(MetricMeter), MetricTimer PersistenceSelectAccounts = default(MetricTimer), MetricCounter VertxEventbusMessagesPendingRemote = default(MetricCounter), MetricMeter VertxEventbusMessagesReceivedLocal = default(MetricMeter), MetricGauge JvmMemPoolsCodeCacheMax = default(MetricGauge), MetricGauge VertxPoolsWorkerVertXInternalBlockingMaxPoolSize = default(MetricGauge), MetricTimer PersistenceOperationStore = default(MetricTimer), MetricTimer HttpHandlerHealthCheckTimer = default(MetricTimer), MetricTimer VertxHttpClientsIamConnectRequests = default(MetricTimer), MetricTimer VertxHttpServersTraceRequests = default(MetricTimer), MetricGauge JvmMemNonHeapUsage = default(MetricGauge), MetricTimer VertxHttpServersPutRequests = default(MetricTimer), MetricGauge JvmMemTotalUsed = default(MetricGauge), MetricGauge JvmMemPoolsCodeCacheCommitted = default(MetricGauge), MetricTimer HttpHandlerAccountStatsWithoutAccount = default(MetricTimer), MetricMeter VertxEventbusMessagesDeliveredLocal = default(MetricMeter), MetricGauge JvmMemPoolsPSEdenSpaceUsedAfterGc = default(MetricGauge), MetricGauge JvmMemPoolsCompressedClassSpaceUsed = default(MetricGauge), MetricTimer VertxPoolsWorkerVertXWorkerThreadQueueDelay = default(MetricTimer), MetricTimer VertxPoolsWorkerVertXInternalBlockingQueueDelay = default(MetricTimer), MetricTimer HttpHandlerAccountStatsWithAccount = default(MetricTimer), MetricGauge JvmMemPoolsCompressedClassSpaceMax = default(MetricGauge), MetricTimer HttpHandlerAccountListTimer = default(MetricTimer), MetricGauge PersistentStoreDsPoolTotalConnections = default(MetricGauge), MetricGauge JvmMemPoolsPSSurvivorSpaceCommitted = default(MetricGauge), MetricMeter VertxHttpServersResponses5xx = default(MetricMeter), MetricGauge JvmMemPoolsCodeCacheInit = default(MetricGauge), MetricTimer HttpHandlerReportJson = default(MetricTimer), MetricMeter VertxHttpServersResponses4xx = default(MetricMeter), MetricTimer VertxPoolsWorkerVertXWorkerThreadUsage = default(MetricTimer), MetricGauge JvmMemHeapInit = default(MetricGauge), MetricGauge JvmMemHeapMax = default(MetricGauge), MetricMeter VertxHttpServersResponses1xx = default(MetricMeter), MetricTimer VertxHttpClientsIamPostRequests = default(MetricTimer), MetricCounter VertxHttpServersOpenWebsockets = default(MetricCounter), MetricTimer VertxHttpServersOtherRequests = default(MetricTimer), MetricTimer HttpHandlerReportActivedevicesTimer = default(MetricTimer), MetricGauge JvmMemHeapUsage = default(MetricGauge), MetricGauge JvmMemNonHeapCommitted = default(MetricGauge), MetricGauge JvmMemPoolsCompressedClassSpaceUsage = default(MetricGauge), MetricHistogram PersistentStoreDsPoolConnectionCreation = default(MetricHistogram), MetricCounter VertxHttpClientsIamOpenWebsockets = default(MetricCounter), MetricTimer PersistenceSelectImportLog = default(MetricTimer), MetricTimer PersistenceSelectAccountsStatisticsWithAccountsAndStarttime = default(MetricTimer), MetricTimer PersistenceOperationDlq = default(MetricTimer), MetricGauge JvmGcPSScavengeCount = default(MetricGauge), MetricGauge VertxHttpClientsIamConnectionsMaxPoolSize = default(MetricGauge), MetricMeter VertxEventbusMessagesBytesWritten = default(MetricMeter), MetricGauge JvmMemPoolsCompressedClassSpaceCommitted = default(MetricGauge), MetricCounter VertxVerticlesComMbedBillingServerApiserverHttpHttpServer = default(MetricCounter), MetricGauge JvmMemPoolsCodeCacheUsed = default(MetricGauge), MetricTimer HttpHandlerImportLogTimer = default(MetricTimer), MetricCounter VertxEventbusMessagesPendingLocal = default(MetricCounter), MetricHistogram VertxHttpServersBytesWritten = default(MetricHistogram), MetricMeter VertxEventbusMessagesBytesRead = default(MetricMeter), MetricTimer VertxHttpServersHeadRequests = default(MetricTimer), MetricGauge JvmMemPoolsPSSurvivorSpaceUsedAfterGc = default(MetricGauge), MetricGauge PersistentStoreDsPoolActiveConnections = default(MetricGauge), MetricTimer PersistenceConnectionConnect = default(MetricTimer), MetricGauge JvmMemPoolsPSEdenSpaceInit = default(MetricGauge), MetricMeter VertxHttpClientsIamResponses2xx = default(MetricMeter), MetricTimer PersistenceInsertAccountStatistics = default(MetricTimer), MetricGauge JvmMemPoolsMetaspaceUsed = default(MetricGauge), MetricGauge JvmMemPoolsMetaspaceMax = default(MetricGauge), MetricTimer HttpHandlerReportZip = default(MetricTimer), MetricGauge VertxEventLoopSize = default(MetricGauge), List<MetricHostCounter> VertxHttpServersOpenConnections = default(List<MetricHostCounter>), MetricMeter VertxHttpClientsIamResponses3xx = default(MetricMeter), MetricGauge JvmMemPoolsPSEdenSpaceCommitted = default(MetricGauge), MetricMeter VertxHttpServersResponses3xx = default(MetricMeter), MetricTimer VertxHttpClientsIamGetRequests = default(MetricTimer), MetricGauge JvmMemHeapCommitted = default(MetricGauge), MetricCounter VertxHttpServersOpenNetsockets = default(MetricCounter), MetricTimer VertxHttpServersRequests = default(MetricTimer), MetricGauge PersistentStoreDsPoolPendingConnections = default(MetricGauge), MetricGauge JvmMemPoolsPSOldGenUsed = default(MetricGauge), MetricGauge JvmMemPoolsMetaspaceUsage = default(MetricGauge), MetricCounter VertxPoolsWorkerVertXWorkerThreadInUse = default(MetricCounter), MetricTimer PersistenceSelectTimeSeries = default(MetricTimer), MetricGauge JvmMemPoolsMetaspaceCommitted = default(MetricGauge), MetricMeter VertxEventbusMessagesDelivered = default(MetricMeter), MetricTimer VertxHttpClientsIamPatchRequests = default(MetricTimer), MetricMeter VertxEventbusMessagesReceivedRemote = default(MetricMeter), MetricMeter VertxHttpClientsIamResponses4xx = default(MetricMeter), MetricGauge VertxPoolsWorkerVertXWorkerThreadPoolRatio = default(MetricGauge), MetricTimer VertxHttpClientsIamTraceRequests = default(MetricTimer), MetricGauge VertxPoolsWorkerVertXWorkerThreadMaxPoolSize = default(MetricGauge), MetricTimer VertxPoolsWorkerVertXInternalBlockingUsage = default(MetricTimer), MetricTimer PersistenceSelectCheckIfExists = default(MetricTimer), MetricMeter VertxEventbusMessagesReceived = default(MetricMeter), MetricGauge JvmGcPSMarkSweepCount = default(MetricGauge), MetricGauge JvmMemPoolsPSSurvivorSpaceMax = default(MetricGauge), MetricGauge PersistentStoreDsPoolIdleConnections = default(MetricGauge), MetricTimer VertxHttpClientsIamPutRequests = default(MetricTimer))
        {
            // to ensure "VertxHttpServersDeleteRequests" is required (not null)
            if (VertxHttpServersDeleteRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersDeleteRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersDeleteRequests = VertxHttpServersDeleteRequests;
            }
            // to ensure "JvmMemPoolsPSSurvivorSpaceInit" is required (not null)
            if (JvmMemPoolsPSSurvivorSpaceInit == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSSurvivorSpaceInit is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSSurvivorSpaceInit = JvmMemPoolsPSSurvivorSpaceInit;
            }
            // to ensure "VertxPoolsWorkerVertXWorkerThreadQueueSize" is required (not null)
            if (VertxPoolsWorkerVertXWorkerThreadQueueSize == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXWorkerThreadQueueSize is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXWorkerThreadQueueSize = VertxPoolsWorkerVertXWorkerThreadQueueSize;
            }
            // to ensure "VertxHttpServersOptionsRequests" is required (not null)
            if (VertxHttpServersOptionsRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersOptionsRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersOptionsRequests = VertxHttpServersOptionsRequests;
            }
            // to ensure "JvmMemNonHeapMax" is required (not null)
            if (JvmMemNonHeapMax == null)
            {
                throw new InvalidDataException("JvmMemNonHeapMax is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemNonHeapMax = JvmMemNonHeapMax;
            }
            // to ensure "JvmMemHeapUsed" is required (not null)
            if (JvmMemHeapUsed == null)
            {
                throw new InvalidDataException("JvmMemHeapUsed is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemHeapUsed = JvmMemHeapUsed;
            }
            // to ensure "JvmMemTotalMax" is required (not null)
            if (JvmMemTotalMax == null)
            {
                throw new InvalidDataException("JvmMemTotalMax is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemTotalMax = JvmMemTotalMax;
            }
            // to ensure "PersistenceInsertAccount" is required (not null)
            if (PersistenceInsertAccount == null)
            {
                throw new InvalidDataException("PersistenceInsertAccount is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceInsertAccount = PersistenceInsertAccount;
            }
            // to ensure "VertxHttpServersBytesRead" is required (not null)
            if (VertxHttpServersBytesRead == null)
            {
                throw new InvalidDataException("VertxHttpServersBytesRead is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersBytesRead = VertxHttpServersBytesRead;
            }
            // to ensure "VertxHttpClientsIamBytesWritten" is required (not null)
            if (VertxHttpClientsIamBytesWritten == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamBytesWritten is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamBytesWritten = VertxHttpClientsIamBytesWritten;
            }
            // to ensure "VertxHttpClientsIamOptionsRequests" is required (not null)
            if (VertxHttpClientsIamOptionsRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamOptionsRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamOptionsRequests = VertxHttpClientsIamOptionsRequests;
            }
            // to ensure "VertxHttpClientsIamRequests" is required (not null)
            if (VertxHttpClientsIamRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamRequests = VertxHttpClientsIamRequests;
            }
            // to ensure "PersistentStoreDsPoolUsage" is required (not null)
            if (PersistentStoreDsPoolUsage == null)
            {
                throw new InvalidDataException("PersistentStoreDsPoolUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistentStoreDsPoolUsage = PersistentStoreDsPoolUsage;
            }
            // to ensure "VertxPoolsWorkerVertXInternalBlockingPoolRatio" is required (not null)
            if (VertxPoolsWorkerVertXInternalBlockingPoolRatio == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXInternalBlockingPoolRatio is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXInternalBlockingPoolRatio = VertxPoolsWorkerVertXInternalBlockingPoolRatio;
            }
            // to ensure "PersistenceInsertActiveDevices" is required (not null)
            if (PersistenceInsertActiveDevices == null)
            {
                throw new InvalidDataException("PersistenceInsertActiveDevices is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceInsertActiveDevices = PersistenceInsertActiveDevices;
            }
            // to ensure "JvmMemTotalInit" is required (not null)
            if (JvmMemTotalInit == null)
            {
                throw new InvalidDataException("JvmMemTotalInit is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemTotalInit = JvmMemTotalInit;
            }
            // to ensure "JvmMemPoolsPSOldGenCommitted" is required (not null)
            if (JvmMemPoolsPSOldGenCommitted == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSOldGenCommitted is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSOldGenCommitted = JvmMemPoolsPSOldGenCommitted;
            }
            // to ensure "VertxTimers" is required (not null)
            if (VertxTimers == null)
            {
                throw new InvalidDataException("VertxTimers is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxTimers = VertxTimers;
            }
            // to ensure "VertxEventbusMessagesSent" is required (not null)
            if (VertxEventbusMessagesSent == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesSent is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesSent = VertxEventbusMessagesSent;
            }
            // to ensure "PersistenceSelectServiceUpdateLog" is required (not null)
            if (PersistenceSelectServiceUpdateLog == null)
            {
                throw new InvalidDataException("PersistenceSelectServiceUpdateLog is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectServiceUpdateLog = PersistenceSelectServiceUpdateLog;
            }
            // to ensure "PersistenceSelectAccountsStatisticsWithAccounts" is required (not null)
            if (PersistenceSelectAccountsStatisticsWithAccounts == null)
            {
                throw new InvalidDataException("PersistenceSelectAccountsStatisticsWithAccounts is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectAccountsStatisticsWithAccounts = PersistenceSelectAccountsStatisticsWithAccounts;
            }
            // to ensure "HttpHandlerActivedevicesInImportsTimer" is required (not null)
            if (HttpHandlerActivedevicesInImportsTimer == null)
            {
                throw new InvalidDataException("HttpHandlerActivedevicesInImportsTimer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerActivedevicesInImportsTimer = HttpHandlerActivedevicesInImportsTimer;
            }
            // to ensure "PersistenceSelectHealthcheck" is required (not null)
            if (PersistenceSelectHealthcheck == null)
            {
                throw new InvalidDataException("PersistenceSelectHealthcheck is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectHealthcheck = PersistenceSelectHealthcheck;
            }
            // to ensure "VertxHttpClientsIamBytesRead" is required (not null)
            if (VertxHttpClientsIamBytesRead == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamBytesRead is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamBytesRead = VertxHttpClientsIamBytesRead;
            }
            // to ensure "PersistenceSelectInitialAccounts" is required (not null)
            if (PersistenceSelectInitialAccounts == null)
            {
                throw new InvalidDataException("PersistenceSelectInitialAccounts is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectInitialAccounts = PersistenceSelectInitialAccounts;
            }
            // to ensure "VertxEventbusHandlers" is required (not null)
            if (VertxEventbusHandlers == null)
            {
                throw new InvalidDataException("VertxEventbusHandlers is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusHandlers = VertxEventbusHandlers;
            }
            // to ensure "VertxHttpServersExceptions" is required (not null)
            if (VertxHttpServersExceptions == null)
            {
                throw new InvalidDataException("VertxHttpServersExceptions is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersExceptions = VertxHttpServersExceptions;
            }
            // to ensure "VertxEventbusMessagesReplyFailures" is required (not null)
            if (VertxEventbusMessagesReplyFailures == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesReplyFailures is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesReplyFailures = VertxEventbusMessagesReplyFailures;
            }
            // to ensure "VertxHttpClientsIamHeadRequests" is required (not null)
            if (VertxHttpClientsIamHeadRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamHeadRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamHeadRequests = VertxHttpClientsIamHeadRequests;
            }
            // to ensure "JvmMemPoolsPSOldGenMax" is required (not null)
            if (JvmMemPoolsPSOldGenMax == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSOldGenMax is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSOldGenMax = JvmMemPoolsPSOldGenMax;
            }
            // to ensure "PersistenceUpdateUpdateAccountUpgradeTime" is required (not null)
            if (PersistenceUpdateUpdateAccountUpgradeTime == null)
            {
                throw new InvalidDataException("PersistenceUpdateUpdateAccountUpgradeTime is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceUpdateUpdateAccountUpgradeTime = PersistenceUpdateUpdateAccountUpgradeTime;
            }
            // to ensure "JvmMemPoolsCompressedClassSpaceInit" is required (not null)
            if (JvmMemPoolsCompressedClassSpaceInit == null)
            {
                throw new InvalidDataException("JvmMemPoolsCompressedClassSpaceInit is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsCompressedClassSpaceInit = JvmMemPoolsCompressedClassSpaceInit;
            }
            // to ensure "JvmMemPoolsCodeCacheUsage" is required (not null)
            if (JvmMemPoolsCodeCacheUsage == null)
            {
                throw new InvalidDataException("JvmMemPoolsCodeCacheUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsCodeCacheUsage = JvmMemPoolsCodeCacheUsage;
            }
            // to ensure "VertxVerticles" is required (not null)
            if (VertxVerticles == null)
            {
                throw new InvalidDataException("VertxVerticles is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxVerticles = VertxVerticles;
            }
            // to ensure "VertxHttpServersResponses2xx" is required (not null)
            if (VertxHttpServersResponses2xx == null)
            {
                throw new InvalidDataException("VertxHttpServersResponses2xx is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersResponses2xx = VertxHttpServersResponses2xx;
            }
            // to ensure "PersistenceInsertImportLog" is required (not null)
            if (PersistenceInsertImportLog == null)
            {
                throw new InvalidDataException("PersistenceInsertImportLog is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceInsertImportLog = PersistenceInsertImportLog;
            }
            // to ensure "VertxHttpServersPatchRequests" is required (not null)
            if (VertxHttpServersPatchRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersPatchRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersPatchRequests = VertxHttpServersPatchRequests;
            }
            // to ensure "HttpHandlerServiceUpdateLogTimer" is required (not null)
            if (HttpHandlerServiceUpdateLogTimer == null)
            {
                throw new InvalidDataException("HttpHandlerServiceUpdateLogTimer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerServiceUpdateLogTimer = HttpHandlerServiceUpdateLogTimer;
            }
            // to ensure "JvmMemPoolsMetaspaceInit" is required (not null)
            if (JvmMemPoolsMetaspaceInit == null)
            {
                throw new InvalidDataException("JvmMemPoolsMetaspaceInit is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsMetaspaceInit = JvmMemPoolsMetaspaceInit;
            }
            // to ensure "JvmGcPSMarkSweepTime" is required (not null)
            if (JvmGcPSMarkSweepTime == null)
            {
                throw new InvalidDataException("JvmGcPSMarkSweepTime is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmGcPSMarkSweepTime = JvmGcPSMarkSweepTime;
            }
            // to ensure "HttpHandlerTimeSeriesTimer" is required (not null)
            if (HttpHandlerTimeSeriesTimer == null)
            {
                throw new InvalidDataException("HttpHandlerTimeSeriesTimer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerTimeSeriesTimer = HttpHandlerTimeSeriesTimer;
            }
            // to ensure "VertxHttpServersConnections" is required (not null)
            if (VertxHttpServersConnections == null)
            {
                throw new InvalidDataException("VertxHttpServersConnections is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersConnections = VertxHttpServersConnections;
            }
            // to ensure "VertxEventbusMessagesSentLocal" is required (not null)
            if (VertxEventbusMessagesSentLocal == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesSentLocal is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesSentLocal = VertxEventbusMessagesSentLocal;
            }
            // to ensure "VertxHttpClientsIamOtherRequests" is required (not null)
            if (VertxHttpClientsIamOtherRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamOtherRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamOtherRequests = VertxHttpClientsIamOtherRequests;
            }
            // to ensure "VertxHttpClientsIamResponses5xx" is required (not null)
            if (VertxHttpClientsIamResponses5xx == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamResponses5xx is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamResponses5xx = VertxHttpClientsIamResponses5xx;
            }
            // to ensure "JvmMemPoolsPSEdenSpaceMax" is required (not null)
            if (JvmMemPoolsPSEdenSpaceMax == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSEdenSpaceMax is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSEdenSpaceMax = JvmMemPoolsPSEdenSpaceMax;
            }
            // to ensure "VertxEventbusMessagesDeliveredRemote" is required (not null)
            if (VertxEventbusMessagesDeliveredRemote == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesDeliveredRemote is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesDeliveredRemote = VertxEventbusMessagesDeliveredRemote;
            }
            // to ensure "VertxHttpClientsIamConnectionsPoolRatio" is required (not null)
            if (VertxHttpClientsIamConnectionsPoolRatio == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamConnectionsPoolRatio is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamConnectionsPoolRatio = VertxHttpClientsIamConnectionsPoolRatio;
            }
            // to ensure "PersistentStoreDsPoolConnectionTimeoutRate" is required (not null)
            if (PersistentStoreDsPoolConnectionTimeoutRate == null)
            {
                throw new InvalidDataException("PersistentStoreDsPoolConnectionTimeoutRate is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistentStoreDsPoolConnectionTimeoutRate = PersistentStoreDsPoolConnectionTimeoutRate;
            }
            // to ensure "JvmMemPoolsPSSurvivorSpaceUsage" is required (not null)
            if (JvmMemPoolsPSSurvivorSpaceUsage == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSSurvivorSpaceUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSSurvivorSpaceUsage = JvmMemPoolsPSSurvivorSpaceUsage;
            }
            // to ensure "JvmMemTotalCommitted" is required (not null)
            if (JvmMemTotalCommitted == null)
            {
                throw new InvalidDataException("JvmMemTotalCommitted is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemTotalCommitted = JvmMemTotalCommitted;
            }
            // to ensure "JvmMemNonHeapUsed" is required (not null)
            if (JvmMemNonHeapUsed == null)
            {
                throw new InvalidDataException("JvmMemNonHeapUsed is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemNonHeapUsed = JvmMemNonHeapUsed;
            }
            // to ensure "PersistentStoreDsPoolWait" is required (not null)
            if (PersistentStoreDsPoolWait == null)
            {
                throw new InvalidDataException("PersistentStoreDsPoolWait is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistentStoreDsPoolWait = PersistentStoreDsPoolWait;
            }
            // to ensure "VertxWorkerPoolSize" is required (not null)
            if (VertxWorkerPoolSize == null)
            {
                throw new InvalidDataException("VertxWorkerPoolSize is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxWorkerPoolSize = VertxWorkerPoolSize;
            }
            // to ensure "VertxPoolsWorkerVertXInternalBlockingInUse" is required (not null)
            if (VertxPoolsWorkerVertXInternalBlockingInUse == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXInternalBlockingInUse is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXInternalBlockingInUse = VertxPoolsWorkerVertXInternalBlockingInUse;
            }
            // to ensure "VertxEventbusMessagesPublished" is required (not null)
            if (VertxEventbusMessagesPublished == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesPublished is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesPublished = VertxEventbusMessagesPublished;
            }
            // to ensure "VertxHttpServersGetRequests" is required (not null)
            if (VertxHttpServersGetRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersGetRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersGetRequests = VertxHttpServersGetRequests;
            }
            // to ensure "VertxHttpClientsIamOpenNetsockets" is required (not null)
            if (VertxHttpClientsIamOpenNetsockets == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamOpenNetsockets is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamOpenNetsockets = VertxHttpClientsIamOpenNetsockets;
            }
            // to ensure "JvmMemNonHeapInit" is required (not null)
            if (JvmMemNonHeapInit == null)
            {
                throw new InvalidDataException("JvmMemNonHeapInit is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemNonHeapInit = JvmMemNonHeapInit;
            }
            // to ensure "VertxHttpClientsIamDeleteRequests" is required (not null)
            if (VertxHttpClientsIamDeleteRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamDeleteRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamDeleteRequests = VertxHttpClientsIamDeleteRequests;
            }
            // to ensure "JvmMemPoolsPSEdenSpaceUsed" is required (not null)
            if (JvmMemPoolsPSEdenSpaceUsed == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSEdenSpaceUsed is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSEdenSpaceUsed = JvmMemPoolsPSEdenSpaceUsed;
            }
            // to ensure "HttpHandlerMetricsHandlerTimer" is required (not null)
            if (HttpHandlerMetricsHandlerTimer == null)
            {
                throw new InvalidDataException("HttpHandlerMetricsHandlerTimer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerMetricsHandlerTimer = HttpHandlerMetricsHandlerTimer;
            }
            // to ensure "PersistenceSelectImportLogActiveDevices" is required (not null)
            if (PersistenceSelectImportLogActiveDevices == null)
            {
                throw new InvalidDataException("PersistenceSelectImportLogActiveDevices is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectImportLogActiveDevices = PersistenceSelectImportLogActiveDevices;
            }
            // to ensure "HttpHandlerActivedevicesTimer" is required (not null)
            if (HttpHandlerActivedevicesTimer == null)
            {
                throw new InvalidDataException("HttpHandlerActivedevicesTimer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerActivedevicesTimer = HttpHandlerActivedevicesTimer;
            }
            // to ensure "VertxHttpClientsIamOpenConnections" is required (not null)
            if (VertxHttpClientsIamOpenConnections == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamOpenConnections is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamOpenConnections = VertxHttpClientsIamOpenConnections;
            }
            // to ensure "JvmMemPoolsPSSurvivorSpaceUsed" is required (not null)
            if (JvmMemPoolsPSSurvivorSpaceUsed == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSSurvivorSpaceUsed is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSSurvivorSpaceUsed = JvmMemPoolsPSSurvivorSpaceUsed;
            }
            // to ensure "VertxHttpClientsIamResponses1xx" is required (not null)
            if (VertxHttpClientsIamResponses1xx == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamResponses1xx is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamResponses1xx = VertxHttpClientsIamResponses1xx;
            }
            // to ensure "PersistenceInsertDlq" is required (not null)
            if (PersistenceInsertDlq == null)
            {
                throw new InvalidDataException("PersistenceInsertDlq is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceInsertDlq = PersistenceInsertDlq;
            }
            // to ensure "VertxEventbusMessagesPublishedRemote" is required (not null)
            if (VertxEventbusMessagesPublishedRemote == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesPublishedRemote is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesPublishedRemote = VertxEventbusMessagesPublishedRemote;
            }
            // to ensure "JvmMemPoolsPSOldGenInit" is required (not null)
            if (JvmMemPoolsPSOldGenInit == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSOldGenInit is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSOldGenInit = JvmMemPoolsPSOldGenInit;
            }
            // to ensure "VertxHttpClientsIamConnections" is required (not null)
            if (VertxHttpClientsIamConnections == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamConnections is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamConnections = VertxHttpClientsIamConnections;
            }
            // to ensure "VertxEventbusMessagesPending" is required (not null)
            if (VertxEventbusMessagesPending == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesPending is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesPending = VertxEventbusMessagesPending;
            }
            // to ensure "VertxHttpServersConnectRequests" is required (not null)
            if (VertxHttpServersConnectRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersConnectRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersConnectRequests = VertxHttpServersConnectRequests;
            }
            // to ensure "VertxPoolsWorkerVertXInternalBlockingQueueSize" is required (not null)
            if (VertxPoolsWorkerVertXInternalBlockingQueueSize == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXInternalBlockingQueueSize is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXInternalBlockingQueueSize = VertxPoolsWorkerVertXInternalBlockingQueueSize;
            }
            // to ensure "HttpHandlerBuildInfoTimer" is required (not null)
            if (HttpHandlerBuildInfoTimer == null)
            {
                throw new InvalidDataException("HttpHandlerBuildInfoTimer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerBuildInfoTimer = HttpHandlerBuildInfoTimer;
            }
            // to ensure "JvmMemPoolsPSEdenSpaceUsage" is required (not null)
            if (JvmMemPoolsPSEdenSpaceUsage == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSEdenSpaceUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSEdenSpaceUsage = JvmMemPoolsPSEdenSpaceUsage;
            }
            // to ensure "VertxEventbusMessagesPublishedLocal" is required (not null)
            if (VertxEventbusMessagesPublishedLocal == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesPublishedLocal is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesPublishedLocal = VertxEventbusMessagesPublishedLocal;
            }
            // to ensure "PersistenceSelectAccountsStatisticsAll" is required (not null)
            if (PersistenceSelectAccountsStatisticsAll == null)
            {
                throw new InvalidDataException("PersistenceSelectAccountsStatisticsAll is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectAccountsStatisticsAll = PersistenceSelectAccountsStatisticsAll;
            }
            // to ensure "PersistenceSelectAccountsStatisticsWithAccount" is required (not null)
            if (PersistenceSelectAccountsStatisticsWithAccount == null)
            {
                throw new InvalidDataException("PersistenceSelectAccountsStatisticsWithAccount is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectAccountsStatisticsWithAccount = PersistenceSelectAccountsStatisticsWithAccount;
            }
            // to ensure "JvmGcPSScavengeTime" is required (not null)
            if (JvmGcPSScavengeTime == null)
            {
                throw new InvalidDataException("JvmGcPSScavengeTime is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmGcPSScavengeTime = JvmGcPSScavengeTime;
            }
            // to ensure "VertxHttpClientsIamExceptions" is required (not null)
            if (VertxHttpClientsIamExceptions == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamExceptions is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamExceptions = VertxHttpClientsIamExceptions;
            }
            // to ensure "JvmMemPoolsPSOldGenUsage" is required (not null)
            if (JvmMemPoolsPSOldGenUsage == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSOldGenUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSOldGenUsage = JvmMemPoolsPSOldGenUsage;
            }
            // to ensure "VertxHttpServersPostRequests" is required (not null)
            if (VertxHttpServersPostRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersPostRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersPostRequests = VertxHttpServersPostRequests;
            }
            // to ensure "JvmMemPoolsPSOldGenUsedAfterGc" is required (not null)
            if (JvmMemPoolsPSOldGenUsedAfterGc == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSOldGenUsedAfterGc is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSOldGenUsedAfterGc = JvmMemPoolsPSOldGenUsedAfterGc;
            }
            // to ensure "VertxEventbusMessagesSentRemote" is required (not null)
            if (VertxEventbusMessagesSentRemote == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesSentRemote is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesSentRemote = VertxEventbusMessagesSentRemote;
            }
            // to ensure "PersistenceSelectAccounts" is required (not null)
            if (PersistenceSelectAccounts == null)
            {
                throw new InvalidDataException("PersistenceSelectAccounts is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectAccounts = PersistenceSelectAccounts;
            }
            // to ensure "VertxEventbusMessagesPendingRemote" is required (not null)
            if (VertxEventbusMessagesPendingRemote == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesPendingRemote is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesPendingRemote = VertxEventbusMessagesPendingRemote;
            }
            // to ensure "VertxEventbusMessagesReceivedLocal" is required (not null)
            if (VertxEventbusMessagesReceivedLocal == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesReceivedLocal is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesReceivedLocal = VertxEventbusMessagesReceivedLocal;
            }
            // to ensure "JvmMemPoolsCodeCacheMax" is required (not null)
            if (JvmMemPoolsCodeCacheMax == null)
            {
                throw new InvalidDataException("JvmMemPoolsCodeCacheMax is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsCodeCacheMax = JvmMemPoolsCodeCacheMax;
            }
            // to ensure "VertxPoolsWorkerVertXInternalBlockingMaxPoolSize" is required (not null)
            if (VertxPoolsWorkerVertXInternalBlockingMaxPoolSize == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXInternalBlockingMaxPoolSize is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXInternalBlockingMaxPoolSize = VertxPoolsWorkerVertXInternalBlockingMaxPoolSize;
            }
            // to ensure "PersistenceOperationStore" is required (not null)
            if (PersistenceOperationStore == null)
            {
                throw new InvalidDataException("PersistenceOperationStore is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceOperationStore = PersistenceOperationStore;
            }
            // to ensure "HttpHandlerHealthCheckTimer" is required (not null)
            if (HttpHandlerHealthCheckTimer == null)
            {
                throw new InvalidDataException("HttpHandlerHealthCheckTimer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerHealthCheckTimer = HttpHandlerHealthCheckTimer;
            }
            // to ensure "VertxHttpClientsIamConnectRequests" is required (not null)
            if (VertxHttpClientsIamConnectRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamConnectRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamConnectRequests = VertxHttpClientsIamConnectRequests;
            }
            // to ensure "VertxHttpServersTraceRequests" is required (not null)
            if (VertxHttpServersTraceRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersTraceRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersTraceRequests = VertxHttpServersTraceRequests;
            }
            // to ensure "JvmMemNonHeapUsage" is required (not null)
            if (JvmMemNonHeapUsage == null)
            {
                throw new InvalidDataException("JvmMemNonHeapUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemNonHeapUsage = JvmMemNonHeapUsage;
            }
            // to ensure "VertxHttpServersPutRequests" is required (not null)
            if (VertxHttpServersPutRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersPutRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersPutRequests = VertxHttpServersPutRequests;
            }
            // to ensure "JvmMemTotalUsed" is required (not null)
            if (JvmMemTotalUsed == null)
            {
                throw new InvalidDataException("JvmMemTotalUsed is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemTotalUsed = JvmMemTotalUsed;
            }
            // to ensure "JvmMemPoolsCodeCacheCommitted" is required (not null)
            if (JvmMemPoolsCodeCacheCommitted == null)
            {
                throw new InvalidDataException("JvmMemPoolsCodeCacheCommitted is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsCodeCacheCommitted = JvmMemPoolsCodeCacheCommitted;
            }
            // to ensure "HttpHandlerAccountStatsWithoutAccount" is required (not null)
            if (HttpHandlerAccountStatsWithoutAccount == null)
            {
                throw new InvalidDataException("HttpHandlerAccountStatsWithoutAccount is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerAccountStatsWithoutAccount = HttpHandlerAccountStatsWithoutAccount;
            }
            // to ensure "VertxEventbusMessagesDeliveredLocal" is required (not null)
            if (VertxEventbusMessagesDeliveredLocal == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesDeliveredLocal is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesDeliveredLocal = VertxEventbusMessagesDeliveredLocal;
            }
            // to ensure "JvmMemPoolsPSEdenSpaceUsedAfterGc" is required (not null)
            if (JvmMemPoolsPSEdenSpaceUsedAfterGc == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSEdenSpaceUsedAfterGc is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSEdenSpaceUsedAfterGc = JvmMemPoolsPSEdenSpaceUsedAfterGc;
            }
            // to ensure "JvmMemPoolsCompressedClassSpaceUsed" is required (not null)
            if (JvmMemPoolsCompressedClassSpaceUsed == null)
            {
                throw new InvalidDataException("JvmMemPoolsCompressedClassSpaceUsed is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsCompressedClassSpaceUsed = JvmMemPoolsCompressedClassSpaceUsed;
            }
            // to ensure "VertxPoolsWorkerVertXWorkerThreadQueueDelay" is required (not null)
            if (VertxPoolsWorkerVertXWorkerThreadQueueDelay == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXWorkerThreadQueueDelay is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXWorkerThreadQueueDelay = VertxPoolsWorkerVertXWorkerThreadQueueDelay;
            }
            // to ensure "VertxPoolsWorkerVertXInternalBlockingQueueDelay" is required (not null)
            if (VertxPoolsWorkerVertXInternalBlockingQueueDelay == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXInternalBlockingQueueDelay is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXInternalBlockingQueueDelay = VertxPoolsWorkerVertXInternalBlockingQueueDelay;
            }
            // to ensure "HttpHandlerAccountStatsWithAccount" is required (not null)
            if (HttpHandlerAccountStatsWithAccount == null)
            {
                throw new InvalidDataException("HttpHandlerAccountStatsWithAccount is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerAccountStatsWithAccount = HttpHandlerAccountStatsWithAccount;
            }
            // to ensure "JvmMemPoolsCompressedClassSpaceMax" is required (not null)
            if (JvmMemPoolsCompressedClassSpaceMax == null)
            {
                throw new InvalidDataException("JvmMemPoolsCompressedClassSpaceMax is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsCompressedClassSpaceMax = JvmMemPoolsCompressedClassSpaceMax;
            }
            // to ensure "HttpHandlerAccountListTimer" is required (not null)
            if (HttpHandlerAccountListTimer == null)
            {
                throw new InvalidDataException("HttpHandlerAccountListTimer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerAccountListTimer = HttpHandlerAccountListTimer;
            }
            // to ensure "PersistentStoreDsPoolTotalConnections" is required (not null)
            if (PersistentStoreDsPoolTotalConnections == null)
            {
                throw new InvalidDataException("PersistentStoreDsPoolTotalConnections is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistentStoreDsPoolTotalConnections = PersistentStoreDsPoolTotalConnections;
            }
            // to ensure "JvmMemPoolsPSSurvivorSpaceCommitted" is required (not null)
            if (JvmMemPoolsPSSurvivorSpaceCommitted == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSSurvivorSpaceCommitted is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSSurvivorSpaceCommitted = JvmMemPoolsPSSurvivorSpaceCommitted;
            }
            // to ensure "VertxHttpServersResponses5xx" is required (not null)
            if (VertxHttpServersResponses5xx == null)
            {
                throw new InvalidDataException("VertxHttpServersResponses5xx is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersResponses5xx = VertxHttpServersResponses5xx;
            }
            // to ensure "JvmMemPoolsCodeCacheInit" is required (not null)
            if (JvmMemPoolsCodeCacheInit == null)
            {
                throw new InvalidDataException("JvmMemPoolsCodeCacheInit is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsCodeCacheInit = JvmMemPoolsCodeCacheInit;
            }
            // to ensure "HttpHandlerReportJson" is required (not null)
            if (HttpHandlerReportJson == null)
            {
                throw new InvalidDataException("HttpHandlerReportJson is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerReportJson = HttpHandlerReportJson;
            }
            // to ensure "VertxHttpServersResponses4xx" is required (not null)
            if (VertxHttpServersResponses4xx == null)
            {
                throw new InvalidDataException("VertxHttpServersResponses4xx is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersResponses4xx = VertxHttpServersResponses4xx;
            }
            // to ensure "VertxPoolsWorkerVertXWorkerThreadUsage" is required (not null)
            if (VertxPoolsWorkerVertXWorkerThreadUsage == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXWorkerThreadUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXWorkerThreadUsage = VertxPoolsWorkerVertXWorkerThreadUsage;
            }
            // to ensure "JvmMemHeapInit" is required (not null)
            if (JvmMemHeapInit == null)
            {
                throw new InvalidDataException("JvmMemHeapInit is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemHeapInit = JvmMemHeapInit;
            }
            // to ensure "JvmMemHeapMax" is required (not null)
            if (JvmMemHeapMax == null)
            {
                throw new InvalidDataException("JvmMemHeapMax is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemHeapMax = JvmMemHeapMax;
            }
            // to ensure "VertxHttpServersResponses1xx" is required (not null)
            if (VertxHttpServersResponses1xx == null)
            {
                throw new InvalidDataException("VertxHttpServersResponses1xx is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersResponses1xx = VertxHttpServersResponses1xx;
            }
            // to ensure "VertxHttpClientsIamPostRequests" is required (not null)
            if (VertxHttpClientsIamPostRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamPostRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamPostRequests = VertxHttpClientsIamPostRequests;
            }
            // to ensure "VertxHttpServersOpenWebsockets" is required (not null)
            if (VertxHttpServersOpenWebsockets == null)
            {
                throw new InvalidDataException("VertxHttpServersOpenWebsockets is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersOpenWebsockets = VertxHttpServersOpenWebsockets;
            }
            // to ensure "VertxHttpServersOtherRequests" is required (not null)
            if (VertxHttpServersOtherRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersOtherRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersOtherRequests = VertxHttpServersOtherRequests;
            }
            // to ensure "HttpHandlerReportActivedevicesTimer" is required (not null)
            if (HttpHandlerReportActivedevicesTimer == null)
            {
                throw new InvalidDataException("HttpHandlerReportActivedevicesTimer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerReportActivedevicesTimer = HttpHandlerReportActivedevicesTimer;
            }
            // to ensure "JvmMemHeapUsage" is required (not null)
            if (JvmMemHeapUsage == null)
            {
                throw new InvalidDataException("JvmMemHeapUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemHeapUsage = JvmMemHeapUsage;
            }
            // to ensure "JvmMemNonHeapCommitted" is required (not null)
            if (JvmMemNonHeapCommitted == null)
            {
                throw new InvalidDataException("JvmMemNonHeapCommitted is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemNonHeapCommitted = JvmMemNonHeapCommitted;
            }
            // to ensure "JvmMemPoolsCompressedClassSpaceUsage" is required (not null)
            if (JvmMemPoolsCompressedClassSpaceUsage == null)
            {
                throw new InvalidDataException("JvmMemPoolsCompressedClassSpaceUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsCompressedClassSpaceUsage = JvmMemPoolsCompressedClassSpaceUsage;
            }
            // to ensure "PersistentStoreDsPoolConnectionCreation" is required (not null)
            if (PersistentStoreDsPoolConnectionCreation == null)
            {
                throw new InvalidDataException("PersistentStoreDsPoolConnectionCreation is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistentStoreDsPoolConnectionCreation = PersistentStoreDsPoolConnectionCreation;
            }
            // to ensure "VertxHttpClientsIamOpenWebsockets" is required (not null)
            if (VertxHttpClientsIamOpenWebsockets == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamOpenWebsockets is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamOpenWebsockets = VertxHttpClientsIamOpenWebsockets;
            }
            // to ensure "PersistenceSelectImportLog" is required (not null)
            if (PersistenceSelectImportLog == null)
            {
                throw new InvalidDataException("PersistenceSelectImportLog is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectImportLog = PersistenceSelectImportLog;
            }
            // to ensure "PersistenceSelectAccountsStatisticsWithAccountsAndStarttime" is required (not null)
            if (PersistenceSelectAccountsStatisticsWithAccountsAndStarttime == null)
            {
                throw new InvalidDataException("PersistenceSelectAccountsStatisticsWithAccountsAndStarttime is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectAccountsStatisticsWithAccountsAndStarttime = PersistenceSelectAccountsStatisticsWithAccountsAndStarttime;
            }
            // to ensure "PersistenceOperationDlq" is required (not null)
            if (PersistenceOperationDlq == null)
            {
                throw new InvalidDataException("PersistenceOperationDlq is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceOperationDlq = PersistenceOperationDlq;
            }
            // to ensure "JvmGcPSScavengeCount" is required (not null)
            if (JvmGcPSScavengeCount == null)
            {
                throw new InvalidDataException("JvmGcPSScavengeCount is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmGcPSScavengeCount = JvmGcPSScavengeCount;
            }
            // to ensure "VertxHttpClientsIamConnectionsMaxPoolSize" is required (not null)
            if (VertxHttpClientsIamConnectionsMaxPoolSize == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamConnectionsMaxPoolSize is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamConnectionsMaxPoolSize = VertxHttpClientsIamConnectionsMaxPoolSize;
            }
            // to ensure "VertxEventbusMessagesBytesWritten" is required (not null)
            if (VertxEventbusMessagesBytesWritten == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesBytesWritten is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesBytesWritten = VertxEventbusMessagesBytesWritten;
            }
            // to ensure "JvmMemPoolsCompressedClassSpaceCommitted" is required (not null)
            if (JvmMemPoolsCompressedClassSpaceCommitted == null)
            {
                throw new InvalidDataException("JvmMemPoolsCompressedClassSpaceCommitted is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsCompressedClassSpaceCommitted = JvmMemPoolsCompressedClassSpaceCommitted;
            }
            // to ensure "VertxVerticlesComMbedBillingServerApiserverHttpHttpServer" is required (not null)
            if (VertxVerticlesComMbedBillingServerApiserverHttpHttpServer == null)
            {
                throw new InvalidDataException("VertxVerticlesComMbedBillingServerApiserverHttpHttpServer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxVerticlesComMbedBillingServerApiserverHttpHttpServer = VertxVerticlesComMbedBillingServerApiserverHttpHttpServer;
            }
            // to ensure "JvmMemPoolsCodeCacheUsed" is required (not null)
            if (JvmMemPoolsCodeCacheUsed == null)
            {
                throw new InvalidDataException("JvmMemPoolsCodeCacheUsed is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsCodeCacheUsed = JvmMemPoolsCodeCacheUsed;
            }
            // to ensure "HttpHandlerImportLogTimer" is required (not null)
            if (HttpHandlerImportLogTimer == null)
            {
                throw new InvalidDataException("HttpHandlerImportLogTimer is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerImportLogTimer = HttpHandlerImportLogTimer;
            }
            // to ensure "VertxEventbusMessagesPendingLocal" is required (not null)
            if (VertxEventbusMessagesPendingLocal == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesPendingLocal is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesPendingLocal = VertxEventbusMessagesPendingLocal;
            }
            // to ensure "VertxHttpServersBytesWritten" is required (not null)
            if (VertxHttpServersBytesWritten == null)
            {
                throw new InvalidDataException("VertxHttpServersBytesWritten is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersBytesWritten = VertxHttpServersBytesWritten;
            }
            // to ensure "VertxEventbusMessagesBytesRead" is required (not null)
            if (VertxEventbusMessagesBytesRead == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesBytesRead is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesBytesRead = VertxEventbusMessagesBytesRead;
            }
            // to ensure "VertxHttpServersHeadRequests" is required (not null)
            if (VertxHttpServersHeadRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersHeadRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersHeadRequests = VertxHttpServersHeadRequests;
            }
            // to ensure "JvmMemPoolsPSSurvivorSpaceUsedAfterGc" is required (not null)
            if (JvmMemPoolsPSSurvivorSpaceUsedAfterGc == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSSurvivorSpaceUsedAfterGc is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSSurvivorSpaceUsedAfterGc = JvmMemPoolsPSSurvivorSpaceUsedAfterGc;
            }
            // to ensure "PersistentStoreDsPoolActiveConnections" is required (not null)
            if (PersistentStoreDsPoolActiveConnections == null)
            {
                throw new InvalidDataException("PersistentStoreDsPoolActiveConnections is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistentStoreDsPoolActiveConnections = PersistentStoreDsPoolActiveConnections;
            }
            // to ensure "PersistenceConnectionConnect" is required (not null)
            if (PersistenceConnectionConnect == null)
            {
                throw new InvalidDataException("PersistenceConnectionConnect is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceConnectionConnect = PersistenceConnectionConnect;
            }
            // to ensure "JvmMemPoolsPSEdenSpaceInit" is required (not null)
            if (JvmMemPoolsPSEdenSpaceInit == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSEdenSpaceInit is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSEdenSpaceInit = JvmMemPoolsPSEdenSpaceInit;
            }
            // to ensure "VertxHttpClientsIamResponses2xx" is required (not null)
            if (VertxHttpClientsIamResponses2xx == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamResponses2xx is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamResponses2xx = VertxHttpClientsIamResponses2xx;
            }
            // to ensure "PersistenceInsertAccountStatistics" is required (not null)
            if (PersistenceInsertAccountStatistics == null)
            {
                throw new InvalidDataException("PersistenceInsertAccountStatistics is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceInsertAccountStatistics = PersistenceInsertAccountStatistics;
            }
            // to ensure "JvmMemPoolsMetaspaceUsed" is required (not null)
            if (JvmMemPoolsMetaspaceUsed == null)
            {
                throw new InvalidDataException("JvmMemPoolsMetaspaceUsed is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsMetaspaceUsed = JvmMemPoolsMetaspaceUsed;
            }
            // to ensure "JvmMemPoolsMetaspaceMax" is required (not null)
            if (JvmMemPoolsMetaspaceMax == null)
            {
                throw new InvalidDataException("JvmMemPoolsMetaspaceMax is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsMetaspaceMax = JvmMemPoolsMetaspaceMax;
            }
            // to ensure "HttpHandlerReportZip" is required (not null)
            if (HttpHandlerReportZip == null)
            {
                throw new InvalidDataException("HttpHandlerReportZip is a required property for Metrics and cannot be null");
            }
            else
            {
                this.HttpHandlerReportZip = HttpHandlerReportZip;
            }
            // to ensure "VertxEventLoopSize" is required (not null)
            if (VertxEventLoopSize == null)
            {
                throw new InvalidDataException("VertxEventLoopSize is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventLoopSize = VertxEventLoopSize;
            }
            // to ensure "VertxHttpServersOpenConnections" is required (not null)
            if (VertxHttpServersOpenConnections == null)
            {
                throw new InvalidDataException("VertxHttpServersOpenConnections is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersOpenConnections = VertxHttpServersOpenConnections;
            }
            // to ensure "VertxHttpClientsIamResponses3xx" is required (not null)
            if (VertxHttpClientsIamResponses3xx == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamResponses3xx is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamResponses3xx = VertxHttpClientsIamResponses3xx;
            }
            // to ensure "JvmMemPoolsPSEdenSpaceCommitted" is required (not null)
            if (JvmMemPoolsPSEdenSpaceCommitted == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSEdenSpaceCommitted is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSEdenSpaceCommitted = JvmMemPoolsPSEdenSpaceCommitted;
            }
            // to ensure "VertxHttpServersResponses3xx" is required (not null)
            if (VertxHttpServersResponses3xx == null)
            {
                throw new InvalidDataException("VertxHttpServersResponses3xx is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersResponses3xx = VertxHttpServersResponses3xx;
            }
            // to ensure "VertxHttpClientsIamGetRequests" is required (not null)
            if (VertxHttpClientsIamGetRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamGetRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamGetRequests = VertxHttpClientsIamGetRequests;
            }
            // to ensure "JvmMemHeapCommitted" is required (not null)
            if (JvmMemHeapCommitted == null)
            {
                throw new InvalidDataException("JvmMemHeapCommitted is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemHeapCommitted = JvmMemHeapCommitted;
            }
            // to ensure "VertxHttpServersOpenNetsockets" is required (not null)
            if (VertxHttpServersOpenNetsockets == null)
            {
                throw new InvalidDataException("VertxHttpServersOpenNetsockets is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersOpenNetsockets = VertxHttpServersOpenNetsockets;
            }
            // to ensure "VertxHttpServersRequests" is required (not null)
            if (VertxHttpServersRequests == null)
            {
                throw new InvalidDataException("VertxHttpServersRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpServersRequests = VertxHttpServersRequests;
            }
            // to ensure "PersistentStoreDsPoolPendingConnections" is required (not null)
            if (PersistentStoreDsPoolPendingConnections == null)
            {
                throw new InvalidDataException("PersistentStoreDsPoolPendingConnections is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistentStoreDsPoolPendingConnections = PersistentStoreDsPoolPendingConnections;
            }
            // to ensure "JvmMemPoolsPSOldGenUsed" is required (not null)
            if (JvmMemPoolsPSOldGenUsed == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSOldGenUsed is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSOldGenUsed = JvmMemPoolsPSOldGenUsed;
            }
            // to ensure "JvmMemPoolsMetaspaceUsage" is required (not null)
            if (JvmMemPoolsMetaspaceUsage == null)
            {
                throw new InvalidDataException("JvmMemPoolsMetaspaceUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsMetaspaceUsage = JvmMemPoolsMetaspaceUsage;
            }
            // to ensure "VertxPoolsWorkerVertXWorkerThreadInUse" is required (not null)
            if (VertxPoolsWorkerVertXWorkerThreadInUse == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXWorkerThreadInUse is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXWorkerThreadInUse = VertxPoolsWorkerVertXWorkerThreadInUse;
            }
            // to ensure "PersistenceSelectTimeSeries" is required (not null)
            if (PersistenceSelectTimeSeries == null)
            {
                throw new InvalidDataException("PersistenceSelectTimeSeries is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectTimeSeries = PersistenceSelectTimeSeries;
            }
            // to ensure "JvmMemPoolsMetaspaceCommitted" is required (not null)
            if (JvmMemPoolsMetaspaceCommitted == null)
            {
                throw new InvalidDataException("JvmMemPoolsMetaspaceCommitted is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsMetaspaceCommitted = JvmMemPoolsMetaspaceCommitted;
            }
            // to ensure "VertxEventbusMessagesDelivered" is required (not null)
            if (VertxEventbusMessagesDelivered == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesDelivered is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesDelivered = VertxEventbusMessagesDelivered;
            }
            // to ensure "VertxHttpClientsIamPatchRequests" is required (not null)
            if (VertxHttpClientsIamPatchRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamPatchRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamPatchRequests = VertxHttpClientsIamPatchRequests;
            }
            // to ensure "VertxEventbusMessagesReceivedRemote" is required (not null)
            if (VertxEventbusMessagesReceivedRemote == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesReceivedRemote is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesReceivedRemote = VertxEventbusMessagesReceivedRemote;
            }
            // to ensure "VertxHttpClientsIamResponses4xx" is required (not null)
            if (VertxHttpClientsIamResponses4xx == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamResponses4xx is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamResponses4xx = VertxHttpClientsIamResponses4xx;
            }
            // to ensure "VertxPoolsWorkerVertXWorkerThreadPoolRatio" is required (not null)
            if (VertxPoolsWorkerVertXWorkerThreadPoolRatio == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXWorkerThreadPoolRatio is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXWorkerThreadPoolRatio = VertxPoolsWorkerVertXWorkerThreadPoolRatio;
            }
            // to ensure "VertxHttpClientsIamTraceRequests" is required (not null)
            if (VertxHttpClientsIamTraceRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamTraceRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamTraceRequests = VertxHttpClientsIamTraceRequests;
            }
            // to ensure "VertxPoolsWorkerVertXWorkerThreadMaxPoolSize" is required (not null)
            if (VertxPoolsWorkerVertXWorkerThreadMaxPoolSize == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXWorkerThreadMaxPoolSize is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXWorkerThreadMaxPoolSize = VertxPoolsWorkerVertXWorkerThreadMaxPoolSize;
            }
            // to ensure "VertxPoolsWorkerVertXInternalBlockingUsage" is required (not null)
            if (VertxPoolsWorkerVertXInternalBlockingUsage == null)
            {
                throw new InvalidDataException("VertxPoolsWorkerVertXInternalBlockingUsage is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxPoolsWorkerVertXInternalBlockingUsage = VertxPoolsWorkerVertXInternalBlockingUsage;
            }
            // to ensure "PersistenceSelectCheckIfExists" is required (not null)
            if (PersistenceSelectCheckIfExists == null)
            {
                throw new InvalidDataException("PersistenceSelectCheckIfExists is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistenceSelectCheckIfExists = PersistenceSelectCheckIfExists;
            }
            // to ensure "VertxEventbusMessagesReceived" is required (not null)
            if (VertxEventbusMessagesReceived == null)
            {
                throw new InvalidDataException("VertxEventbusMessagesReceived is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxEventbusMessagesReceived = VertxEventbusMessagesReceived;
            }
            // to ensure "JvmGcPSMarkSweepCount" is required (not null)
            if (JvmGcPSMarkSweepCount == null)
            {
                throw new InvalidDataException("JvmGcPSMarkSweepCount is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmGcPSMarkSweepCount = JvmGcPSMarkSweepCount;
            }
            // to ensure "JvmMemPoolsPSSurvivorSpaceMax" is required (not null)
            if (JvmMemPoolsPSSurvivorSpaceMax == null)
            {
                throw new InvalidDataException("JvmMemPoolsPSSurvivorSpaceMax is a required property for Metrics and cannot be null");
            }
            else
            {
                this.JvmMemPoolsPSSurvivorSpaceMax = JvmMemPoolsPSSurvivorSpaceMax;
            }
            // to ensure "PersistentStoreDsPoolIdleConnections" is required (not null)
            if (PersistentStoreDsPoolIdleConnections == null)
            {
                throw new InvalidDataException("PersistentStoreDsPoolIdleConnections is a required property for Metrics and cannot be null");
            }
            else
            {
                this.PersistentStoreDsPoolIdleConnections = PersistentStoreDsPoolIdleConnections;
            }
            // to ensure "VertxHttpClientsIamPutRequests" is required (not null)
            if (VertxHttpClientsIamPutRequests == null)
            {
                throw new InvalidDataException("VertxHttpClientsIamPutRequests is a required property for Metrics and cannot be null");
            }
            else
            {
                this.VertxHttpClientsIamPutRequests = VertxHttpClientsIamPutRequests;
            }
        }
        
        /// <summary>
        /// Gets or Sets VertxHttpServersDeleteRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.delete-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersDeleteRequests { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSSurvivorSpaceInit
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Survivor-Space.init", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSSurvivorSpaceInit { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXWorkerThreadQueueSize
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-worker-thread.queue-size", EmitDefaultValue=false)]
        public MetricCounter VertxPoolsWorkerVertXWorkerThreadQueueSize { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersOptionsRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.options-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersOptionsRequests { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemNonHeapMax
        /// </summary>
        [DataMember(Name="jvm.mem.non-heap.max", EmitDefaultValue=false)]
        public MetricGauge JvmMemNonHeapMax { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemHeapUsed
        /// </summary>
        [DataMember(Name="jvm.mem.heap.used", EmitDefaultValue=false)]
        public MetricGauge JvmMemHeapUsed { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemTotalMax
        /// </summary>
        [DataMember(Name="jvm.mem.total.max", EmitDefaultValue=false)]
        public MetricGauge JvmMemTotalMax { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceInsertAccount
        /// </summary>
        [DataMember(Name="persistence.insert.account", EmitDefaultValue=false)]
        public MetricTimer PersistenceInsertAccount { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersBytesRead
        /// </summary>
        [DataMember(Name="vertx.http.servers.bytes-read", EmitDefaultValue=false)]
        public MetricHistogram VertxHttpServersBytesRead { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamBytesWritten
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.bytes-written", EmitDefaultValue=false)]
        public MetricHistogram VertxHttpClientsIamBytesWritten { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamOptionsRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.options-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamOptionsRequests { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamRequests { get; set; }
        /// <summary>
        /// Gets or Sets PersistentStoreDsPoolUsage
        /// </summary>
        [DataMember(Name="persistent-store-ds.pool.Usage", EmitDefaultValue=false)]
        public MetricHistogram PersistentStoreDsPoolUsage { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXInternalBlockingPoolRatio
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-internal-blocking.pool-ratio", EmitDefaultValue=false)]
        public MetricGauge VertxPoolsWorkerVertXInternalBlockingPoolRatio { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceInsertActiveDevices
        /// </summary>
        [DataMember(Name="persistence.insert.active-devices", EmitDefaultValue=false)]
        public MetricTimer PersistenceInsertActiveDevices { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemTotalInit
        /// </summary>
        [DataMember(Name="jvm.mem.total.init", EmitDefaultValue=false)]
        public MetricGauge JvmMemTotalInit { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSOldGenCommitted
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Old-Gen.committed", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSOldGenCommitted { get; set; }
        /// <summary>
        /// Gets or Sets VertxTimers
        /// </summary>
        [DataMember(Name="vertx.timers", EmitDefaultValue=false)]
        public MetricCounter VertxTimers { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesSent
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.sent", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesSent { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectServiceUpdateLog
        /// </summary>
        [DataMember(Name="persistence.select.service-update-log", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectServiceUpdateLog { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectAccountsStatisticsWithAccounts
        /// </summary>
        [DataMember(Name="persistence.select.accounts-statistics-with-accounts", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectAccountsStatisticsWithAccounts { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerActivedevicesInImportsTimer
        /// </summary>
        [DataMember(Name="http.handler.activedevices-in-imports.timer", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerActivedevicesInImportsTimer { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectHealthcheck
        /// </summary>
        [DataMember(Name="persistence.select.healthcheck", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectHealthcheck { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamBytesRead
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.bytes-read", EmitDefaultValue=false)]
        public MetricHistogram VertxHttpClientsIamBytesRead { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectInitialAccounts
        /// </summary>
        [DataMember(Name="persistence.select.initial-accounts", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectInitialAccounts { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusHandlers
        /// </summary>
        [DataMember(Name="vertx.eventbus.handlers", EmitDefaultValue=false)]
        public MetricCounter VertxEventbusHandlers { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersExceptions
        /// </summary>
        [DataMember(Name="vertx.http.servers.exceptions", EmitDefaultValue=false)]
        public MetricCounter VertxHttpServersExceptions { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesReplyFailures
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.reply-failures", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesReplyFailures { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamHeadRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.head-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamHeadRequests { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSOldGenMax
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Old-Gen.max", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSOldGenMax { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceUpdateUpdateAccountUpgradeTime
        /// </summary>
        [DataMember(Name="persistence.update.update-account-upgrade-time", EmitDefaultValue=false)]
        public MetricTimer PersistenceUpdateUpdateAccountUpgradeTime { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsCompressedClassSpaceInit
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Compressed-Class-Space.init", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsCompressedClassSpaceInit { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsCodeCacheUsage
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Code-Cache.usage", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsCodeCacheUsage { get; set; }
        /// <summary>
        /// Gets or Sets VertxVerticles
        /// </summary>
        [DataMember(Name="vertx.verticles", EmitDefaultValue=false)]
        public MetricCounter VertxVerticles { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersResponses2xx
        /// </summary>
        [DataMember(Name="vertx.http.servers.responses-2xx", EmitDefaultValue=false)]
        public MetricMeter VertxHttpServersResponses2xx { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceInsertImportLog
        /// </summary>
        [DataMember(Name="persistence.insert.import-log", EmitDefaultValue=false)]
        public MetricTimer PersistenceInsertImportLog { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersPatchRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.patch-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersPatchRequests { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerServiceUpdateLogTimer
        /// </summary>
        [DataMember(Name="http.handler.service-update-log.timer", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerServiceUpdateLogTimer { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsMetaspaceInit
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Metaspace.init", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsMetaspaceInit { get; set; }
        /// <summary>
        /// Gets or Sets JvmGcPSMarkSweepTime
        /// </summary>
        [DataMember(Name="jvm.gc.PS-MarkSweep.time", EmitDefaultValue=false)]
        public MetricGauge JvmGcPSMarkSweepTime { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerTimeSeriesTimer
        /// </summary>
        [DataMember(Name="http.handler.time-series.timer", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerTimeSeriesTimer { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersConnections
        /// </summary>
        [DataMember(Name="vertx.http.servers.connections", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersConnections { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesSentLocal
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.sent-local", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesSentLocal { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamOtherRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.other-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamOtherRequests { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamResponses5xx
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.responses-5xx", EmitDefaultValue=false)]
        public MetricMeter VertxHttpClientsIamResponses5xx { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSEdenSpaceMax
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Eden-Space.max", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSEdenSpaceMax { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesDeliveredRemote
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.delivered-remote", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesDeliveredRemote { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamConnectionsPoolRatio
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.connections.pool-ratio", EmitDefaultValue=false)]
        public MetricGauge VertxHttpClientsIamConnectionsPoolRatio { get; set; }
        /// <summary>
        /// Gets or Sets PersistentStoreDsPoolConnectionTimeoutRate
        /// </summary>
        [DataMember(Name="persistent-store-ds.pool.ConnectionTimeoutRate", EmitDefaultValue=false)]
        public MetricMeter PersistentStoreDsPoolConnectionTimeoutRate { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSSurvivorSpaceUsage
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Survivor-Space.usage", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSSurvivorSpaceUsage { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemTotalCommitted
        /// </summary>
        [DataMember(Name="jvm.mem.total.committed", EmitDefaultValue=false)]
        public MetricGauge JvmMemTotalCommitted { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemNonHeapUsed
        /// </summary>
        [DataMember(Name="jvm.mem.non-heap.used", EmitDefaultValue=false)]
        public MetricGauge JvmMemNonHeapUsed { get; set; }
        /// <summary>
        /// Gets or Sets PersistentStoreDsPoolWait
        /// </summary>
        [DataMember(Name="persistent-store-ds.pool.Wait", EmitDefaultValue=false)]
        public MetricTimer PersistentStoreDsPoolWait { get; set; }
        /// <summary>
        /// Gets or Sets VertxWorkerPoolSize
        /// </summary>
        [DataMember(Name="vertx.worker-pool-size", EmitDefaultValue=false)]
        public MetricGauge VertxWorkerPoolSize { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXInternalBlockingInUse
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-internal-blocking.in-use", EmitDefaultValue=false)]
        public MetricCounter VertxPoolsWorkerVertXInternalBlockingInUse { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesPublished
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.published", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesPublished { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersGetRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.get-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersGetRequests { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamOpenNetsockets
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.open-netsockets", EmitDefaultValue=false)]
        public MetricCounter VertxHttpClientsIamOpenNetsockets { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemNonHeapInit
        /// </summary>
        [DataMember(Name="jvm.mem.non-heap.init", EmitDefaultValue=false)]
        public MetricGauge JvmMemNonHeapInit { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamDeleteRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.delete-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamDeleteRequests { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSEdenSpaceUsed
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Eden-Space.used", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSEdenSpaceUsed { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerMetricsHandlerTimer
        /// </summary>
        [DataMember(Name="http.handler.metrics-handler.timer", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerMetricsHandlerTimer { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectImportLogActiveDevices
        /// </summary>
        [DataMember(Name="persistence.select.import-log-active-devices", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectImportLogActiveDevices { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerActivedevicesTimer
        /// </summary>
        [DataMember(Name="http.handler.activedevices.timer", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerActivedevicesTimer { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamOpenConnections
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.open-connections", EmitDefaultValue=false)]
        public List<MetricHostCounter> VertxHttpClientsIamOpenConnections { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSSurvivorSpaceUsed
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Survivor-Space.used", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSSurvivorSpaceUsed { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamResponses1xx
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.responses-1xx", EmitDefaultValue=false)]
        public MetricMeter VertxHttpClientsIamResponses1xx { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceInsertDlq
        /// </summary>
        [DataMember(Name="persistence.insert.dlq", EmitDefaultValue=false)]
        public MetricTimer PersistenceInsertDlq { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesPublishedRemote
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.published-remote", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesPublishedRemote { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSOldGenInit
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Old-Gen.init", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSOldGenInit { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamConnections
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.connections", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamConnections { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesPending
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.pending", EmitDefaultValue=false)]
        public MetricCounter VertxEventbusMessagesPending { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersConnectRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.connect-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersConnectRequests { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXInternalBlockingQueueSize
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-internal-blocking.queue-size", EmitDefaultValue=false)]
        public MetricCounter VertxPoolsWorkerVertXInternalBlockingQueueSize { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerBuildInfoTimer
        /// </summary>
        [DataMember(Name="http.handler.build-info.timer", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerBuildInfoTimer { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSEdenSpaceUsage
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Eden-Space.usage", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSEdenSpaceUsage { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesPublishedLocal
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.published-local", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesPublishedLocal { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectAccountsStatisticsAll
        /// </summary>
        [DataMember(Name="persistence.select.accounts-statistics-all", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectAccountsStatisticsAll { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectAccountsStatisticsWithAccount
        /// </summary>
        [DataMember(Name="persistence.select.accounts-statistics-with-account", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectAccountsStatisticsWithAccount { get; set; }
        /// <summary>
        /// Gets or Sets JvmGcPSScavengeTime
        /// </summary>
        [DataMember(Name="jvm.gc.PS-Scavenge.time", EmitDefaultValue=false)]
        public MetricGauge JvmGcPSScavengeTime { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamExceptions
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.exceptions", EmitDefaultValue=false)]
        public MetricCounter VertxHttpClientsIamExceptions { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSOldGenUsage
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Old-Gen.usage", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSOldGenUsage { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersPostRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.post-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersPostRequests { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSOldGenUsedAfterGc
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Old-Gen.used-after-gc", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSOldGenUsedAfterGc { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesSentRemote
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.sent-remote", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesSentRemote { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectAccounts
        /// </summary>
        [DataMember(Name="persistence.select.accounts", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectAccounts { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesPendingRemote
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.pending-remote", EmitDefaultValue=false)]
        public MetricCounter VertxEventbusMessagesPendingRemote { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesReceivedLocal
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.received-local", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesReceivedLocal { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsCodeCacheMax
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Code-Cache.max", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsCodeCacheMax { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXInternalBlockingMaxPoolSize
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-internal-blocking.max-pool-size", EmitDefaultValue=false)]
        public MetricGauge VertxPoolsWorkerVertXInternalBlockingMaxPoolSize { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceOperationStore
        /// </summary>
        [DataMember(Name="persistence.operation.store", EmitDefaultValue=false)]
        public MetricTimer PersistenceOperationStore { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerHealthCheckTimer
        /// </summary>
        [DataMember(Name="http.handler.health-check.timer", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerHealthCheckTimer { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamConnectRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.connect-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamConnectRequests { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersTraceRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.trace-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersTraceRequests { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemNonHeapUsage
        /// </summary>
        [DataMember(Name="jvm.mem.non-heap.usage", EmitDefaultValue=false)]
        public MetricGauge JvmMemNonHeapUsage { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersPutRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.put-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersPutRequests { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemTotalUsed
        /// </summary>
        [DataMember(Name="jvm.mem.total.used", EmitDefaultValue=false)]
        public MetricGauge JvmMemTotalUsed { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsCodeCacheCommitted
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Code-Cache.committed", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsCodeCacheCommitted { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerAccountStatsWithoutAccount
        /// </summary>
        [DataMember(Name="http.handler.account-stats.without-account", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerAccountStatsWithoutAccount { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesDeliveredLocal
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.delivered-local", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesDeliveredLocal { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSEdenSpaceUsedAfterGc
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Eden-Space.used-after-gc", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSEdenSpaceUsedAfterGc { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsCompressedClassSpaceUsed
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Compressed-Class-Space.used", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsCompressedClassSpaceUsed { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXWorkerThreadQueueDelay
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-worker-thread.queue-delay", EmitDefaultValue=false)]
        public MetricTimer VertxPoolsWorkerVertXWorkerThreadQueueDelay { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXInternalBlockingQueueDelay
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-internal-blocking.queue-delay", EmitDefaultValue=false)]
        public MetricTimer VertxPoolsWorkerVertXInternalBlockingQueueDelay { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerAccountStatsWithAccount
        /// </summary>
        [DataMember(Name="http.handler.account-stats.with-account", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerAccountStatsWithAccount { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsCompressedClassSpaceMax
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Compressed-Class-Space.max", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsCompressedClassSpaceMax { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerAccountListTimer
        /// </summary>
        [DataMember(Name="http.handler.account-list.timer", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerAccountListTimer { get; set; }
        /// <summary>
        /// Gets or Sets PersistentStoreDsPoolTotalConnections
        /// </summary>
        [DataMember(Name="persistent-store-ds.pool.TotalConnections", EmitDefaultValue=false)]
        public MetricGauge PersistentStoreDsPoolTotalConnections { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSSurvivorSpaceCommitted
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Survivor-Space.committed", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSSurvivorSpaceCommitted { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersResponses5xx
        /// </summary>
        [DataMember(Name="vertx.http.servers.responses-5xx", EmitDefaultValue=false)]
        public MetricMeter VertxHttpServersResponses5xx { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsCodeCacheInit
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Code-Cache.init", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsCodeCacheInit { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerReportJson
        /// </summary>
        [DataMember(Name="http.handler.report.json", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerReportJson { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersResponses4xx
        /// </summary>
        [DataMember(Name="vertx.http.servers.responses-4xx", EmitDefaultValue=false)]
        public MetricMeter VertxHttpServersResponses4xx { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXWorkerThreadUsage
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-worker-thread.usage", EmitDefaultValue=false)]
        public MetricTimer VertxPoolsWorkerVertXWorkerThreadUsage { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemHeapInit
        /// </summary>
        [DataMember(Name="jvm.mem.heap.init", EmitDefaultValue=false)]
        public MetricGauge JvmMemHeapInit { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemHeapMax
        /// </summary>
        [DataMember(Name="jvm.mem.heap.max", EmitDefaultValue=false)]
        public MetricGauge JvmMemHeapMax { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersResponses1xx
        /// </summary>
        [DataMember(Name="vertx.http.servers.responses-1xx", EmitDefaultValue=false)]
        public MetricMeter VertxHttpServersResponses1xx { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamPostRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.post-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamPostRequests { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersOpenWebsockets
        /// </summary>
        [DataMember(Name="vertx.http.servers.open-websockets", EmitDefaultValue=false)]
        public MetricCounter VertxHttpServersOpenWebsockets { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersOtherRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.other-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersOtherRequests { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerReportActivedevicesTimer
        /// </summary>
        [DataMember(Name="http.handler.report-activedevices.timer", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerReportActivedevicesTimer { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemHeapUsage
        /// </summary>
        [DataMember(Name="jvm.mem.heap.usage", EmitDefaultValue=false)]
        public MetricGauge JvmMemHeapUsage { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemNonHeapCommitted
        /// </summary>
        [DataMember(Name="jvm.mem.non-heap.committed", EmitDefaultValue=false)]
        public MetricGauge JvmMemNonHeapCommitted { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsCompressedClassSpaceUsage
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Compressed-Class-Space.usage", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsCompressedClassSpaceUsage { get; set; }
        /// <summary>
        /// Gets or Sets PersistentStoreDsPoolConnectionCreation
        /// </summary>
        [DataMember(Name="persistent-store-ds.pool.ConnectionCreation", EmitDefaultValue=false)]
        public MetricHistogram PersistentStoreDsPoolConnectionCreation { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamOpenWebsockets
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.open-websockets", EmitDefaultValue=false)]
        public MetricCounter VertxHttpClientsIamOpenWebsockets { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectImportLog
        /// </summary>
        [DataMember(Name="persistence.select.import-log", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectImportLog { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectAccountsStatisticsWithAccountsAndStarttime
        /// </summary>
        [DataMember(Name="persistence.select.accounts-statistics-with-accounts-and-starttime", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectAccountsStatisticsWithAccountsAndStarttime { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceOperationDlq
        /// </summary>
        [DataMember(Name="persistence.operation.dlq", EmitDefaultValue=false)]
        public MetricTimer PersistenceOperationDlq { get; set; }
        /// <summary>
        /// Gets or Sets JvmGcPSScavengeCount
        /// </summary>
        [DataMember(Name="jvm.gc.PS-Scavenge.count", EmitDefaultValue=false)]
        public MetricGauge JvmGcPSScavengeCount { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamConnectionsMaxPoolSize
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.connections.max-pool-size", EmitDefaultValue=false)]
        public MetricGauge VertxHttpClientsIamConnectionsMaxPoolSize { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesBytesWritten
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.bytes-written", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesBytesWritten { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsCompressedClassSpaceCommitted
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Compressed-Class-Space.committed", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsCompressedClassSpaceCommitted { get; set; }
        /// <summary>
        /// Gets or Sets VertxVerticlesComMbedBillingServerApiserverHttpHttpServer
        /// </summary>
        [DataMember(Name="vertx.verticles.com.mbed.billing.server.apiserver.http.HttpServer", EmitDefaultValue=false)]
        public MetricCounter VertxVerticlesComMbedBillingServerApiserverHttpHttpServer { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsCodeCacheUsed
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Code-Cache.used", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsCodeCacheUsed { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerImportLogTimer
        /// </summary>
        [DataMember(Name="http.handler.import-log.timer", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerImportLogTimer { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesPendingLocal
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.pending-local", EmitDefaultValue=false)]
        public MetricCounter VertxEventbusMessagesPendingLocal { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersBytesWritten
        /// </summary>
        [DataMember(Name="vertx.http.servers.bytes-written", EmitDefaultValue=false)]
        public MetricHistogram VertxHttpServersBytesWritten { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesBytesRead
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.bytes-read", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesBytesRead { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersHeadRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.head-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersHeadRequests { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSSurvivorSpaceUsedAfterGc
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Survivor-Space.used-after-gc", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSSurvivorSpaceUsedAfterGc { get; set; }
        /// <summary>
        /// Gets or Sets PersistentStoreDsPoolActiveConnections
        /// </summary>
        [DataMember(Name="persistent-store-ds.pool.ActiveConnections", EmitDefaultValue=false)]
        public MetricGauge PersistentStoreDsPoolActiveConnections { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceConnectionConnect
        /// </summary>
        [DataMember(Name="persistence.connection.connect", EmitDefaultValue=false)]
        public MetricTimer PersistenceConnectionConnect { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSEdenSpaceInit
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Eden-Space.init", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSEdenSpaceInit { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamResponses2xx
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.responses-2xx", EmitDefaultValue=false)]
        public MetricMeter VertxHttpClientsIamResponses2xx { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceInsertAccountStatistics
        /// </summary>
        [DataMember(Name="persistence.insert.account-statistics", EmitDefaultValue=false)]
        public MetricTimer PersistenceInsertAccountStatistics { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsMetaspaceUsed
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Metaspace.used", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsMetaspaceUsed { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsMetaspaceMax
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Metaspace.max", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsMetaspaceMax { get; set; }
        /// <summary>
        /// Gets or Sets HttpHandlerReportZip
        /// </summary>
        [DataMember(Name="http.handler.report.zip", EmitDefaultValue=false)]
        public MetricTimer HttpHandlerReportZip { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventLoopSize
        /// </summary>
        [DataMember(Name="vertx.event-loop-size", EmitDefaultValue=false)]
        public MetricGauge VertxEventLoopSize { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersOpenConnections
        /// </summary>
        [DataMember(Name="vertx.http.servers.open-connections", EmitDefaultValue=false)]
        public List<MetricHostCounter> VertxHttpServersOpenConnections { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamResponses3xx
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.responses-3xx", EmitDefaultValue=false)]
        public MetricMeter VertxHttpClientsIamResponses3xx { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSEdenSpaceCommitted
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Eden-Space.committed", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSEdenSpaceCommitted { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersResponses3xx
        /// </summary>
        [DataMember(Name="vertx.http.servers.responses-3xx", EmitDefaultValue=false)]
        public MetricMeter VertxHttpServersResponses3xx { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamGetRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.get-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamGetRequests { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemHeapCommitted
        /// </summary>
        [DataMember(Name="jvm.mem.heap.committed", EmitDefaultValue=false)]
        public MetricGauge JvmMemHeapCommitted { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersOpenNetsockets
        /// </summary>
        [DataMember(Name="vertx.http.servers.open-netsockets", EmitDefaultValue=false)]
        public MetricCounter VertxHttpServersOpenNetsockets { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpServersRequests
        /// </summary>
        [DataMember(Name="vertx.http.servers.requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpServersRequests { get; set; }
        /// <summary>
        /// Gets or Sets PersistentStoreDsPoolPendingConnections
        /// </summary>
        [DataMember(Name="persistent-store-ds.pool.PendingConnections", EmitDefaultValue=false)]
        public MetricGauge PersistentStoreDsPoolPendingConnections { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSOldGenUsed
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Old-Gen.used", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSOldGenUsed { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsMetaspaceUsage
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Metaspace.usage", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsMetaspaceUsage { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXWorkerThreadInUse
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-worker-thread.in-use", EmitDefaultValue=false)]
        public MetricCounter VertxPoolsWorkerVertXWorkerThreadInUse { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectTimeSeries
        /// </summary>
        [DataMember(Name="persistence.select.time-series", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectTimeSeries { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsMetaspaceCommitted
        /// </summary>
        [DataMember(Name="jvm.mem.pools.Metaspace.committed", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsMetaspaceCommitted { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesDelivered
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.delivered", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesDelivered { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamPatchRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.patch-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamPatchRequests { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesReceivedRemote
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.received-remote", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesReceivedRemote { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamResponses4xx
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.responses-4xx", EmitDefaultValue=false)]
        public MetricMeter VertxHttpClientsIamResponses4xx { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXWorkerThreadPoolRatio
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-worker-thread.pool-ratio", EmitDefaultValue=false)]
        public MetricGauge VertxPoolsWorkerVertXWorkerThreadPoolRatio { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamTraceRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.trace-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamTraceRequests { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXWorkerThreadMaxPoolSize
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-worker-thread.max-pool-size", EmitDefaultValue=false)]
        public MetricGauge VertxPoolsWorkerVertXWorkerThreadMaxPoolSize { get; set; }
        /// <summary>
        /// Gets or Sets VertxPoolsWorkerVertXInternalBlockingUsage
        /// </summary>
        [DataMember(Name="vertx.pools.worker.vert.x-internal-blocking.usage", EmitDefaultValue=false)]
        public MetricTimer VertxPoolsWorkerVertXInternalBlockingUsage { get; set; }
        /// <summary>
        /// Gets or Sets PersistenceSelectCheckIfExists
        /// </summary>
        [DataMember(Name="persistence.select.check-if-exists", EmitDefaultValue=false)]
        public MetricTimer PersistenceSelectCheckIfExists { get; set; }
        /// <summary>
        /// Gets or Sets VertxEventbusMessagesReceived
        /// </summary>
        [DataMember(Name="vertx.eventbus.messages.received", EmitDefaultValue=false)]
        public MetricMeter VertxEventbusMessagesReceived { get; set; }
        /// <summary>
        /// Gets or Sets JvmGcPSMarkSweepCount
        /// </summary>
        [DataMember(Name="jvm.gc.PS-MarkSweep.count", EmitDefaultValue=false)]
        public MetricGauge JvmGcPSMarkSweepCount { get; set; }
        /// <summary>
        /// Gets or Sets JvmMemPoolsPSSurvivorSpaceMax
        /// </summary>
        [DataMember(Name="jvm.mem.pools.PS-Survivor-Space.max", EmitDefaultValue=false)]
        public MetricGauge JvmMemPoolsPSSurvivorSpaceMax { get; set; }
        /// <summary>
        /// Gets or Sets PersistentStoreDsPoolIdleConnections
        /// </summary>
        [DataMember(Name="persistent-store-ds.pool.IdleConnections", EmitDefaultValue=false)]
        public MetricGauge PersistentStoreDsPoolIdleConnections { get; set; }
        /// <summary>
        /// Gets or Sets VertxHttpClientsIamPutRequests
        /// </summary>
        [DataMember(Name="vertx.http.clients.iam.put-requests", EmitDefaultValue=false)]
        public MetricTimer VertxHttpClientsIamPutRequests { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Metrics {\n");
            sb.Append("  VertxHttpServersDeleteRequests: ").Append(VertxHttpServersDeleteRequests).Append("\n");
            sb.Append("  JvmMemPoolsPSSurvivorSpaceInit: ").Append(JvmMemPoolsPSSurvivorSpaceInit).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXWorkerThreadQueueSize: ").Append(VertxPoolsWorkerVertXWorkerThreadQueueSize).Append("\n");
            sb.Append("  VertxHttpServersOptionsRequests: ").Append(VertxHttpServersOptionsRequests).Append("\n");
            sb.Append("  JvmMemNonHeapMax: ").Append(JvmMemNonHeapMax).Append("\n");
            sb.Append("  JvmMemHeapUsed: ").Append(JvmMemHeapUsed).Append("\n");
            sb.Append("  JvmMemTotalMax: ").Append(JvmMemTotalMax).Append("\n");
            sb.Append("  PersistenceInsertAccount: ").Append(PersistenceInsertAccount).Append("\n");
            sb.Append("  VertxHttpServersBytesRead: ").Append(VertxHttpServersBytesRead).Append("\n");
            sb.Append("  VertxHttpClientsIamBytesWritten: ").Append(VertxHttpClientsIamBytesWritten).Append("\n");
            sb.Append("  VertxHttpClientsIamOptionsRequests: ").Append(VertxHttpClientsIamOptionsRequests).Append("\n");
            sb.Append("  VertxHttpClientsIamRequests: ").Append(VertxHttpClientsIamRequests).Append("\n");
            sb.Append("  PersistentStoreDsPoolUsage: ").Append(PersistentStoreDsPoolUsage).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXInternalBlockingPoolRatio: ").Append(VertxPoolsWorkerVertXInternalBlockingPoolRatio).Append("\n");
            sb.Append("  PersistenceInsertActiveDevices: ").Append(PersistenceInsertActiveDevices).Append("\n");
            sb.Append("  JvmMemTotalInit: ").Append(JvmMemTotalInit).Append("\n");
            sb.Append("  JvmMemPoolsPSOldGenCommitted: ").Append(JvmMemPoolsPSOldGenCommitted).Append("\n");
            sb.Append("  VertxTimers: ").Append(VertxTimers).Append("\n");
            sb.Append("  VertxEventbusMessagesSent: ").Append(VertxEventbusMessagesSent).Append("\n");
            sb.Append("  PersistenceSelectServiceUpdateLog: ").Append(PersistenceSelectServiceUpdateLog).Append("\n");
            sb.Append("  PersistenceSelectAccountsStatisticsWithAccounts: ").Append(PersistenceSelectAccountsStatisticsWithAccounts).Append("\n");
            sb.Append("  HttpHandlerActivedevicesInImportsTimer: ").Append(HttpHandlerActivedevicesInImportsTimer).Append("\n");
            sb.Append("  PersistenceSelectHealthcheck: ").Append(PersistenceSelectHealthcheck).Append("\n");
            sb.Append("  VertxHttpClientsIamBytesRead: ").Append(VertxHttpClientsIamBytesRead).Append("\n");
            sb.Append("  PersistenceSelectInitialAccounts: ").Append(PersistenceSelectInitialAccounts).Append("\n");
            sb.Append("  VertxEventbusHandlers: ").Append(VertxEventbusHandlers).Append("\n");
            sb.Append("  VertxHttpServersExceptions: ").Append(VertxHttpServersExceptions).Append("\n");
            sb.Append("  VertxEventbusMessagesReplyFailures: ").Append(VertxEventbusMessagesReplyFailures).Append("\n");
            sb.Append("  VertxHttpClientsIamHeadRequests: ").Append(VertxHttpClientsIamHeadRequests).Append("\n");
            sb.Append("  JvmMemPoolsPSOldGenMax: ").Append(JvmMemPoolsPSOldGenMax).Append("\n");
            sb.Append("  PersistenceUpdateUpdateAccountUpgradeTime: ").Append(PersistenceUpdateUpdateAccountUpgradeTime).Append("\n");
            sb.Append("  JvmMemPoolsCompressedClassSpaceInit: ").Append(JvmMemPoolsCompressedClassSpaceInit).Append("\n");
            sb.Append("  JvmMemPoolsCodeCacheUsage: ").Append(JvmMemPoolsCodeCacheUsage).Append("\n");
            sb.Append("  VertxVerticles: ").Append(VertxVerticles).Append("\n");
            sb.Append("  VertxHttpServersResponses2xx: ").Append(VertxHttpServersResponses2xx).Append("\n");
            sb.Append("  PersistenceInsertImportLog: ").Append(PersistenceInsertImportLog).Append("\n");
            sb.Append("  VertxHttpServersPatchRequests: ").Append(VertxHttpServersPatchRequests).Append("\n");
            sb.Append("  HttpHandlerServiceUpdateLogTimer: ").Append(HttpHandlerServiceUpdateLogTimer).Append("\n");
            sb.Append("  JvmMemPoolsMetaspaceInit: ").Append(JvmMemPoolsMetaspaceInit).Append("\n");
            sb.Append("  JvmGcPSMarkSweepTime: ").Append(JvmGcPSMarkSweepTime).Append("\n");
            sb.Append("  HttpHandlerTimeSeriesTimer: ").Append(HttpHandlerTimeSeriesTimer).Append("\n");
            sb.Append("  VertxHttpServersConnections: ").Append(VertxHttpServersConnections).Append("\n");
            sb.Append("  VertxEventbusMessagesSentLocal: ").Append(VertxEventbusMessagesSentLocal).Append("\n");
            sb.Append("  VertxHttpClientsIamOtherRequests: ").Append(VertxHttpClientsIamOtherRequests).Append("\n");
            sb.Append("  VertxHttpClientsIamResponses5xx: ").Append(VertxHttpClientsIamResponses5xx).Append("\n");
            sb.Append("  JvmMemPoolsPSEdenSpaceMax: ").Append(JvmMemPoolsPSEdenSpaceMax).Append("\n");
            sb.Append("  VertxEventbusMessagesDeliveredRemote: ").Append(VertxEventbusMessagesDeliveredRemote).Append("\n");
            sb.Append("  VertxHttpClientsIamConnectionsPoolRatio: ").Append(VertxHttpClientsIamConnectionsPoolRatio).Append("\n");
            sb.Append("  PersistentStoreDsPoolConnectionTimeoutRate: ").Append(PersistentStoreDsPoolConnectionTimeoutRate).Append("\n");
            sb.Append("  JvmMemPoolsPSSurvivorSpaceUsage: ").Append(JvmMemPoolsPSSurvivorSpaceUsage).Append("\n");
            sb.Append("  JvmMemTotalCommitted: ").Append(JvmMemTotalCommitted).Append("\n");
            sb.Append("  JvmMemNonHeapUsed: ").Append(JvmMemNonHeapUsed).Append("\n");
            sb.Append("  PersistentStoreDsPoolWait: ").Append(PersistentStoreDsPoolWait).Append("\n");
            sb.Append("  VertxWorkerPoolSize: ").Append(VertxWorkerPoolSize).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXInternalBlockingInUse: ").Append(VertxPoolsWorkerVertXInternalBlockingInUse).Append("\n");
            sb.Append("  VertxEventbusMessagesPublished: ").Append(VertxEventbusMessagesPublished).Append("\n");
            sb.Append("  VertxHttpServersGetRequests: ").Append(VertxHttpServersGetRequests).Append("\n");
            sb.Append("  VertxHttpClientsIamOpenNetsockets: ").Append(VertxHttpClientsIamOpenNetsockets).Append("\n");
            sb.Append("  JvmMemNonHeapInit: ").Append(JvmMemNonHeapInit).Append("\n");
            sb.Append("  VertxHttpClientsIamDeleteRequests: ").Append(VertxHttpClientsIamDeleteRequests).Append("\n");
            sb.Append("  JvmMemPoolsPSEdenSpaceUsed: ").Append(JvmMemPoolsPSEdenSpaceUsed).Append("\n");
            sb.Append("  HttpHandlerMetricsHandlerTimer: ").Append(HttpHandlerMetricsHandlerTimer).Append("\n");
            sb.Append("  PersistenceSelectImportLogActiveDevices: ").Append(PersistenceSelectImportLogActiveDevices).Append("\n");
            sb.Append("  HttpHandlerActivedevicesTimer: ").Append(HttpHandlerActivedevicesTimer).Append("\n");
            sb.Append("  VertxHttpClientsIamOpenConnections: ").Append(VertxHttpClientsIamOpenConnections).Append("\n");
            sb.Append("  JvmMemPoolsPSSurvivorSpaceUsed: ").Append(JvmMemPoolsPSSurvivorSpaceUsed).Append("\n");
            sb.Append("  VertxHttpClientsIamResponses1xx: ").Append(VertxHttpClientsIamResponses1xx).Append("\n");
            sb.Append("  PersistenceInsertDlq: ").Append(PersistenceInsertDlq).Append("\n");
            sb.Append("  VertxEventbusMessagesPublishedRemote: ").Append(VertxEventbusMessagesPublishedRemote).Append("\n");
            sb.Append("  JvmMemPoolsPSOldGenInit: ").Append(JvmMemPoolsPSOldGenInit).Append("\n");
            sb.Append("  VertxHttpClientsIamConnections: ").Append(VertxHttpClientsIamConnections).Append("\n");
            sb.Append("  VertxEventbusMessagesPending: ").Append(VertxEventbusMessagesPending).Append("\n");
            sb.Append("  VertxHttpServersConnectRequests: ").Append(VertxHttpServersConnectRequests).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXInternalBlockingQueueSize: ").Append(VertxPoolsWorkerVertXInternalBlockingQueueSize).Append("\n");
            sb.Append("  HttpHandlerBuildInfoTimer: ").Append(HttpHandlerBuildInfoTimer).Append("\n");
            sb.Append("  JvmMemPoolsPSEdenSpaceUsage: ").Append(JvmMemPoolsPSEdenSpaceUsage).Append("\n");
            sb.Append("  VertxEventbusMessagesPublishedLocal: ").Append(VertxEventbusMessagesPublishedLocal).Append("\n");
            sb.Append("  PersistenceSelectAccountsStatisticsAll: ").Append(PersistenceSelectAccountsStatisticsAll).Append("\n");
            sb.Append("  PersistenceSelectAccountsStatisticsWithAccount: ").Append(PersistenceSelectAccountsStatisticsWithAccount).Append("\n");
            sb.Append("  JvmGcPSScavengeTime: ").Append(JvmGcPSScavengeTime).Append("\n");
            sb.Append("  VertxHttpClientsIamExceptions: ").Append(VertxHttpClientsIamExceptions).Append("\n");
            sb.Append("  JvmMemPoolsPSOldGenUsage: ").Append(JvmMemPoolsPSOldGenUsage).Append("\n");
            sb.Append("  VertxHttpServersPostRequests: ").Append(VertxHttpServersPostRequests).Append("\n");
            sb.Append("  JvmMemPoolsPSOldGenUsedAfterGc: ").Append(JvmMemPoolsPSOldGenUsedAfterGc).Append("\n");
            sb.Append("  VertxEventbusMessagesSentRemote: ").Append(VertxEventbusMessagesSentRemote).Append("\n");
            sb.Append("  PersistenceSelectAccounts: ").Append(PersistenceSelectAccounts).Append("\n");
            sb.Append("  VertxEventbusMessagesPendingRemote: ").Append(VertxEventbusMessagesPendingRemote).Append("\n");
            sb.Append("  VertxEventbusMessagesReceivedLocal: ").Append(VertxEventbusMessagesReceivedLocal).Append("\n");
            sb.Append("  JvmMemPoolsCodeCacheMax: ").Append(JvmMemPoolsCodeCacheMax).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXInternalBlockingMaxPoolSize: ").Append(VertxPoolsWorkerVertXInternalBlockingMaxPoolSize).Append("\n");
            sb.Append("  PersistenceOperationStore: ").Append(PersistenceOperationStore).Append("\n");
            sb.Append("  HttpHandlerHealthCheckTimer: ").Append(HttpHandlerHealthCheckTimer).Append("\n");
            sb.Append("  VertxHttpClientsIamConnectRequests: ").Append(VertxHttpClientsIamConnectRequests).Append("\n");
            sb.Append("  VertxHttpServersTraceRequests: ").Append(VertxHttpServersTraceRequests).Append("\n");
            sb.Append("  JvmMemNonHeapUsage: ").Append(JvmMemNonHeapUsage).Append("\n");
            sb.Append("  VertxHttpServersPutRequests: ").Append(VertxHttpServersPutRequests).Append("\n");
            sb.Append("  JvmMemTotalUsed: ").Append(JvmMemTotalUsed).Append("\n");
            sb.Append("  JvmMemPoolsCodeCacheCommitted: ").Append(JvmMemPoolsCodeCacheCommitted).Append("\n");
            sb.Append("  HttpHandlerAccountStatsWithoutAccount: ").Append(HttpHandlerAccountStatsWithoutAccount).Append("\n");
            sb.Append("  VertxEventbusMessagesDeliveredLocal: ").Append(VertxEventbusMessagesDeliveredLocal).Append("\n");
            sb.Append("  JvmMemPoolsPSEdenSpaceUsedAfterGc: ").Append(JvmMemPoolsPSEdenSpaceUsedAfterGc).Append("\n");
            sb.Append("  JvmMemPoolsCompressedClassSpaceUsed: ").Append(JvmMemPoolsCompressedClassSpaceUsed).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXWorkerThreadQueueDelay: ").Append(VertxPoolsWorkerVertXWorkerThreadQueueDelay).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXInternalBlockingQueueDelay: ").Append(VertxPoolsWorkerVertXInternalBlockingQueueDelay).Append("\n");
            sb.Append("  HttpHandlerAccountStatsWithAccount: ").Append(HttpHandlerAccountStatsWithAccount).Append("\n");
            sb.Append("  JvmMemPoolsCompressedClassSpaceMax: ").Append(JvmMemPoolsCompressedClassSpaceMax).Append("\n");
            sb.Append("  HttpHandlerAccountListTimer: ").Append(HttpHandlerAccountListTimer).Append("\n");
            sb.Append("  PersistentStoreDsPoolTotalConnections: ").Append(PersistentStoreDsPoolTotalConnections).Append("\n");
            sb.Append("  JvmMemPoolsPSSurvivorSpaceCommitted: ").Append(JvmMemPoolsPSSurvivorSpaceCommitted).Append("\n");
            sb.Append("  VertxHttpServersResponses5xx: ").Append(VertxHttpServersResponses5xx).Append("\n");
            sb.Append("  JvmMemPoolsCodeCacheInit: ").Append(JvmMemPoolsCodeCacheInit).Append("\n");
            sb.Append("  HttpHandlerReportJson: ").Append(HttpHandlerReportJson).Append("\n");
            sb.Append("  VertxHttpServersResponses4xx: ").Append(VertxHttpServersResponses4xx).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXWorkerThreadUsage: ").Append(VertxPoolsWorkerVertXWorkerThreadUsage).Append("\n");
            sb.Append("  JvmMemHeapInit: ").Append(JvmMemHeapInit).Append("\n");
            sb.Append("  JvmMemHeapMax: ").Append(JvmMemHeapMax).Append("\n");
            sb.Append("  VertxHttpServersResponses1xx: ").Append(VertxHttpServersResponses1xx).Append("\n");
            sb.Append("  VertxHttpClientsIamPostRequests: ").Append(VertxHttpClientsIamPostRequests).Append("\n");
            sb.Append("  VertxHttpServersOpenWebsockets: ").Append(VertxHttpServersOpenWebsockets).Append("\n");
            sb.Append("  VertxHttpServersOtherRequests: ").Append(VertxHttpServersOtherRequests).Append("\n");
            sb.Append("  HttpHandlerReportActivedevicesTimer: ").Append(HttpHandlerReportActivedevicesTimer).Append("\n");
            sb.Append("  JvmMemHeapUsage: ").Append(JvmMemHeapUsage).Append("\n");
            sb.Append("  JvmMemNonHeapCommitted: ").Append(JvmMemNonHeapCommitted).Append("\n");
            sb.Append("  JvmMemPoolsCompressedClassSpaceUsage: ").Append(JvmMemPoolsCompressedClassSpaceUsage).Append("\n");
            sb.Append("  PersistentStoreDsPoolConnectionCreation: ").Append(PersistentStoreDsPoolConnectionCreation).Append("\n");
            sb.Append("  VertxHttpClientsIamOpenWebsockets: ").Append(VertxHttpClientsIamOpenWebsockets).Append("\n");
            sb.Append("  PersistenceSelectImportLog: ").Append(PersistenceSelectImportLog).Append("\n");
            sb.Append("  PersistenceSelectAccountsStatisticsWithAccountsAndStarttime: ").Append(PersistenceSelectAccountsStatisticsWithAccountsAndStarttime).Append("\n");
            sb.Append("  PersistenceOperationDlq: ").Append(PersistenceOperationDlq).Append("\n");
            sb.Append("  JvmGcPSScavengeCount: ").Append(JvmGcPSScavengeCount).Append("\n");
            sb.Append("  VertxHttpClientsIamConnectionsMaxPoolSize: ").Append(VertxHttpClientsIamConnectionsMaxPoolSize).Append("\n");
            sb.Append("  VertxEventbusMessagesBytesWritten: ").Append(VertxEventbusMessagesBytesWritten).Append("\n");
            sb.Append("  JvmMemPoolsCompressedClassSpaceCommitted: ").Append(JvmMemPoolsCompressedClassSpaceCommitted).Append("\n");
            sb.Append("  VertxVerticlesComMbedBillingServerApiserverHttpHttpServer: ").Append(VertxVerticlesComMbedBillingServerApiserverHttpHttpServer).Append("\n");
            sb.Append("  JvmMemPoolsCodeCacheUsed: ").Append(JvmMemPoolsCodeCacheUsed).Append("\n");
            sb.Append("  HttpHandlerImportLogTimer: ").Append(HttpHandlerImportLogTimer).Append("\n");
            sb.Append("  VertxEventbusMessagesPendingLocal: ").Append(VertxEventbusMessagesPendingLocal).Append("\n");
            sb.Append("  VertxHttpServersBytesWritten: ").Append(VertxHttpServersBytesWritten).Append("\n");
            sb.Append("  VertxEventbusMessagesBytesRead: ").Append(VertxEventbusMessagesBytesRead).Append("\n");
            sb.Append("  VertxHttpServersHeadRequests: ").Append(VertxHttpServersHeadRequests).Append("\n");
            sb.Append("  JvmMemPoolsPSSurvivorSpaceUsedAfterGc: ").Append(JvmMemPoolsPSSurvivorSpaceUsedAfterGc).Append("\n");
            sb.Append("  PersistentStoreDsPoolActiveConnections: ").Append(PersistentStoreDsPoolActiveConnections).Append("\n");
            sb.Append("  PersistenceConnectionConnect: ").Append(PersistenceConnectionConnect).Append("\n");
            sb.Append("  JvmMemPoolsPSEdenSpaceInit: ").Append(JvmMemPoolsPSEdenSpaceInit).Append("\n");
            sb.Append("  VertxHttpClientsIamResponses2xx: ").Append(VertxHttpClientsIamResponses2xx).Append("\n");
            sb.Append("  PersistenceInsertAccountStatistics: ").Append(PersistenceInsertAccountStatistics).Append("\n");
            sb.Append("  JvmMemPoolsMetaspaceUsed: ").Append(JvmMemPoolsMetaspaceUsed).Append("\n");
            sb.Append("  JvmMemPoolsMetaspaceMax: ").Append(JvmMemPoolsMetaspaceMax).Append("\n");
            sb.Append("  HttpHandlerReportZip: ").Append(HttpHandlerReportZip).Append("\n");
            sb.Append("  VertxEventLoopSize: ").Append(VertxEventLoopSize).Append("\n");
            sb.Append("  VertxHttpServersOpenConnections: ").Append(VertxHttpServersOpenConnections).Append("\n");
            sb.Append("  VertxHttpClientsIamResponses3xx: ").Append(VertxHttpClientsIamResponses3xx).Append("\n");
            sb.Append("  JvmMemPoolsPSEdenSpaceCommitted: ").Append(JvmMemPoolsPSEdenSpaceCommitted).Append("\n");
            sb.Append("  VertxHttpServersResponses3xx: ").Append(VertxHttpServersResponses3xx).Append("\n");
            sb.Append("  VertxHttpClientsIamGetRequests: ").Append(VertxHttpClientsIamGetRequests).Append("\n");
            sb.Append("  JvmMemHeapCommitted: ").Append(JvmMemHeapCommitted).Append("\n");
            sb.Append("  VertxHttpServersOpenNetsockets: ").Append(VertxHttpServersOpenNetsockets).Append("\n");
            sb.Append("  VertxHttpServersRequests: ").Append(VertxHttpServersRequests).Append("\n");
            sb.Append("  PersistentStoreDsPoolPendingConnections: ").Append(PersistentStoreDsPoolPendingConnections).Append("\n");
            sb.Append("  JvmMemPoolsPSOldGenUsed: ").Append(JvmMemPoolsPSOldGenUsed).Append("\n");
            sb.Append("  JvmMemPoolsMetaspaceUsage: ").Append(JvmMemPoolsMetaspaceUsage).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXWorkerThreadInUse: ").Append(VertxPoolsWorkerVertXWorkerThreadInUse).Append("\n");
            sb.Append("  PersistenceSelectTimeSeries: ").Append(PersistenceSelectTimeSeries).Append("\n");
            sb.Append("  JvmMemPoolsMetaspaceCommitted: ").Append(JvmMemPoolsMetaspaceCommitted).Append("\n");
            sb.Append("  VertxEventbusMessagesDelivered: ").Append(VertxEventbusMessagesDelivered).Append("\n");
            sb.Append("  VertxHttpClientsIamPatchRequests: ").Append(VertxHttpClientsIamPatchRequests).Append("\n");
            sb.Append("  VertxEventbusMessagesReceivedRemote: ").Append(VertxEventbusMessagesReceivedRemote).Append("\n");
            sb.Append("  VertxHttpClientsIamResponses4xx: ").Append(VertxHttpClientsIamResponses4xx).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXWorkerThreadPoolRatio: ").Append(VertxPoolsWorkerVertXWorkerThreadPoolRatio).Append("\n");
            sb.Append("  VertxHttpClientsIamTraceRequests: ").Append(VertxHttpClientsIamTraceRequests).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXWorkerThreadMaxPoolSize: ").Append(VertxPoolsWorkerVertXWorkerThreadMaxPoolSize).Append("\n");
            sb.Append("  VertxPoolsWorkerVertXInternalBlockingUsage: ").Append(VertxPoolsWorkerVertXInternalBlockingUsage).Append("\n");
            sb.Append("  PersistenceSelectCheckIfExists: ").Append(PersistenceSelectCheckIfExists).Append("\n");
            sb.Append("  VertxEventbusMessagesReceived: ").Append(VertxEventbusMessagesReceived).Append("\n");
            sb.Append("  JvmGcPSMarkSweepCount: ").Append(JvmGcPSMarkSweepCount).Append("\n");
            sb.Append("  JvmMemPoolsPSSurvivorSpaceMax: ").Append(JvmMemPoolsPSSurvivorSpaceMax).Append("\n");
            sb.Append("  PersistentStoreDsPoolIdleConnections: ").Append(PersistentStoreDsPoolIdleConnections).Append("\n");
            sb.Append("  VertxHttpClientsIamPutRequests: ").Append(VertxHttpClientsIamPutRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Metrics);
        }

        /// <summary>
        /// Returns true if Metrics instances are equal
        /// </summary>
        /// <param name="other">Instance of Metrics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metrics other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VertxHttpServersDeleteRequests == other.VertxHttpServersDeleteRequests ||
                    this.VertxHttpServersDeleteRequests != null &&
                    this.VertxHttpServersDeleteRequests.Equals(other.VertxHttpServersDeleteRequests)
                ) && 
                (
                    this.JvmMemPoolsPSSurvivorSpaceInit == other.JvmMemPoolsPSSurvivorSpaceInit ||
                    this.JvmMemPoolsPSSurvivorSpaceInit != null &&
                    this.JvmMemPoolsPSSurvivorSpaceInit.Equals(other.JvmMemPoolsPSSurvivorSpaceInit)
                ) && 
                (
                    this.VertxPoolsWorkerVertXWorkerThreadQueueSize == other.VertxPoolsWorkerVertXWorkerThreadQueueSize ||
                    this.VertxPoolsWorkerVertXWorkerThreadQueueSize != null &&
                    this.VertxPoolsWorkerVertXWorkerThreadQueueSize.Equals(other.VertxPoolsWorkerVertXWorkerThreadQueueSize)
                ) && 
                (
                    this.VertxHttpServersOptionsRequests == other.VertxHttpServersOptionsRequests ||
                    this.VertxHttpServersOptionsRequests != null &&
                    this.VertxHttpServersOptionsRequests.Equals(other.VertxHttpServersOptionsRequests)
                ) && 
                (
                    this.JvmMemNonHeapMax == other.JvmMemNonHeapMax ||
                    this.JvmMemNonHeapMax != null &&
                    this.JvmMemNonHeapMax.Equals(other.JvmMemNonHeapMax)
                ) && 
                (
                    this.JvmMemHeapUsed == other.JvmMemHeapUsed ||
                    this.JvmMemHeapUsed != null &&
                    this.JvmMemHeapUsed.Equals(other.JvmMemHeapUsed)
                ) && 
                (
                    this.JvmMemTotalMax == other.JvmMemTotalMax ||
                    this.JvmMemTotalMax != null &&
                    this.JvmMemTotalMax.Equals(other.JvmMemTotalMax)
                ) && 
                (
                    this.PersistenceInsertAccount == other.PersistenceInsertAccount ||
                    this.PersistenceInsertAccount != null &&
                    this.PersistenceInsertAccount.Equals(other.PersistenceInsertAccount)
                ) && 
                (
                    this.VertxHttpServersBytesRead == other.VertxHttpServersBytesRead ||
                    this.VertxHttpServersBytesRead != null &&
                    this.VertxHttpServersBytesRead.Equals(other.VertxHttpServersBytesRead)
                ) && 
                (
                    this.VertxHttpClientsIamBytesWritten == other.VertxHttpClientsIamBytesWritten ||
                    this.VertxHttpClientsIamBytesWritten != null &&
                    this.VertxHttpClientsIamBytesWritten.Equals(other.VertxHttpClientsIamBytesWritten)
                ) && 
                (
                    this.VertxHttpClientsIamOptionsRequests == other.VertxHttpClientsIamOptionsRequests ||
                    this.VertxHttpClientsIamOptionsRequests != null &&
                    this.VertxHttpClientsIamOptionsRequests.Equals(other.VertxHttpClientsIamOptionsRequests)
                ) && 
                (
                    this.VertxHttpClientsIamRequests == other.VertxHttpClientsIamRequests ||
                    this.VertxHttpClientsIamRequests != null &&
                    this.VertxHttpClientsIamRequests.Equals(other.VertxHttpClientsIamRequests)
                ) && 
                (
                    this.PersistentStoreDsPoolUsage == other.PersistentStoreDsPoolUsage ||
                    this.PersistentStoreDsPoolUsage != null &&
                    this.PersistentStoreDsPoolUsage.Equals(other.PersistentStoreDsPoolUsage)
                ) && 
                (
                    this.VertxPoolsWorkerVertXInternalBlockingPoolRatio == other.VertxPoolsWorkerVertXInternalBlockingPoolRatio ||
                    this.VertxPoolsWorkerVertXInternalBlockingPoolRatio != null &&
                    this.VertxPoolsWorkerVertXInternalBlockingPoolRatio.Equals(other.VertxPoolsWorkerVertXInternalBlockingPoolRatio)
                ) && 
                (
                    this.PersistenceInsertActiveDevices == other.PersistenceInsertActiveDevices ||
                    this.PersistenceInsertActiveDevices != null &&
                    this.PersistenceInsertActiveDevices.Equals(other.PersistenceInsertActiveDevices)
                ) && 
                (
                    this.JvmMemTotalInit == other.JvmMemTotalInit ||
                    this.JvmMemTotalInit != null &&
                    this.JvmMemTotalInit.Equals(other.JvmMemTotalInit)
                ) && 
                (
                    this.JvmMemPoolsPSOldGenCommitted == other.JvmMemPoolsPSOldGenCommitted ||
                    this.JvmMemPoolsPSOldGenCommitted != null &&
                    this.JvmMemPoolsPSOldGenCommitted.Equals(other.JvmMemPoolsPSOldGenCommitted)
                ) && 
                (
                    this.VertxTimers == other.VertxTimers ||
                    this.VertxTimers != null &&
                    this.VertxTimers.Equals(other.VertxTimers)
                ) && 
                (
                    this.VertxEventbusMessagesSent == other.VertxEventbusMessagesSent ||
                    this.VertxEventbusMessagesSent != null &&
                    this.VertxEventbusMessagesSent.Equals(other.VertxEventbusMessagesSent)
                ) && 
                (
                    this.PersistenceSelectServiceUpdateLog == other.PersistenceSelectServiceUpdateLog ||
                    this.PersistenceSelectServiceUpdateLog != null &&
                    this.PersistenceSelectServiceUpdateLog.Equals(other.PersistenceSelectServiceUpdateLog)
                ) && 
                (
                    this.PersistenceSelectAccountsStatisticsWithAccounts == other.PersistenceSelectAccountsStatisticsWithAccounts ||
                    this.PersistenceSelectAccountsStatisticsWithAccounts != null &&
                    this.PersistenceSelectAccountsStatisticsWithAccounts.Equals(other.PersistenceSelectAccountsStatisticsWithAccounts)
                ) && 
                (
                    this.HttpHandlerActivedevicesInImportsTimer == other.HttpHandlerActivedevicesInImportsTimer ||
                    this.HttpHandlerActivedevicesInImportsTimer != null &&
                    this.HttpHandlerActivedevicesInImportsTimer.Equals(other.HttpHandlerActivedevicesInImportsTimer)
                ) && 
                (
                    this.PersistenceSelectHealthcheck == other.PersistenceSelectHealthcheck ||
                    this.PersistenceSelectHealthcheck != null &&
                    this.PersistenceSelectHealthcheck.Equals(other.PersistenceSelectHealthcheck)
                ) && 
                (
                    this.VertxHttpClientsIamBytesRead == other.VertxHttpClientsIamBytesRead ||
                    this.VertxHttpClientsIamBytesRead != null &&
                    this.VertxHttpClientsIamBytesRead.Equals(other.VertxHttpClientsIamBytesRead)
                ) && 
                (
                    this.PersistenceSelectInitialAccounts == other.PersistenceSelectInitialAccounts ||
                    this.PersistenceSelectInitialAccounts != null &&
                    this.PersistenceSelectInitialAccounts.Equals(other.PersistenceSelectInitialAccounts)
                ) && 
                (
                    this.VertxEventbusHandlers == other.VertxEventbusHandlers ||
                    this.VertxEventbusHandlers != null &&
                    this.VertxEventbusHandlers.Equals(other.VertxEventbusHandlers)
                ) && 
                (
                    this.VertxHttpServersExceptions == other.VertxHttpServersExceptions ||
                    this.VertxHttpServersExceptions != null &&
                    this.VertxHttpServersExceptions.Equals(other.VertxHttpServersExceptions)
                ) && 
                (
                    this.VertxEventbusMessagesReplyFailures == other.VertxEventbusMessagesReplyFailures ||
                    this.VertxEventbusMessagesReplyFailures != null &&
                    this.VertxEventbusMessagesReplyFailures.Equals(other.VertxEventbusMessagesReplyFailures)
                ) && 
                (
                    this.VertxHttpClientsIamHeadRequests == other.VertxHttpClientsIamHeadRequests ||
                    this.VertxHttpClientsIamHeadRequests != null &&
                    this.VertxHttpClientsIamHeadRequests.Equals(other.VertxHttpClientsIamHeadRequests)
                ) && 
                (
                    this.JvmMemPoolsPSOldGenMax == other.JvmMemPoolsPSOldGenMax ||
                    this.JvmMemPoolsPSOldGenMax != null &&
                    this.JvmMemPoolsPSOldGenMax.Equals(other.JvmMemPoolsPSOldGenMax)
                ) && 
                (
                    this.PersistenceUpdateUpdateAccountUpgradeTime == other.PersistenceUpdateUpdateAccountUpgradeTime ||
                    this.PersistenceUpdateUpdateAccountUpgradeTime != null &&
                    this.PersistenceUpdateUpdateAccountUpgradeTime.Equals(other.PersistenceUpdateUpdateAccountUpgradeTime)
                ) && 
                (
                    this.JvmMemPoolsCompressedClassSpaceInit == other.JvmMemPoolsCompressedClassSpaceInit ||
                    this.JvmMemPoolsCompressedClassSpaceInit != null &&
                    this.JvmMemPoolsCompressedClassSpaceInit.Equals(other.JvmMemPoolsCompressedClassSpaceInit)
                ) && 
                (
                    this.JvmMemPoolsCodeCacheUsage == other.JvmMemPoolsCodeCacheUsage ||
                    this.JvmMemPoolsCodeCacheUsage != null &&
                    this.JvmMemPoolsCodeCacheUsage.Equals(other.JvmMemPoolsCodeCacheUsage)
                ) && 
                (
                    this.VertxVerticles == other.VertxVerticles ||
                    this.VertxVerticles != null &&
                    this.VertxVerticles.Equals(other.VertxVerticles)
                ) && 
                (
                    this.VertxHttpServersResponses2xx == other.VertxHttpServersResponses2xx ||
                    this.VertxHttpServersResponses2xx != null &&
                    this.VertxHttpServersResponses2xx.Equals(other.VertxHttpServersResponses2xx)
                ) && 
                (
                    this.PersistenceInsertImportLog == other.PersistenceInsertImportLog ||
                    this.PersistenceInsertImportLog != null &&
                    this.PersistenceInsertImportLog.Equals(other.PersistenceInsertImportLog)
                ) && 
                (
                    this.VertxHttpServersPatchRequests == other.VertxHttpServersPatchRequests ||
                    this.VertxHttpServersPatchRequests != null &&
                    this.VertxHttpServersPatchRequests.Equals(other.VertxHttpServersPatchRequests)
                ) && 
                (
                    this.HttpHandlerServiceUpdateLogTimer == other.HttpHandlerServiceUpdateLogTimer ||
                    this.HttpHandlerServiceUpdateLogTimer != null &&
                    this.HttpHandlerServiceUpdateLogTimer.Equals(other.HttpHandlerServiceUpdateLogTimer)
                ) && 
                (
                    this.JvmMemPoolsMetaspaceInit == other.JvmMemPoolsMetaspaceInit ||
                    this.JvmMemPoolsMetaspaceInit != null &&
                    this.JvmMemPoolsMetaspaceInit.Equals(other.JvmMemPoolsMetaspaceInit)
                ) && 
                (
                    this.JvmGcPSMarkSweepTime == other.JvmGcPSMarkSweepTime ||
                    this.JvmGcPSMarkSweepTime != null &&
                    this.JvmGcPSMarkSweepTime.Equals(other.JvmGcPSMarkSweepTime)
                ) && 
                (
                    this.HttpHandlerTimeSeriesTimer == other.HttpHandlerTimeSeriesTimer ||
                    this.HttpHandlerTimeSeriesTimer != null &&
                    this.HttpHandlerTimeSeriesTimer.Equals(other.HttpHandlerTimeSeriesTimer)
                ) && 
                (
                    this.VertxHttpServersConnections == other.VertxHttpServersConnections ||
                    this.VertxHttpServersConnections != null &&
                    this.VertxHttpServersConnections.Equals(other.VertxHttpServersConnections)
                ) && 
                (
                    this.VertxEventbusMessagesSentLocal == other.VertxEventbusMessagesSentLocal ||
                    this.VertxEventbusMessagesSentLocal != null &&
                    this.VertxEventbusMessagesSentLocal.Equals(other.VertxEventbusMessagesSentLocal)
                ) && 
                (
                    this.VertxHttpClientsIamOtherRequests == other.VertxHttpClientsIamOtherRequests ||
                    this.VertxHttpClientsIamOtherRequests != null &&
                    this.VertxHttpClientsIamOtherRequests.Equals(other.VertxHttpClientsIamOtherRequests)
                ) && 
                (
                    this.VertxHttpClientsIamResponses5xx == other.VertxHttpClientsIamResponses5xx ||
                    this.VertxHttpClientsIamResponses5xx != null &&
                    this.VertxHttpClientsIamResponses5xx.Equals(other.VertxHttpClientsIamResponses5xx)
                ) && 
                (
                    this.JvmMemPoolsPSEdenSpaceMax == other.JvmMemPoolsPSEdenSpaceMax ||
                    this.JvmMemPoolsPSEdenSpaceMax != null &&
                    this.JvmMemPoolsPSEdenSpaceMax.Equals(other.JvmMemPoolsPSEdenSpaceMax)
                ) && 
                (
                    this.VertxEventbusMessagesDeliveredRemote == other.VertxEventbusMessagesDeliveredRemote ||
                    this.VertxEventbusMessagesDeliveredRemote != null &&
                    this.VertxEventbusMessagesDeliveredRemote.Equals(other.VertxEventbusMessagesDeliveredRemote)
                ) && 
                (
                    this.VertxHttpClientsIamConnectionsPoolRatio == other.VertxHttpClientsIamConnectionsPoolRatio ||
                    this.VertxHttpClientsIamConnectionsPoolRatio != null &&
                    this.VertxHttpClientsIamConnectionsPoolRatio.Equals(other.VertxHttpClientsIamConnectionsPoolRatio)
                ) && 
                (
                    this.PersistentStoreDsPoolConnectionTimeoutRate == other.PersistentStoreDsPoolConnectionTimeoutRate ||
                    this.PersistentStoreDsPoolConnectionTimeoutRate != null &&
                    this.PersistentStoreDsPoolConnectionTimeoutRate.Equals(other.PersistentStoreDsPoolConnectionTimeoutRate)
                ) && 
                (
                    this.JvmMemPoolsPSSurvivorSpaceUsage == other.JvmMemPoolsPSSurvivorSpaceUsage ||
                    this.JvmMemPoolsPSSurvivorSpaceUsage != null &&
                    this.JvmMemPoolsPSSurvivorSpaceUsage.Equals(other.JvmMemPoolsPSSurvivorSpaceUsage)
                ) && 
                (
                    this.JvmMemTotalCommitted == other.JvmMemTotalCommitted ||
                    this.JvmMemTotalCommitted != null &&
                    this.JvmMemTotalCommitted.Equals(other.JvmMemTotalCommitted)
                ) && 
                (
                    this.JvmMemNonHeapUsed == other.JvmMemNonHeapUsed ||
                    this.JvmMemNonHeapUsed != null &&
                    this.JvmMemNonHeapUsed.Equals(other.JvmMemNonHeapUsed)
                ) && 
                (
                    this.PersistentStoreDsPoolWait == other.PersistentStoreDsPoolWait ||
                    this.PersistentStoreDsPoolWait != null &&
                    this.PersistentStoreDsPoolWait.Equals(other.PersistentStoreDsPoolWait)
                ) && 
                (
                    this.VertxWorkerPoolSize == other.VertxWorkerPoolSize ||
                    this.VertxWorkerPoolSize != null &&
                    this.VertxWorkerPoolSize.Equals(other.VertxWorkerPoolSize)
                ) && 
                (
                    this.VertxPoolsWorkerVertXInternalBlockingInUse == other.VertxPoolsWorkerVertXInternalBlockingInUse ||
                    this.VertxPoolsWorkerVertXInternalBlockingInUse != null &&
                    this.VertxPoolsWorkerVertXInternalBlockingInUse.Equals(other.VertxPoolsWorkerVertXInternalBlockingInUse)
                ) && 
                (
                    this.VertxEventbusMessagesPublished == other.VertxEventbusMessagesPublished ||
                    this.VertxEventbusMessagesPublished != null &&
                    this.VertxEventbusMessagesPublished.Equals(other.VertxEventbusMessagesPublished)
                ) && 
                (
                    this.VertxHttpServersGetRequests == other.VertxHttpServersGetRequests ||
                    this.VertxHttpServersGetRequests != null &&
                    this.VertxHttpServersGetRequests.Equals(other.VertxHttpServersGetRequests)
                ) && 
                (
                    this.VertxHttpClientsIamOpenNetsockets == other.VertxHttpClientsIamOpenNetsockets ||
                    this.VertxHttpClientsIamOpenNetsockets != null &&
                    this.VertxHttpClientsIamOpenNetsockets.Equals(other.VertxHttpClientsIamOpenNetsockets)
                ) && 
                (
                    this.JvmMemNonHeapInit == other.JvmMemNonHeapInit ||
                    this.JvmMemNonHeapInit != null &&
                    this.JvmMemNonHeapInit.Equals(other.JvmMemNonHeapInit)
                ) && 
                (
                    this.VertxHttpClientsIamDeleteRequests == other.VertxHttpClientsIamDeleteRequests ||
                    this.VertxHttpClientsIamDeleteRequests != null &&
                    this.VertxHttpClientsIamDeleteRequests.Equals(other.VertxHttpClientsIamDeleteRequests)
                ) && 
                (
                    this.JvmMemPoolsPSEdenSpaceUsed == other.JvmMemPoolsPSEdenSpaceUsed ||
                    this.JvmMemPoolsPSEdenSpaceUsed != null &&
                    this.JvmMemPoolsPSEdenSpaceUsed.Equals(other.JvmMemPoolsPSEdenSpaceUsed)
                ) && 
                (
                    this.HttpHandlerMetricsHandlerTimer == other.HttpHandlerMetricsHandlerTimer ||
                    this.HttpHandlerMetricsHandlerTimer != null &&
                    this.HttpHandlerMetricsHandlerTimer.Equals(other.HttpHandlerMetricsHandlerTimer)
                ) && 
                (
                    this.PersistenceSelectImportLogActiveDevices == other.PersistenceSelectImportLogActiveDevices ||
                    this.PersistenceSelectImportLogActiveDevices != null &&
                    this.PersistenceSelectImportLogActiveDevices.Equals(other.PersistenceSelectImportLogActiveDevices)
                ) && 
                (
                    this.HttpHandlerActivedevicesTimer == other.HttpHandlerActivedevicesTimer ||
                    this.HttpHandlerActivedevicesTimer != null &&
                    this.HttpHandlerActivedevicesTimer.Equals(other.HttpHandlerActivedevicesTimer)
                ) && 
                (
                    this.VertxHttpClientsIamOpenConnections == other.VertxHttpClientsIamOpenConnections ||
                    this.VertxHttpClientsIamOpenConnections != null &&
                    this.VertxHttpClientsIamOpenConnections.SequenceEqual(other.VertxHttpClientsIamOpenConnections)
                ) && 
                (
                    this.JvmMemPoolsPSSurvivorSpaceUsed == other.JvmMemPoolsPSSurvivorSpaceUsed ||
                    this.JvmMemPoolsPSSurvivorSpaceUsed != null &&
                    this.JvmMemPoolsPSSurvivorSpaceUsed.Equals(other.JvmMemPoolsPSSurvivorSpaceUsed)
                ) && 
                (
                    this.VertxHttpClientsIamResponses1xx == other.VertxHttpClientsIamResponses1xx ||
                    this.VertxHttpClientsIamResponses1xx != null &&
                    this.VertxHttpClientsIamResponses1xx.Equals(other.VertxHttpClientsIamResponses1xx)
                ) && 
                (
                    this.PersistenceInsertDlq == other.PersistenceInsertDlq ||
                    this.PersistenceInsertDlq != null &&
                    this.PersistenceInsertDlq.Equals(other.PersistenceInsertDlq)
                ) && 
                (
                    this.VertxEventbusMessagesPublishedRemote == other.VertxEventbusMessagesPublishedRemote ||
                    this.VertxEventbusMessagesPublishedRemote != null &&
                    this.VertxEventbusMessagesPublishedRemote.Equals(other.VertxEventbusMessagesPublishedRemote)
                ) && 
                (
                    this.JvmMemPoolsPSOldGenInit == other.JvmMemPoolsPSOldGenInit ||
                    this.JvmMemPoolsPSOldGenInit != null &&
                    this.JvmMemPoolsPSOldGenInit.Equals(other.JvmMemPoolsPSOldGenInit)
                ) && 
                (
                    this.VertxHttpClientsIamConnections == other.VertxHttpClientsIamConnections ||
                    this.VertxHttpClientsIamConnections != null &&
                    this.VertxHttpClientsIamConnections.Equals(other.VertxHttpClientsIamConnections)
                ) && 
                (
                    this.VertxEventbusMessagesPending == other.VertxEventbusMessagesPending ||
                    this.VertxEventbusMessagesPending != null &&
                    this.VertxEventbusMessagesPending.Equals(other.VertxEventbusMessagesPending)
                ) && 
                (
                    this.VertxHttpServersConnectRequests == other.VertxHttpServersConnectRequests ||
                    this.VertxHttpServersConnectRequests != null &&
                    this.VertxHttpServersConnectRequests.Equals(other.VertxHttpServersConnectRequests)
                ) && 
                (
                    this.VertxPoolsWorkerVertXInternalBlockingQueueSize == other.VertxPoolsWorkerVertXInternalBlockingQueueSize ||
                    this.VertxPoolsWorkerVertXInternalBlockingQueueSize != null &&
                    this.VertxPoolsWorkerVertXInternalBlockingQueueSize.Equals(other.VertxPoolsWorkerVertXInternalBlockingQueueSize)
                ) && 
                (
                    this.HttpHandlerBuildInfoTimer == other.HttpHandlerBuildInfoTimer ||
                    this.HttpHandlerBuildInfoTimer != null &&
                    this.HttpHandlerBuildInfoTimer.Equals(other.HttpHandlerBuildInfoTimer)
                ) && 
                (
                    this.JvmMemPoolsPSEdenSpaceUsage == other.JvmMemPoolsPSEdenSpaceUsage ||
                    this.JvmMemPoolsPSEdenSpaceUsage != null &&
                    this.JvmMemPoolsPSEdenSpaceUsage.Equals(other.JvmMemPoolsPSEdenSpaceUsage)
                ) && 
                (
                    this.VertxEventbusMessagesPublishedLocal == other.VertxEventbusMessagesPublishedLocal ||
                    this.VertxEventbusMessagesPublishedLocal != null &&
                    this.VertxEventbusMessagesPublishedLocal.Equals(other.VertxEventbusMessagesPublishedLocal)
                ) && 
                (
                    this.PersistenceSelectAccountsStatisticsAll == other.PersistenceSelectAccountsStatisticsAll ||
                    this.PersistenceSelectAccountsStatisticsAll != null &&
                    this.PersistenceSelectAccountsStatisticsAll.Equals(other.PersistenceSelectAccountsStatisticsAll)
                ) && 
                (
                    this.PersistenceSelectAccountsStatisticsWithAccount == other.PersistenceSelectAccountsStatisticsWithAccount ||
                    this.PersistenceSelectAccountsStatisticsWithAccount != null &&
                    this.PersistenceSelectAccountsStatisticsWithAccount.Equals(other.PersistenceSelectAccountsStatisticsWithAccount)
                ) && 
                (
                    this.JvmGcPSScavengeTime == other.JvmGcPSScavengeTime ||
                    this.JvmGcPSScavengeTime != null &&
                    this.JvmGcPSScavengeTime.Equals(other.JvmGcPSScavengeTime)
                ) && 
                (
                    this.VertxHttpClientsIamExceptions == other.VertxHttpClientsIamExceptions ||
                    this.VertxHttpClientsIamExceptions != null &&
                    this.VertxHttpClientsIamExceptions.Equals(other.VertxHttpClientsIamExceptions)
                ) && 
                (
                    this.JvmMemPoolsPSOldGenUsage == other.JvmMemPoolsPSOldGenUsage ||
                    this.JvmMemPoolsPSOldGenUsage != null &&
                    this.JvmMemPoolsPSOldGenUsage.Equals(other.JvmMemPoolsPSOldGenUsage)
                ) && 
                (
                    this.VertxHttpServersPostRequests == other.VertxHttpServersPostRequests ||
                    this.VertxHttpServersPostRequests != null &&
                    this.VertxHttpServersPostRequests.Equals(other.VertxHttpServersPostRequests)
                ) && 
                (
                    this.JvmMemPoolsPSOldGenUsedAfterGc == other.JvmMemPoolsPSOldGenUsedAfterGc ||
                    this.JvmMemPoolsPSOldGenUsedAfterGc != null &&
                    this.JvmMemPoolsPSOldGenUsedAfterGc.Equals(other.JvmMemPoolsPSOldGenUsedAfterGc)
                ) && 
                (
                    this.VertxEventbusMessagesSentRemote == other.VertxEventbusMessagesSentRemote ||
                    this.VertxEventbusMessagesSentRemote != null &&
                    this.VertxEventbusMessagesSentRemote.Equals(other.VertxEventbusMessagesSentRemote)
                ) && 
                (
                    this.PersistenceSelectAccounts == other.PersistenceSelectAccounts ||
                    this.PersistenceSelectAccounts != null &&
                    this.PersistenceSelectAccounts.Equals(other.PersistenceSelectAccounts)
                ) && 
                (
                    this.VertxEventbusMessagesPendingRemote == other.VertxEventbusMessagesPendingRemote ||
                    this.VertxEventbusMessagesPendingRemote != null &&
                    this.VertxEventbusMessagesPendingRemote.Equals(other.VertxEventbusMessagesPendingRemote)
                ) && 
                (
                    this.VertxEventbusMessagesReceivedLocal == other.VertxEventbusMessagesReceivedLocal ||
                    this.VertxEventbusMessagesReceivedLocal != null &&
                    this.VertxEventbusMessagesReceivedLocal.Equals(other.VertxEventbusMessagesReceivedLocal)
                ) && 
                (
                    this.JvmMemPoolsCodeCacheMax == other.JvmMemPoolsCodeCacheMax ||
                    this.JvmMemPoolsCodeCacheMax != null &&
                    this.JvmMemPoolsCodeCacheMax.Equals(other.JvmMemPoolsCodeCacheMax)
                ) && 
                (
                    this.VertxPoolsWorkerVertXInternalBlockingMaxPoolSize == other.VertxPoolsWorkerVertXInternalBlockingMaxPoolSize ||
                    this.VertxPoolsWorkerVertXInternalBlockingMaxPoolSize != null &&
                    this.VertxPoolsWorkerVertXInternalBlockingMaxPoolSize.Equals(other.VertxPoolsWorkerVertXInternalBlockingMaxPoolSize)
                ) && 
                (
                    this.PersistenceOperationStore == other.PersistenceOperationStore ||
                    this.PersistenceOperationStore != null &&
                    this.PersistenceOperationStore.Equals(other.PersistenceOperationStore)
                ) && 
                (
                    this.HttpHandlerHealthCheckTimer == other.HttpHandlerHealthCheckTimer ||
                    this.HttpHandlerHealthCheckTimer != null &&
                    this.HttpHandlerHealthCheckTimer.Equals(other.HttpHandlerHealthCheckTimer)
                ) && 
                (
                    this.VertxHttpClientsIamConnectRequests == other.VertxHttpClientsIamConnectRequests ||
                    this.VertxHttpClientsIamConnectRequests != null &&
                    this.VertxHttpClientsIamConnectRequests.Equals(other.VertxHttpClientsIamConnectRequests)
                ) && 
                (
                    this.VertxHttpServersTraceRequests == other.VertxHttpServersTraceRequests ||
                    this.VertxHttpServersTraceRequests != null &&
                    this.VertxHttpServersTraceRequests.Equals(other.VertxHttpServersTraceRequests)
                ) && 
                (
                    this.JvmMemNonHeapUsage == other.JvmMemNonHeapUsage ||
                    this.JvmMemNonHeapUsage != null &&
                    this.JvmMemNonHeapUsage.Equals(other.JvmMemNonHeapUsage)
                ) && 
                (
                    this.VertxHttpServersPutRequests == other.VertxHttpServersPutRequests ||
                    this.VertxHttpServersPutRequests != null &&
                    this.VertxHttpServersPutRequests.Equals(other.VertxHttpServersPutRequests)
                ) && 
                (
                    this.JvmMemTotalUsed == other.JvmMemTotalUsed ||
                    this.JvmMemTotalUsed != null &&
                    this.JvmMemTotalUsed.Equals(other.JvmMemTotalUsed)
                ) && 
                (
                    this.JvmMemPoolsCodeCacheCommitted == other.JvmMemPoolsCodeCacheCommitted ||
                    this.JvmMemPoolsCodeCacheCommitted != null &&
                    this.JvmMemPoolsCodeCacheCommitted.Equals(other.JvmMemPoolsCodeCacheCommitted)
                ) && 
                (
                    this.HttpHandlerAccountStatsWithoutAccount == other.HttpHandlerAccountStatsWithoutAccount ||
                    this.HttpHandlerAccountStatsWithoutAccount != null &&
                    this.HttpHandlerAccountStatsWithoutAccount.Equals(other.HttpHandlerAccountStatsWithoutAccount)
                ) && 
                (
                    this.VertxEventbusMessagesDeliveredLocal == other.VertxEventbusMessagesDeliveredLocal ||
                    this.VertxEventbusMessagesDeliveredLocal != null &&
                    this.VertxEventbusMessagesDeliveredLocal.Equals(other.VertxEventbusMessagesDeliveredLocal)
                ) && 
                (
                    this.JvmMemPoolsPSEdenSpaceUsedAfterGc == other.JvmMemPoolsPSEdenSpaceUsedAfterGc ||
                    this.JvmMemPoolsPSEdenSpaceUsedAfterGc != null &&
                    this.JvmMemPoolsPSEdenSpaceUsedAfterGc.Equals(other.JvmMemPoolsPSEdenSpaceUsedAfterGc)
                ) && 
                (
                    this.JvmMemPoolsCompressedClassSpaceUsed == other.JvmMemPoolsCompressedClassSpaceUsed ||
                    this.JvmMemPoolsCompressedClassSpaceUsed != null &&
                    this.JvmMemPoolsCompressedClassSpaceUsed.Equals(other.JvmMemPoolsCompressedClassSpaceUsed)
                ) && 
                (
                    this.VertxPoolsWorkerVertXWorkerThreadQueueDelay == other.VertxPoolsWorkerVertXWorkerThreadQueueDelay ||
                    this.VertxPoolsWorkerVertXWorkerThreadQueueDelay != null &&
                    this.VertxPoolsWorkerVertXWorkerThreadQueueDelay.Equals(other.VertxPoolsWorkerVertXWorkerThreadQueueDelay)
                ) && 
                (
                    this.VertxPoolsWorkerVertXInternalBlockingQueueDelay == other.VertxPoolsWorkerVertXInternalBlockingQueueDelay ||
                    this.VertxPoolsWorkerVertXInternalBlockingQueueDelay != null &&
                    this.VertxPoolsWorkerVertXInternalBlockingQueueDelay.Equals(other.VertxPoolsWorkerVertXInternalBlockingQueueDelay)
                ) && 
                (
                    this.HttpHandlerAccountStatsWithAccount == other.HttpHandlerAccountStatsWithAccount ||
                    this.HttpHandlerAccountStatsWithAccount != null &&
                    this.HttpHandlerAccountStatsWithAccount.Equals(other.HttpHandlerAccountStatsWithAccount)
                ) && 
                (
                    this.JvmMemPoolsCompressedClassSpaceMax == other.JvmMemPoolsCompressedClassSpaceMax ||
                    this.JvmMemPoolsCompressedClassSpaceMax != null &&
                    this.JvmMemPoolsCompressedClassSpaceMax.Equals(other.JvmMemPoolsCompressedClassSpaceMax)
                ) && 
                (
                    this.HttpHandlerAccountListTimer == other.HttpHandlerAccountListTimer ||
                    this.HttpHandlerAccountListTimer != null &&
                    this.HttpHandlerAccountListTimer.Equals(other.HttpHandlerAccountListTimer)
                ) && 
                (
                    this.PersistentStoreDsPoolTotalConnections == other.PersistentStoreDsPoolTotalConnections ||
                    this.PersistentStoreDsPoolTotalConnections != null &&
                    this.PersistentStoreDsPoolTotalConnections.Equals(other.PersistentStoreDsPoolTotalConnections)
                ) && 
                (
                    this.JvmMemPoolsPSSurvivorSpaceCommitted == other.JvmMemPoolsPSSurvivorSpaceCommitted ||
                    this.JvmMemPoolsPSSurvivorSpaceCommitted != null &&
                    this.JvmMemPoolsPSSurvivorSpaceCommitted.Equals(other.JvmMemPoolsPSSurvivorSpaceCommitted)
                ) && 
                (
                    this.VertxHttpServersResponses5xx == other.VertxHttpServersResponses5xx ||
                    this.VertxHttpServersResponses5xx != null &&
                    this.VertxHttpServersResponses5xx.Equals(other.VertxHttpServersResponses5xx)
                ) && 
                (
                    this.JvmMemPoolsCodeCacheInit == other.JvmMemPoolsCodeCacheInit ||
                    this.JvmMemPoolsCodeCacheInit != null &&
                    this.JvmMemPoolsCodeCacheInit.Equals(other.JvmMemPoolsCodeCacheInit)
                ) && 
                (
                    this.HttpHandlerReportJson == other.HttpHandlerReportJson ||
                    this.HttpHandlerReportJson != null &&
                    this.HttpHandlerReportJson.Equals(other.HttpHandlerReportJson)
                ) && 
                (
                    this.VertxHttpServersResponses4xx == other.VertxHttpServersResponses4xx ||
                    this.VertxHttpServersResponses4xx != null &&
                    this.VertxHttpServersResponses4xx.Equals(other.VertxHttpServersResponses4xx)
                ) && 
                (
                    this.VertxPoolsWorkerVertXWorkerThreadUsage == other.VertxPoolsWorkerVertXWorkerThreadUsage ||
                    this.VertxPoolsWorkerVertXWorkerThreadUsage != null &&
                    this.VertxPoolsWorkerVertXWorkerThreadUsage.Equals(other.VertxPoolsWorkerVertXWorkerThreadUsage)
                ) && 
                (
                    this.JvmMemHeapInit == other.JvmMemHeapInit ||
                    this.JvmMemHeapInit != null &&
                    this.JvmMemHeapInit.Equals(other.JvmMemHeapInit)
                ) && 
                (
                    this.JvmMemHeapMax == other.JvmMemHeapMax ||
                    this.JvmMemHeapMax != null &&
                    this.JvmMemHeapMax.Equals(other.JvmMemHeapMax)
                ) && 
                (
                    this.VertxHttpServersResponses1xx == other.VertxHttpServersResponses1xx ||
                    this.VertxHttpServersResponses1xx != null &&
                    this.VertxHttpServersResponses1xx.Equals(other.VertxHttpServersResponses1xx)
                ) && 
                (
                    this.VertxHttpClientsIamPostRequests == other.VertxHttpClientsIamPostRequests ||
                    this.VertxHttpClientsIamPostRequests != null &&
                    this.VertxHttpClientsIamPostRequests.Equals(other.VertxHttpClientsIamPostRequests)
                ) && 
                (
                    this.VertxHttpServersOpenWebsockets == other.VertxHttpServersOpenWebsockets ||
                    this.VertxHttpServersOpenWebsockets != null &&
                    this.VertxHttpServersOpenWebsockets.Equals(other.VertxHttpServersOpenWebsockets)
                ) && 
                (
                    this.VertxHttpServersOtherRequests == other.VertxHttpServersOtherRequests ||
                    this.VertxHttpServersOtherRequests != null &&
                    this.VertxHttpServersOtherRequests.Equals(other.VertxHttpServersOtherRequests)
                ) && 
                (
                    this.HttpHandlerReportActivedevicesTimer == other.HttpHandlerReportActivedevicesTimer ||
                    this.HttpHandlerReportActivedevicesTimer != null &&
                    this.HttpHandlerReportActivedevicesTimer.Equals(other.HttpHandlerReportActivedevicesTimer)
                ) && 
                (
                    this.JvmMemHeapUsage == other.JvmMemHeapUsage ||
                    this.JvmMemHeapUsage != null &&
                    this.JvmMemHeapUsage.Equals(other.JvmMemHeapUsage)
                ) && 
                (
                    this.JvmMemNonHeapCommitted == other.JvmMemNonHeapCommitted ||
                    this.JvmMemNonHeapCommitted != null &&
                    this.JvmMemNonHeapCommitted.Equals(other.JvmMemNonHeapCommitted)
                ) && 
                (
                    this.JvmMemPoolsCompressedClassSpaceUsage == other.JvmMemPoolsCompressedClassSpaceUsage ||
                    this.JvmMemPoolsCompressedClassSpaceUsage != null &&
                    this.JvmMemPoolsCompressedClassSpaceUsage.Equals(other.JvmMemPoolsCompressedClassSpaceUsage)
                ) && 
                (
                    this.PersistentStoreDsPoolConnectionCreation == other.PersistentStoreDsPoolConnectionCreation ||
                    this.PersistentStoreDsPoolConnectionCreation != null &&
                    this.PersistentStoreDsPoolConnectionCreation.Equals(other.PersistentStoreDsPoolConnectionCreation)
                ) && 
                (
                    this.VertxHttpClientsIamOpenWebsockets == other.VertxHttpClientsIamOpenWebsockets ||
                    this.VertxHttpClientsIamOpenWebsockets != null &&
                    this.VertxHttpClientsIamOpenWebsockets.Equals(other.VertxHttpClientsIamOpenWebsockets)
                ) && 
                (
                    this.PersistenceSelectImportLog == other.PersistenceSelectImportLog ||
                    this.PersistenceSelectImportLog != null &&
                    this.PersistenceSelectImportLog.Equals(other.PersistenceSelectImportLog)
                ) && 
                (
                    this.PersistenceSelectAccountsStatisticsWithAccountsAndStarttime == other.PersistenceSelectAccountsStatisticsWithAccountsAndStarttime ||
                    this.PersistenceSelectAccountsStatisticsWithAccountsAndStarttime != null &&
                    this.PersistenceSelectAccountsStatisticsWithAccountsAndStarttime.Equals(other.PersistenceSelectAccountsStatisticsWithAccountsAndStarttime)
                ) && 
                (
                    this.PersistenceOperationDlq == other.PersistenceOperationDlq ||
                    this.PersistenceOperationDlq != null &&
                    this.PersistenceOperationDlq.Equals(other.PersistenceOperationDlq)
                ) && 
                (
                    this.JvmGcPSScavengeCount == other.JvmGcPSScavengeCount ||
                    this.JvmGcPSScavengeCount != null &&
                    this.JvmGcPSScavengeCount.Equals(other.JvmGcPSScavengeCount)
                ) && 
                (
                    this.VertxHttpClientsIamConnectionsMaxPoolSize == other.VertxHttpClientsIamConnectionsMaxPoolSize ||
                    this.VertxHttpClientsIamConnectionsMaxPoolSize != null &&
                    this.VertxHttpClientsIamConnectionsMaxPoolSize.Equals(other.VertxHttpClientsIamConnectionsMaxPoolSize)
                ) && 
                (
                    this.VertxEventbusMessagesBytesWritten == other.VertxEventbusMessagesBytesWritten ||
                    this.VertxEventbusMessagesBytesWritten != null &&
                    this.VertxEventbusMessagesBytesWritten.Equals(other.VertxEventbusMessagesBytesWritten)
                ) && 
                (
                    this.JvmMemPoolsCompressedClassSpaceCommitted == other.JvmMemPoolsCompressedClassSpaceCommitted ||
                    this.JvmMemPoolsCompressedClassSpaceCommitted != null &&
                    this.JvmMemPoolsCompressedClassSpaceCommitted.Equals(other.JvmMemPoolsCompressedClassSpaceCommitted)
                ) && 
                (
                    this.VertxVerticlesComMbedBillingServerApiserverHttpHttpServer == other.VertxVerticlesComMbedBillingServerApiserverHttpHttpServer ||
                    this.VertxVerticlesComMbedBillingServerApiserverHttpHttpServer != null &&
                    this.VertxVerticlesComMbedBillingServerApiserverHttpHttpServer.Equals(other.VertxVerticlesComMbedBillingServerApiserverHttpHttpServer)
                ) && 
                (
                    this.JvmMemPoolsCodeCacheUsed == other.JvmMemPoolsCodeCacheUsed ||
                    this.JvmMemPoolsCodeCacheUsed != null &&
                    this.JvmMemPoolsCodeCacheUsed.Equals(other.JvmMemPoolsCodeCacheUsed)
                ) && 
                (
                    this.HttpHandlerImportLogTimer == other.HttpHandlerImportLogTimer ||
                    this.HttpHandlerImportLogTimer != null &&
                    this.HttpHandlerImportLogTimer.Equals(other.HttpHandlerImportLogTimer)
                ) && 
                (
                    this.VertxEventbusMessagesPendingLocal == other.VertxEventbusMessagesPendingLocal ||
                    this.VertxEventbusMessagesPendingLocal != null &&
                    this.VertxEventbusMessagesPendingLocal.Equals(other.VertxEventbusMessagesPendingLocal)
                ) && 
                (
                    this.VertxHttpServersBytesWritten == other.VertxHttpServersBytesWritten ||
                    this.VertxHttpServersBytesWritten != null &&
                    this.VertxHttpServersBytesWritten.Equals(other.VertxHttpServersBytesWritten)
                ) && 
                (
                    this.VertxEventbusMessagesBytesRead == other.VertxEventbusMessagesBytesRead ||
                    this.VertxEventbusMessagesBytesRead != null &&
                    this.VertxEventbusMessagesBytesRead.Equals(other.VertxEventbusMessagesBytesRead)
                ) && 
                (
                    this.VertxHttpServersHeadRequests == other.VertxHttpServersHeadRequests ||
                    this.VertxHttpServersHeadRequests != null &&
                    this.VertxHttpServersHeadRequests.Equals(other.VertxHttpServersHeadRequests)
                ) && 
                (
                    this.JvmMemPoolsPSSurvivorSpaceUsedAfterGc == other.JvmMemPoolsPSSurvivorSpaceUsedAfterGc ||
                    this.JvmMemPoolsPSSurvivorSpaceUsedAfterGc != null &&
                    this.JvmMemPoolsPSSurvivorSpaceUsedAfterGc.Equals(other.JvmMemPoolsPSSurvivorSpaceUsedAfterGc)
                ) && 
                (
                    this.PersistentStoreDsPoolActiveConnections == other.PersistentStoreDsPoolActiveConnections ||
                    this.PersistentStoreDsPoolActiveConnections != null &&
                    this.PersistentStoreDsPoolActiveConnections.Equals(other.PersistentStoreDsPoolActiveConnections)
                ) && 
                (
                    this.PersistenceConnectionConnect == other.PersistenceConnectionConnect ||
                    this.PersistenceConnectionConnect != null &&
                    this.PersistenceConnectionConnect.Equals(other.PersistenceConnectionConnect)
                ) && 
                (
                    this.JvmMemPoolsPSEdenSpaceInit == other.JvmMemPoolsPSEdenSpaceInit ||
                    this.JvmMemPoolsPSEdenSpaceInit != null &&
                    this.JvmMemPoolsPSEdenSpaceInit.Equals(other.JvmMemPoolsPSEdenSpaceInit)
                ) && 
                (
                    this.VertxHttpClientsIamResponses2xx == other.VertxHttpClientsIamResponses2xx ||
                    this.VertxHttpClientsIamResponses2xx != null &&
                    this.VertxHttpClientsIamResponses2xx.Equals(other.VertxHttpClientsIamResponses2xx)
                ) && 
                (
                    this.PersistenceInsertAccountStatistics == other.PersistenceInsertAccountStatistics ||
                    this.PersistenceInsertAccountStatistics != null &&
                    this.PersistenceInsertAccountStatistics.Equals(other.PersistenceInsertAccountStatistics)
                ) && 
                (
                    this.JvmMemPoolsMetaspaceUsed == other.JvmMemPoolsMetaspaceUsed ||
                    this.JvmMemPoolsMetaspaceUsed != null &&
                    this.JvmMemPoolsMetaspaceUsed.Equals(other.JvmMemPoolsMetaspaceUsed)
                ) && 
                (
                    this.JvmMemPoolsMetaspaceMax == other.JvmMemPoolsMetaspaceMax ||
                    this.JvmMemPoolsMetaspaceMax != null &&
                    this.JvmMemPoolsMetaspaceMax.Equals(other.JvmMemPoolsMetaspaceMax)
                ) && 
                (
                    this.HttpHandlerReportZip == other.HttpHandlerReportZip ||
                    this.HttpHandlerReportZip != null &&
                    this.HttpHandlerReportZip.Equals(other.HttpHandlerReportZip)
                ) && 
                (
                    this.VertxEventLoopSize == other.VertxEventLoopSize ||
                    this.VertxEventLoopSize != null &&
                    this.VertxEventLoopSize.Equals(other.VertxEventLoopSize)
                ) && 
                (
                    this.VertxHttpServersOpenConnections == other.VertxHttpServersOpenConnections ||
                    this.VertxHttpServersOpenConnections != null &&
                    this.VertxHttpServersOpenConnections.SequenceEqual(other.VertxHttpServersOpenConnections)
                ) && 
                (
                    this.VertxHttpClientsIamResponses3xx == other.VertxHttpClientsIamResponses3xx ||
                    this.VertxHttpClientsIamResponses3xx != null &&
                    this.VertxHttpClientsIamResponses3xx.Equals(other.VertxHttpClientsIamResponses3xx)
                ) && 
                (
                    this.JvmMemPoolsPSEdenSpaceCommitted == other.JvmMemPoolsPSEdenSpaceCommitted ||
                    this.JvmMemPoolsPSEdenSpaceCommitted != null &&
                    this.JvmMemPoolsPSEdenSpaceCommitted.Equals(other.JvmMemPoolsPSEdenSpaceCommitted)
                ) && 
                (
                    this.VertxHttpServersResponses3xx == other.VertxHttpServersResponses3xx ||
                    this.VertxHttpServersResponses3xx != null &&
                    this.VertxHttpServersResponses3xx.Equals(other.VertxHttpServersResponses3xx)
                ) && 
                (
                    this.VertxHttpClientsIamGetRequests == other.VertxHttpClientsIamGetRequests ||
                    this.VertxHttpClientsIamGetRequests != null &&
                    this.VertxHttpClientsIamGetRequests.Equals(other.VertxHttpClientsIamGetRequests)
                ) && 
                (
                    this.JvmMemHeapCommitted == other.JvmMemHeapCommitted ||
                    this.JvmMemHeapCommitted != null &&
                    this.JvmMemHeapCommitted.Equals(other.JvmMemHeapCommitted)
                ) && 
                (
                    this.VertxHttpServersOpenNetsockets == other.VertxHttpServersOpenNetsockets ||
                    this.VertxHttpServersOpenNetsockets != null &&
                    this.VertxHttpServersOpenNetsockets.Equals(other.VertxHttpServersOpenNetsockets)
                ) && 
                (
                    this.VertxHttpServersRequests == other.VertxHttpServersRequests ||
                    this.VertxHttpServersRequests != null &&
                    this.VertxHttpServersRequests.Equals(other.VertxHttpServersRequests)
                ) && 
                (
                    this.PersistentStoreDsPoolPendingConnections == other.PersistentStoreDsPoolPendingConnections ||
                    this.PersistentStoreDsPoolPendingConnections != null &&
                    this.PersistentStoreDsPoolPendingConnections.Equals(other.PersistentStoreDsPoolPendingConnections)
                ) && 
                (
                    this.JvmMemPoolsPSOldGenUsed == other.JvmMemPoolsPSOldGenUsed ||
                    this.JvmMemPoolsPSOldGenUsed != null &&
                    this.JvmMemPoolsPSOldGenUsed.Equals(other.JvmMemPoolsPSOldGenUsed)
                ) && 
                (
                    this.JvmMemPoolsMetaspaceUsage == other.JvmMemPoolsMetaspaceUsage ||
                    this.JvmMemPoolsMetaspaceUsage != null &&
                    this.JvmMemPoolsMetaspaceUsage.Equals(other.JvmMemPoolsMetaspaceUsage)
                ) && 
                (
                    this.VertxPoolsWorkerVertXWorkerThreadInUse == other.VertxPoolsWorkerVertXWorkerThreadInUse ||
                    this.VertxPoolsWorkerVertXWorkerThreadInUse != null &&
                    this.VertxPoolsWorkerVertXWorkerThreadInUse.Equals(other.VertxPoolsWorkerVertXWorkerThreadInUse)
                ) && 
                (
                    this.PersistenceSelectTimeSeries == other.PersistenceSelectTimeSeries ||
                    this.PersistenceSelectTimeSeries != null &&
                    this.PersistenceSelectTimeSeries.Equals(other.PersistenceSelectTimeSeries)
                ) && 
                (
                    this.JvmMemPoolsMetaspaceCommitted == other.JvmMemPoolsMetaspaceCommitted ||
                    this.JvmMemPoolsMetaspaceCommitted != null &&
                    this.JvmMemPoolsMetaspaceCommitted.Equals(other.JvmMemPoolsMetaspaceCommitted)
                ) && 
                (
                    this.VertxEventbusMessagesDelivered == other.VertxEventbusMessagesDelivered ||
                    this.VertxEventbusMessagesDelivered != null &&
                    this.VertxEventbusMessagesDelivered.Equals(other.VertxEventbusMessagesDelivered)
                ) && 
                (
                    this.VertxHttpClientsIamPatchRequests == other.VertxHttpClientsIamPatchRequests ||
                    this.VertxHttpClientsIamPatchRequests != null &&
                    this.VertxHttpClientsIamPatchRequests.Equals(other.VertxHttpClientsIamPatchRequests)
                ) && 
                (
                    this.VertxEventbusMessagesReceivedRemote == other.VertxEventbusMessagesReceivedRemote ||
                    this.VertxEventbusMessagesReceivedRemote != null &&
                    this.VertxEventbusMessagesReceivedRemote.Equals(other.VertxEventbusMessagesReceivedRemote)
                ) && 
                (
                    this.VertxHttpClientsIamResponses4xx == other.VertxHttpClientsIamResponses4xx ||
                    this.VertxHttpClientsIamResponses4xx != null &&
                    this.VertxHttpClientsIamResponses4xx.Equals(other.VertxHttpClientsIamResponses4xx)
                ) && 
                (
                    this.VertxPoolsWorkerVertXWorkerThreadPoolRatio == other.VertxPoolsWorkerVertXWorkerThreadPoolRatio ||
                    this.VertxPoolsWorkerVertXWorkerThreadPoolRatio != null &&
                    this.VertxPoolsWorkerVertXWorkerThreadPoolRatio.Equals(other.VertxPoolsWorkerVertXWorkerThreadPoolRatio)
                ) && 
                (
                    this.VertxHttpClientsIamTraceRequests == other.VertxHttpClientsIamTraceRequests ||
                    this.VertxHttpClientsIamTraceRequests != null &&
                    this.VertxHttpClientsIamTraceRequests.Equals(other.VertxHttpClientsIamTraceRequests)
                ) && 
                (
                    this.VertxPoolsWorkerVertXWorkerThreadMaxPoolSize == other.VertxPoolsWorkerVertXWorkerThreadMaxPoolSize ||
                    this.VertxPoolsWorkerVertXWorkerThreadMaxPoolSize != null &&
                    this.VertxPoolsWorkerVertXWorkerThreadMaxPoolSize.Equals(other.VertxPoolsWorkerVertXWorkerThreadMaxPoolSize)
                ) && 
                (
                    this.VertxPoolsWorkerVertXInternalBlockingUsage == other.VertxPoolsWorkerVertXInternalBlockingUsage ||
                    this.VertxPoolsWorkerVertXInternalBlockingUsage != null &&
                    this.VertxPoolsWorkerVertXInternalBlockingUsage.Equals(other.VertxPoolsWorkerVertXInternalBlockingUsage)
                ) && 
                (
                    this.PersistenceSelectCheckIfExists == other.PersistenceSelectCheckIfExists ||
                    this.PersistenceSelectCheckIfExists != null &&
                    this.PersistenceSelectCheckIfExists.Equals(other.PersistenceSelectCheckIfExists)
                ) && 
                (
                    this.VertxEventbusMessagesReceived == other.VertxEventbusMessagesReceived ||
                    this.VertxEventbusMessagesReceived != null &&
                    this.VertxEventbusMessagesReceived.Equals(other.VertxEventbusMessagesReceived)
                ) && 
                (
                    this.JvmGcPSMarkSweepCount == other.JvmGcPSMarkSweepCount ||
                    this.JvmGcPSMarkSweepCount != null &&
                    this.JvmGcPSMarkSweepCount.Equals(other.JvmGcPSMarkSweepCount)
                ) && 
                (
                    this.JvmMemPoolsPSSurvivorSpaceMax == other.JvmMemPoolsPSSurvivorSpaceMax ||
                    this.JvmMemPoolsPSSurvivorSpaceMax != null &&
                    this.JvmMemPoolsPSSurvivorSpaceMax.Equals(other.JvmMemPoolsPSSurvivorSpaceMax)
                ) && 
                (
                    this.PersistentStoreDsPoolIdleConnections == other.PersistentStoreDsPoolIdleConnections ||
                    this.PersistentStoreDsPoolIdleConnections != null &&
                    this.PersistentStoreDsPoolIdleConnections.Equals(other.PersistentStoreDsPoolIdleConnections)
                ) && 
                (
                    this.VertxHttpClientsIamPutRequests == other.VertxHttpClientsIamPutRequests ||
                    this.VertxHttpClientsIamPutRequests != null &&
                    this.VertxHttpClientsIamPutRequests.Equals(other.VertxHttpClientsIamPutRequests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VertxHttpServersDeleteRequests != null)
                    hash = hash * 59 + this.VertxHttpServersDeleteRequests.GetHashCode();
                if (this.JvmMemPoolsPSSurvivorSpaceInit != null)
                    hash = hash * 59 + this.JvmMemPoolsPSSurvivorSpaceInit.GetHashCode();
                if (this.VertxPoolsWorkerVertXWorkerThreadQueueSize != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXWorkerThreadQueueSize.GetHashCode();
                if (this.VertxHttpServersOptionsRequests != null)
                    hash = hash * 59 + this.VertxHttpServersOptionsRequests.GetHashCode();
                if (this.JvmMemNonHeapMax != null)
                    hash = hash * 59 + this.JvmMemNonHeapMax.GetHashCode();
                if (this.JvmMemHeapUsed != null)
                    hash = hash * 59 + this.JvmMemHeapUsed.GetHashCode();
                if (this.JvmMemTotalMax != null)
                    hash = hash * 59 + this.JvmMemTotalMax.GetHashCode();
                if (this.PersistenceInsertAccount != null)
                    hash = hash * 59 + this.PersistenceInsertAccount.GetHashCode();
                if (this.VertxHttpServersBytesRead != null)
                    hash = hash * 59 + this.VertxHttpServersBytesRead.GetHashCode();
                if (this.VertxHttpClientsIamBytesWritten != null)
                    hash = hash * 59 + this.VertxHttpClientsIamBytesWritten.GetHashCode();
                if (this.VertxHttpClientsIamOptionsRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamOptionsRequests.GetHashCode();
                if (this.VertxHttpClientsIamRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamRequests.GetHashCode();
                if (this.PersistentStoreDsPoolUsage != null)
                    hash = hash * 59 + this.PersistentStoreDsPoolUsage.GetHashCode();
                if (this.VertxPoolsWorkerVertXInternalBlockingPoolRatio != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXInternalBlockingPoolRatio.GetHashCode();
                if (this.PersistenceInsertActiveDevices != null)
                    hash = hash * 59 + this.PersistenceInsertActiveDevices.GetHashCode();
                if (this.JvmMemTotalInit != null)
                    hash = hash * 59 + this.JvmMemTotalInit.GetHashCode();
                if (this.JvmMemPoolsPSOldGenCommitted != null)
                    hash = hash * 59 + this.JvmMemPoolsPSOldGenCommitted.GetHashCode();
                if (this.VertxTimers != null)
                    hash = hash * 59 + this.VertxTimers.GetHashCode();
                if (this.VertxEventbusMessagesSent != null)
                    hash = hash * 59 + this.VertxEventbusMessagesSent.GetHashCode();
                if (this.PersistenceSelectServiceUpdateLog != null)
                    hash = hash * 59 + this.PersistenceSelectServiceUpdateLog.GetHashCode();
                if (this.PersistenceSelectAccountsStatisticsWithAccounts != null)
                    hash = hash * 59 + this.PersistenceSelectAccountsStatisticsWithAccounts.GetHashCode();
                if (this.HttpHandlerActivedevicesInImportsTimer != null)
                    hash = hash * 59 + this.HttpHandlerActivedevicesInImportsTimer.GetHashCode();
                if (this.PersistenceSelectHealthcheck != null)
                    hash = hash * 59 + this.PersistenceSelectHealthcheck.GetHashCode();
                if (this.VertxHttpClientsIamBytesRead != null)
                    hash = hash * 59 + this.VertxHttpClientsIamBytesRead.GetHashCode();
                if (this.PersistenceSelectInitialAccounts != null)
                    hash = hash * 59 + this.PersistenceSelectInitialAccounts.GetHashCode();
                if (this.VertxEventbusHandlers != null)
                    hash = hash * 59 + this.VertxEventbusHandlers.GetHashCode();
                if (this.VertxHttpServersExceptions != null)
                    hash = hash * 59 + this.VertxHttpServersExceptions.GetHashCode();
                if (this.VertxEventbusMessagesReplyFailures != null)
                    hash = hash * 59 + this.VertxEventbusMessagesReplyFailures.GetHashCode();
                if (this.VertxHttpClientsIamHeadRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamHeadRequests.GetHashCode();
                if (this.JvmMemPoolsPSOldGenMax != null)
                    hash = hash * 59 + this.JvmMemPoolsPSOldGenMax.GetHashCode();
                if (this.PersistenceUpdateUpdateAccountUpgradeTime != null)
                    hash = hash * 59 + this.PersistenceUpdateUpdateAccountUpgradeTime.GetHashCode();
                if (this.JvmMemPoolsCompressedClassSpaceInit != null)
                    hash = hash * 59 + this.JvmMemPoolsCompressedClassSpaceInit.GetHashCode();
                if (this.JvmMemPoolsCodeCacheUsage != null)
                    hash = hash * 59 + this.JvmMemPoolsCodeCacheUsage.GetHashCode();
                if (this.VertxVerticles != null)
                    hash = hash * 59 + this.VertxVerticles.GetHashCode();
                if (this.VertxHttpServersResponses2xx != null)
                    hash = hash * 59 + this.VertxHttpServersResponses2xx.GetHashCode();
                if (this.PersistenceInsertImportLog != null)
                    hash = hash * 59 + this.PersistenceInsertImportLog.GetHashCode();
                if (this.VertxHttpServersPatchRequests != null)
                    hash = hash * 59 + this.VertxHttpServersPatchRequests.GetHashCode();
                if (this.HttpHandlerServiceUpdateLogTimer != null)
                    hash = hash * 59 + this.HttpHandlerServiceUpdateLogTimer.GetHashCode();
                if (this.JvmMemPoolsMetaspaceInit != null)
                    hash = hash * 59 + this.JvmMemPoolsMetaspaceInit.GetHashCode();
                if (this.JvmGcPSMarkSweepTime != null)
                    hash = hash * 59 + this.JvmGcPSMarkSweepTime.GetHashCode();
                if (this.HttpHandlerTimeSeriesTimer != null)
                    hash = hash * 59 + this.HttpHandlerTimeSeriesTimer.GetHashCode();
                if (this.VertxHttpServersConnections != null)
                    hash = hash * 59 + this.VertxHttpServersConnections.GetHashCode();
                if (this.VertxEventbusMessagesSentLocal != null)
                    hash = hash * 59 + this.VertxEventbusMessagesSentLocal.GetHashCode();
                if (this.VertxHttpClientsIamOtherRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamOtherRequests.GetHashCode();
                if (this.VertxHttpClientsIamResponses5xx != null)
                    hash = hash * 59 + this.VertxHttpClientsIamResponses5xx.GetHashCode();
                if (this.JvmMemPoolsPSEdenSpaceMax != null)
                    hash = hash * 59 + this.JvmMemPoolsPSEdenSpaceMax.GetHashCode();
                if (this.VertxEventbusMessagesDeliveredRemote != null)
                    hash = hash * 59 + this.VertxEventbusMessagesDeliveredRemote.GetHashCode();
                if (this.VertxHttpClientsIamConnectionsPoolRatio != null)
                    hash = hash * 59 + this.VertxHttpClientsIamConnectionsPoolRatio.GetHashCode();
                if (this.PersistentStoreDsPoolConnectionTimeoutRate != null)
                    hash = hash * 59 + this.PersistentStoreDsPoolConnectionTimeoutRate.GetHashCode();
                if (this.JvmMemPoolsPSSurvivorSpaceUsage != null)
                    hash = hash * 59 + this.JvmMemPoolsPSSurvivorSpaceUsage.GetHashCode();
                if (this.JvmMemTotalCommitted != null)
                    hash = hash * 59 + this.JvmMemTotalCommitted.GetHashCode();
                if (this.JvmMemNonHeapUsed != null)
                    hash = hash * 59 + this.JvmMemNonHeapUsed.GetHashCode();
                if (this.PersistentStoreDsPoolWait != null)
                    hash = hash * 59 + this.PersistentStoreDsPoolWait.GetHashCode();
                if (this.VertxWorkerPoolSize != null)
                    hash = hash * 59 + this.VertxWorkerPoolSize.GetHashCode();
                if (this.VertxPoolsWorkerVertXInternalBlockingInUse != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXInternalBlockingInUse.GetHashCode();
                if (this.VertxEventbusMessagesPublished != null)
                    hash = hash * 59 + this.VertxEventbusMessagesPublished.GetHashCode();
                if (this.VertxHttpServersGetRequests != null)
                    hash = hash * 59 + this.VertxHttpServersGetRequests.GetHashCode();
                if (this.VertxHttpClientsIamOpenNetsockets != null)
                    hash = hash * 59 + this.VertxHttpClientsIamOpenNetsockets.GetHashCode();
                if (this.JvmMemNonHeapInit != null)
                    hash = hash * 59 + this.JvmMemNonHeapInit.GetHashCode();
                if (this.VertxHttpClientsIamDeleteRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamDeleteRequests.GetHashCode();
                if (this.JvmMemPoolsPSEdenSpaceUsed != null)
                    hash = hash * 59 + this.JvmMemPoolsPSEdenSpaceUsed.GetHashCode();
                if (this.HttpHandlerMetricsHandlerTimer != null)
                    hash = hash * 59 + this.HttpHandlerMetricsHandlerTimer.GetHashCode();
                if (this.PersistenceSelectImportLogActiveDevices != null)
                    hash = hash * 59 + this.PersistenceSelectImportLogActiveDevices.GetHashCode();
                if (this.HttpHandlerActivedevicesTimer != null)
                    hash = hash * 59 + this.HttpHandlerActivedevicesTimer.GetHashCode();
                if (this.VertxHttpClientsIamOpenConnections != null)
                    hash = hash * 59 + this.VertxHttpClientsIamOpenConnections.GetHashCode();
                if (this.JvmMemPoolsPSSurvivorSpaceUsed != null)
                    hash = hash * 59 + this.JvmMemPoolsPSSurvivorSpaceUsed.GetHashCode();
                if (this.VertxHttpClientsIamResponses1xx != null)
                    hash = hash * 59 + this.VertxHttpClientsIamResponses1xx.GetHashCode();
                if (this.PersistenceInsertDlq != null)
                    hash = hash * 59 + this.PersistenceInsertDlq.GetHashCode();
                if (this.VertxEventbusMessagesPublishedRemote != null)
                    hash = hash * 59 + this.VertxEventbusMessagesPublishedRemote.GetHashCode();
                if (this.JvmMemPoolsPSOldGenInit != null)
                    hash = hash * 59 + this.JvmMemPoolsPSOldGenInit.GetHashCode();
                if (this.VertxHttpClientsIamConnections != null)
                    hash = hash * 59 + this.VertxHttpClientsIamConnections.GetHashCode();
                if (this.VertxEventbusMessagesPending != null)
                    hash = hash * 59 + this.VertxEventbusMessagesPending.GetHashCode();
                if (this.VertxHttpServersConnectRequests != null)
                    hash = hash * 59 + this.VertxHttpServersConnectRequests.GetHashCode();
                if (this.VertxPoolsWorkerVertXInternalBlockingQueueSize != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXInternalBlockingQueueSize.GetHashCode();
                if (this.HttpHandlerBuildInfoTimer != null)
                    hash = hash * 59 + this.HttpHandlerBuildInfoTimer.GetHashCode();
                if (this.JvmMemPoolsPSEdenSpaceUsage != null)
                    hash = hash * 59 + this.JvmMemPoolsPSEdenSpaceUsage.GetHashCode();
                if (this.VertxEventbusMessagesPublishedLocal != null)
                    hash = hash * 59 + this.VertxEventbusMessagesPublishedLocal.GetHashCode();
                if (this.PersistenceSelectAccountsStatisticsAll != null)
                    hash = hash * 59 + this.PersistenceSelectAccountsStatisticsAll.GetHashCode();
                if (this.PersistenceSelectAccountsStatisticsWithAccount != null)
                    hash = hash * 59 + this.PersistenceSelectAccountsStatisticsWithAccount.GetHashCode();
                if (this.JvmGcPSScavengeTime != null)
                    hash = hash * 59 + this.JvmGcPSScavengeTime.GetHashCode();
                if (this.VertxHttpClientsIamExceptions != null)
                    hash = hash * 59 + this.VertxHttpClientsIamExceptions.GetHashCode();
                if (this.JvmMemPoolsPSOldGenUsage != null)
                    hash = hash * 59 + this.JvmMemPoolsPSOldGenUsage.GetHashCode();
                if (this.VertxHttpServersPostRequests != null)
                    hash = hash * 59 + this.VertxHttpServersPostRequests.GetHashCode();
                if (this.JvmMemPoolsPSOldGenUsedAfterGc != null)
                    hash = hash * 59 + this.JvmMemPoolsPSOldGenUsedAfterGc.GetHashCode();
                if (this.VertxEventbusMessagesSentRemote != null)
                    hash = hash * 59 + this.VertxEventbusMessagesSentRemote.GetHashCode();
                if (this.PersistenceSelectAccounts != null)
                    hash = hash * 59 + this.PersistenceSelectAccounts.GetHashCode();
                if (this.VertxEventbusMessagesPendingRemote != null)
                    hash = hash * 59 + this.VertxEventbusMessagesPendingRemote.GetHashCode();
                if (this.VertxEventbusMessagesReceivedLocal != null)
                    hash = hash * 59 + this.VertxEventbusMessagesReceivedLocal.GetHashCode();
                if (this.JvmMemPoolsCodeCacheMax != null)
                    hash = hash * 59 + this.JvmMemPoolsCodeCacheMax.GetHashCode();
                if (this.VertxPoolsWorkerVertXInternalBlockingMaxPoolSize != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXInternalBlockingMaxPoolSize.GetHashCode();
                if (this.PersistenceOperationStore != null)
                    hash = hash * 59 + this.PersistenceOperationStore.GetHashCode();
                if (this.HttpHandlerHealthCheckTimer != null)
                    hash = hash * 59 + this.HttpHandlerHealthCheckTimer.GetHashCode();
                if (this.VertxHttpClientsIamConnectRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamConnectRequests.GetHashCode();
                if (this.VertxHttpServersTraceRequests != null)
                    hash = hash * 59 + this.VertxHttpServersTraceRequests.GetHashCode();
                if (this.JvmMemNonHeapUsage != null)
                    hash = hash * 59 + this.JvmMemNonHeapUsage.GetHashCode();
                if (this.VertxHttpServersPutRequests != null)
                    hash = hash * 59 + this.VertxHttpServersPutRequests.GetHashCode();
                if (this.JvmMemTotalUsed != null)
                    hash = hash * 59 + this.JvmMemTotalUsed.GetHashCode();
                if (this.JvmMemPoolsCodeCacheCommitted != null)
                    hash = hash * 59 + this.JvmMemPoolsCodeCacheCommitted.GetHashCode();
                if (this.HttpHandlerAccountStatsWithoutAccount != null)
                    hash = hash * 59 + this.HttpHandlerAccountStatsWithoutAccount.GetHashCode();
                if (this.VertxEventbusMessagesDeliveredLocal != null)
                    hash = hash * 59 + this.VertxEventbusMessagesDeliveredLocal.GetHashCode();
                if (this.JvmMemPoolsPSEdenSpaceUsedAfterGc != null)
                    hash = hash * 59 + this.JvmMemPoolsPSEdenSpaceUsedAfterGc.GetHashCode();
                if (this.JvmMemPoolsCompressedClassSpaceUsed != null)
                    hash = hash * 59 + this.JvmMemPoolsCompressedClassSpaceUsed.GetHashCode();
                if (this.VertxPoolsWorkerVertXWorkerThreadQueueDelay != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXWorkerThreadQueueDelay.GetHashCode();
                if (this.VertxPoolsWorkerVertXInternalBlockingQueueDelay != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXInternalBlockingQueueDelay.GetHashCode();
                if (this.HttpHandlerAccountStatsWithAccount != null)
                    hash = hash * 59 + this.HttpHandlerAccountStatsWithAccount.GetHashCode();
                if (this.JvmMemPoolsCompressedClassSpaceMax != null)
                    hash = hash * 59 + this.JvmMemPoolsCompressedClassSpaceMax.GetHashCode();
                if (this.HttpHandlerAccountListTimer != null)
                    hash = hash * 59 + this.HttpHandlerAccountListTimer.GetHashCode();
                if (this.PersistentStoreDsPoolTotalConnections != null)
                    hash = hash * 59 + this.PersistentStoreDsPoolTotalConnections.GetHashCode();
                if (this.JvmMemPoolsPSSurvivorSpaceCommitted != null)
                    hash = hash * 59 + this.JvmMemPoolsPSSurvivorSpaceCommitted.GetHashCode();
                if (this.VertxHttpServersResponses5xx != null)
                    hash = hash * 59 + this.VertxHttpServersResponses5xx.GetHashCode();
                if (this.JvmMemPoolsCodeCacheInit != null)
                    hash = hash * 59 + this.JvmMemPoolsCodeCacheInit.GetHashCode();
                if (this.HttpHandlerReportJson != null)
                    hash = hash * 59 + this.HttpHandlerReportJson.GetHashCode();
                if (this.VertxHttpServersResponses4xx != null)
                    hash = hash * 59 + this.VertxHttpServersResponses4xx.GetHashCode();
                if (this.VertxPoolsWorkerVertXWorkerThreadUsage != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXWorkerThreadUsage.GetHashCode();
                if (this.JvmMemHeapInit != null)
                    hash = hash * 59 + this.JvmMemHeapInit.GetHashCode();
                if (this.JvmMemHeapMax != null)
                    hash = hash * 59 + this.JvmMemHeapMax.GetHashCode();
                if (this.VertxHttpServersResponses1xx != null)
                    hash = hash * 59 + this.VertxHttpServersResponses1xx.GetHashCode();
                if (this.VertxHttpClientsIamPostRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamPostRequests.GetHashCode();
                if (this.VertxHttpServersOpenWebsockets != null)
                    hash = hash * 59 + this.VertxHttpServersOpenWebsockets.GetHashCode();
                if (this.VertxHttpServersOtherRequests != null)
                    hash = hash * 59 + this.VertxHttpServersOtherRequests.GetHashCode();
                if (this.HttpHandlerReportActivedevicesTimer != null)
                    hash = hash * 59 + this.HttpHandlerReportActivedevicesTimer.GetHashCode();
                if (this.JvmMemHeapUsage != null)
                    hash = hash * 59 + this.JvmMemHeapUsage.GetHashCode();
                if (this.JvmMemNonHeapCommitted != null)
                    hash = hash * 59 + this.JvmMemNonHeapCommitted.GetHashCode();
                if (this.JvmMemPoolsCompressedClassSpaceUsage != null)
                    hash = hash * 59 + this.JvmMemPoolsCompressedClassSpaceUsage.GetHashCode();
                if (this.PersistentStoreDsPoolConnectionCreation != null)
                    hash = hash * 59 + this.PersistentStoreDsPoolConnectionCreation.GetHashCode();
                if (this.VertxHttpClientsIamOpenWebsockets != null)
                    hash = hash * 59 + this.VertxHttpClientsIamOpenWebsockets.GetHashCode();
                if (this.PersistenceSelectImportLog != null)
                    hash = hash * 59 + this.PersistenceSelectImportLog.GetHashCode();
                if (this.PersistenceSelectAccountsStatisticsWithAccountsAndStarttime != null)
                    hash = hash * 59 + this.PersistenceSelectAccountsStatisticsWithAccountsAndStarttime.GetHashCode();
                if (this.PersistenceOperationDlq != null)
                    hash = hash * 59 + this.PersistenceOperationDlq.GetHashCode();
                if (this.JvmGcPSScavengeCount != null)
                    hash = hash * 59 + this.JvmGcPSScavengeCount.GetHashCode();
                if (this.VertxHttpClientsIamConnectionsMaxPoolSize != null)
                    hash = hash * 59 + this.VertxHttpClientsIamConnectionsMaxPoolSize.GetHashCode();
                if (this.VertxEventbusMessagesBytesWritten != null)
                    hash = hash * 59 + this.VertxEventbusMessagesBytesWritten.GetHashCode();
                if (this.JvmMemPoolsCompressedClassSpaceCommitted != null)
                    hash = hash * 59 + this.JvmMemPoolsCompressedClassSpaceCommitted.GetHashCode();
                if (this.VertxVerticlesComMbedBillingServerApiserverHttpHttpServer != null)
                    hash = hash * 59 + this.VertxVerticlesComMbedBillingServerApiserverHttpHttpServer.GetHashCode();
                if (this.JvmMemPoolsCodeCacheUsed != null)
                    hash = hash * 59 + this.JvmMemPoolsCodeCacheUsed.GetHashCode();
                if (this.HttpHandlerImportLogTimer != null)
                    hash = hash * 59 + this.HttpHandlerImportLogTimer.GetHashCode();
                if (this.VertxEventbusMessagesPendingLocal != null)
                    hash = hash * 59 + this.VertxEventbusMessagesPendingLocal.GetHashCode();
                if (this.VertxHttpServersBytesWritten != null)
                    hash = hash * 59 + this.VertxHttpServersBytesWritten.GetHashCode();
                if (this.VertxEventbusMessagesBytesRead != null)
                    hash = hash * 59 + this.VertxEventbusMessagesBytesRead.GetHashCode();
                if (this.VertxHttpServersHeadRequests != null)
                    hash = hash * 59 + this.VertxHttpServersHeadRequests.GetHashCode();
                if (this.JvmMemPoolsPSSurvivorSpaceUsedAfterGc != null)
                    hash = hash * 59 + this.JvmMemPoolsPSSurvivorSpaceUsedAfterGc.GetHashCode();
                if (this.PersistentStoreDsPoolActiveConnections != null)
                    hash = hash * 59 + this.PersistentStoreDsPoolActiveConnections.GetHashCode();
                if (this.PersistenceConnectionConnect != null)
                    hash = hash * 59 + this.PersistenceConnectionConnect.GetHashCode();
                if (this.JvmMemPoolsPSEdenSpaceInit != null)
                    hash = hash * 59 + this.JvmMemPoolsPSEdenSpaceInit.GetHashCode();
                if (this.VertxHttpClientsIamResponses2xx != null)
                    hash = hash * 59 + this.VertxHttpClientsIamResponses2xx.GetHashCode();
                if (this.PersistenceInsertAccountStatistics != null)
                    hash = hash * 59 + this.PersistenceInsertAccountStatistics.GetHashCode();
                if (this.JvmMemPoolsMetaspaceUsed != null)
                    hash = hash * 59 + this.JvmMemPoolsMetaspaceUsed.GetHashCode();
                if (this.JvmMemPoolsMetaspaceMax != null)
                    hash = hash * 59 + this.JvmMemPoolsMetaspaceMax.GetHashCode();
                if (this.HttpHandlerReportZip != null)
                    hash = hash * 59 + this.HttpHandlerReportZip.GetHashCode();
                if (this.VertxEventLoopSize != null)
                    hash = hash * 59 + this.VertxEventLoopSize.GetHashCode();
                if (this.VertxHttpServersOpenConnections != null)
                    hash = hash * 59 + this.VertxHttpServersOpenConnections.GetHashCode();
                if (this.VertxHttpClientsIamResponses3xx != null)
                    hash = hash * 59 + this.VertxHttpClientsIamResponses3xx.GetHashCode();
                if (this.JvmMemPoolsPSEdenSpaceCommitted != null)
                    hash = hash * 59 + this.JvmMemPoolsPSEdenSpaceCommitted.GetHashCode();
                if (this.VertxHttpServersResponses3xx != null)
                    hash = hash * 59 + this.VertxHttpServersResponses3xx.GetHashCode();
                if (this.VertxHttpClientsIamGetRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamGetRequests.GetHashCode();
                if (this.JvmMemHeapCommitted != null)
                    hash = hash * 59 + this.JvmMemHeapCommitted.GetHashCode();
                if (this.VertxHttpServersOpenNetsockets != null)
                    hash = hash * 59 + this.VertxHttpServersOpenNetsockets.GetHashCode();
                if (this.VertxHttpServersRequests != null)
                    hash = hash * 59 + this.VertxHttpServersRequests.GetHashCode();
                if (this.PersistentStoreDsPoolPendingConnections != null)
                    hash = hash * 59 + this.PersistentStoreDsPoolPendingConnections.GetHashCode();
                if (this.JvmMemPoolsPSOldGenUsed != null)
                    hash = hash * 59 + this.JvmMemPoolsPSOldGenUsed.GetHashCode();
                if (this.JvmMemPoolsMetaspaceUsage != null)
                    hash = hash * 59 + this.JvmMemPoolsMetaspaceUsage.GetHashCode();
                if (this.VertxPoolsWorkerVertXWorkerThreadInUse != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXWorkerThreadInUse.GetHashCode();
                if (this.PersistenceSelectTimeSeries != null)
                    hash = hash * 59 + this.PersistenceSelectTimeSeries.GetHashCode();
                if (this.JvmMemPoolsMetaspaceCommitted != null)
                    hash = hash * 59 + this.JvmMemPoolsMetaspaceCommitted.GetHashCode();
                if (this.VertxEventbusMessagesDelivered != null)
                    hash = hash * 59 + this.VertxEventbusMessagesDelivered.GetHashCode();
                if (this.VertxHttpClientsIamPatchRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamPatchRequests.GetHashCode();
                if (this.VertxEventbusMessagesReceivedRemote != null)
                    hash = hash * 59 + this.VertxEventbusMessagesReceivedRemote.GetHashCode();
                if (this.VertxHttpClientsIamResponses4xx != null)
                    hash = hash * 59 + this.VertxHttpClientsIamResponses4xx.GetHashCode();
                if (this.VertxPoolsWorkerVertXWorkerThreadPoolRatio != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXWorkerThreadPoolRatio.GetHashCode();
                if (this.VertxHttpClientsIamTraceRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamTraceRequests.GetHashCode();
                if (this.VertxPoolsWorkerVertXWorkerThreadMaxPoolSize != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXWorkerThreadMaxPoolSize.GetHashCode();
                if (this.VertxPoolsWorkerVertXInternalBlockingUsage != null)
                    hash = hash * 59 + this.VertxPoolsWorkerVertXInternalBlockingUsage.GetHashCode();
                if (this.PersistenceSelectCheckIfExists != null)
                    hash = hash * 59 + this.PersistenceSelectCheckIfExists.GetHashCode();
                if (this.VertxEventbusMessagesReceived != null)
                    hash = hash * 59 + this.VertxEventbusMessagesReceived.GetHashCode();
                if (this.JvmGcPSMarkSweepCount != null)
                    hash = hash * 59 + this.JvmGcPSMarkSweepCount.GetHashCode();
                if (this.JvmMemPoolsPSSurvivorSpaceMax != null)
                    hash = hash * 59 + this.JvmMemPoolsPSSurvivorSpaceMax.GetHashCode();
                if (this.PersistentStoreDsPoolIdleConnections != null)
                    hash = hash * 59 + this.PersistentStoreDsPoolIdleConnections.GetHashCode();
                if (this.VertxHttpClientsIamPutRequests != null)
                    hash = hash * 59 + this.VertxHttpClientsIamPutRequests.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
