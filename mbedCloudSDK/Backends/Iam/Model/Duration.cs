/* 
 * IAM Identities REST API
 *
 * REST API to manage accounts, groups, users and API keys
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace iam.Model
{
    /// <summary>
    /// This object is used in the garbage collection functionality.
    /// </summary>
    [DataContract]
    public partial class Duration :  IEquatable<Duration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Duration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Duration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Duration" /> class.
        /// </summary>
        /// <param name="_Duration">The duration to determine how old entries should be fetched in the garbage collection. (required).</param>
        public Duration(int? _Duration = default(int?))
        {
            // to ensure "_Duration" is required (not null)
            if (_Duration == null)
            {
                throw new InvalidDataException("_Duration is a required property for Duration and cannot be null");
            }
            else
            {
                this._Duration = _Duration;
            }
        }
        
        /// <summary>
        /// The duration to determine how old entries should be fetched in the garbage collection.
        /// </summary>
        /// <value>The duration to determine how old entries should be fetched in the garbage collection.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? _Duration { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Duration {\n");
            sb.Append("  _Duration: ").Append(_Duration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Duration);
        }

        /// <summary>
        /// Returns true if Duration instances are equal
        /// </summary>
        /// <param name="other">Instance of Duration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Duration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._Duration == other._Duration ||
                    this._Duration != null &&
                    this._Duration.Equals(other._Duration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._Duration != null)
                    hash = hash * 59 + this._Duration.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
