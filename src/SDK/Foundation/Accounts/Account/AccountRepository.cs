// <auto-generated>
//
// Generated by
//                     _                        _
//   /\/\   __ _ _ __ | |__   __ _ ___ ___  ___| |_
//  /    \ / _` | '_ \| '_ \ / _` / __/ __|/ _ \ __|
// / /\/\ \ (_| | | | | | | | (_| \__ \__ \  __/ |_
// \/    \/\__,_|_| |_|_| |_|\__,_|___/___/\___|\__| v 2.0.0
//
// <copyright file="AccountRepository.cs" company="Arm">
// Copyright (c) Arm. All rights reserved.
// </copyright>
// </auto-generated>

namespace Mbed.Cloud.Foundation
{
    using Mbed.Cloud.Common;
    using Mbed.Cloud.Foundation;
    using System.Threading.Tasks;
    using MbedCloudSDK.Exceptions;
    using System.Collections.Generic;
    using System;
    using Mbed.Cloud.RestClient;

    /// <summary>
    /// AccountRepository
    /// </summary>
    public class AccountRepository : Repository, IAccountRepository
    {
        public AccountRepository()
        {
        }

        public AccountRepository(Config config, Client client = null) : base(config, client)
        {
        }

        public async Task<Account> Create(Account request, string action = null)
        {
            try
            {
                var queryParams = new Dictionary<string, object> { { "action", action }, };
                return await Client.CallApi<Account>(path: "/v3/accounts", queryParams: queryParams, request: request, method: HttpMethods.POST);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<IAccountListOptions, Account> List(IAccountListOptions options = null)
        {
            try
            {
                if (options == null)
                {
                    options = new AccountListOptions();
                }

                Func<IAccountListOptions, Task<ResponsePage<Account>>> paginatedFunc = async (IAccountListOptions _options) => { var queryParams = new Dictionary<string, object> { { "after", _options.After }, { "format", _options.Format }, { "include", _options.Include }, { "limit", _options.Limit }, { "order", _options.Order }, { "properties", _options.Properties }, { "status__eq", _options.Filter.GetEncodedValue("status", "$eq") }, { "status__in", _options.Filter.GetEncodedValue("status", "$in") }, { "status__nin", _options.Filter.GetEncodedValue("status", "$nin") }, { "tier__eq", _options.Filter.GetEncodedValue("tier", "$eq") }, { "parent__eq", _options.Filter.GetEncodedValue("parent", "$eq") }, { "end_market__eq", _options.Filter.GetEncodedValue("end_market", "$eq") }, { "country__like", _options.Filter.GetEncodedValue("country", "$like") }, }; return await Client.CallApi<ResponsePage<Account>>(path: "/v3/accounts", queryParams: queryParams, method: HttpMethods.GET); };
                return new PaginatedResponse<IAccountListOptions, Account>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<Account> Me(string include = null, string properties = null)
        {
            try
            {
                var queryParams = new Dictionary<string, object> { { "include", include }, { "properties", properties }, };
                return await Client.CallApi<Account>(path: "/v3/accounts/me", queryParams: queryParams, method: HttpMethods.GET);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<Account> Read(string id, string include = null, string properties = null)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", id }, };
                var queryParams = new Dictionary<string, object> { { "include", include }, { "properties", properties }, };
                return await Client.CallApi<Account>(path: "/v3/accounts/{account_id}", pathParams: pathParams, queryParams: queryParams, method: HttpMethods.GET);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<ISubtenantTrustedCertificateListOptions, SubtenantTrustedCertificate> TrustedCertificates(string id, ISubtenantTrustedCertificateListOptions options = null)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", id }, };
                if (options == null)
                {
                    options = new SubtenantTrustedCertificateListOptions();
                }

                Func<ISubtenantTrustedCertificateListOptions, Task<ResponsePage<SubtenantTrustedCertificate>>> paginatedFunc = async (ISubtenantTrustedCertificateListOptions _options) => { var queryParams = new Dictionary<string, object> { { "after", _options.After }, { "include", _options.Include }, { "limit", _options.Limit }, { "order", _options.Order }, { "name__eq", _options.Filter.GetEncodedValue("name", "$eq") }, { "service__eq", _options.Filter.GetEncodedValue("service", "$eq") }, { "expire__eq", _options.Filter.GetEncodedValue("expire", "$eq") }, { "device_execution_mode__eq", _options.Filter.GetEncodedValue("device_execution_mode", "$eq") }, { "device_execution_mode__neq", _options.Filter.GetEncodedValue("device_execution_mode", "$neq") }, { "owner__eq", _options.Filter.GetEncodedValue("owner", "$eq") }, { "enrollment_mode__eq", _options.Filter.GetEncodedValue("enrollment_mode", "$eq") }, { "status__eq", _options.Filter.GetEncodedValue("status", "$eq") }, { "issuer__like", _options.Filter.GetEncodedValue("issuer", "$like") }, { "subject__like", _options.Filter.GetEncodedValue("subject", "$like") }, { "valid__eq", _options.Filter.GetEncodedValue("valid", "$eq") }, }; return await Client.CallApi<ResponsePage<SubtenantTrustedCertificate>>(path: "/v3/accounts/{account_id}/trusted-certificates", pathParams: pathParams, queryParams: queryParams, method: HttpMethods.GET); };
                return new PaginatedResponse<ISubtenantTrustedCertificateListOptions, SubtenantTrustedCertificate>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public async Task<Account> Update(string id, Account request)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", id }, };
                return await Client.CallApi<Account>(path: "/v3/accounts/{account_id}", pathParams: pathParams, request: request, method: HttpMethods.PUT);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<ISubtenantUserInvitationListOptions, SubtenantUserInvitation> UserInvitations(string id, ISubtenantUserInvitationListOptions options = null)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", id }, };
                if (options == null)
                {
                    options = new SubtenantUserInvitationListOptions();
                }

                Func<ISubtenantUserInvitationListOptions, Task<ResponsePage<SubtenantUserInvitation>>> paginatedFunc = async (ISubtenantUserInvitationListOptions _options) => { var queryParams = new Dictionary<string, object> { { "after", _options.After }, { "limit", _options.Limit }, { "order", _options.Order }, { "login_profile__eq", _options.Filter.GetEncodedValue("login_profile", "$eq") }, }; return await Client.CallApi<ResponsePage<SubtenantUserInvitation>>(path: "/v3/accounts/{account_id}/user-invitations", pathParams: pathParams, queryParams: queryParams, method: HttpMethods.GET); };
                return new PaginatedResponse<ISubtenantUserInvitationListOptions, SubtenantUserInvitation>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }

        public PaginatedResponse<ISubtenantUserListOptions, SubtenantUser> Users(string id, ISubtenantUserListOptions options = null)
        {
            try
            {
                var pathParams = new Dictionary<string, object> { { "account_id", id }, };
                if (options == null)
                {
                    options = new SubtenantUserListOptions();
                }

                Func<ISubtenantUserListOptions, Task<ResponsePage<SubtenantUser>>> paginatedFunc = async (ISubtenantUserListOptions _options) => { var queryParams = new Dictionary<string, object> { { "after", _options.After }, { "include", _options.Include }, { "limit", _options.Limit }, { "order", _options.Order }, { "email__eq", _options.Filter.GetEncodedValue("email", "$eq") }, { "status__eq", _options.Filter.GetEncodedValue("status", "$eq") }, { "status__in", _options.Filter.GetEncodedValue("status", "$in") }, { "status__nin", _options.Filter.GetEncodedValue("status", "$nin") }, { "login_profile__eq", _options.Filter.GetEncodedValue("login_profile", "$eq") }, }; return await Client.CallApi<ResponsePage<SubtenantUser>>(path: "/v3/accounts/{account_id}/users", pathParams: pathParams, queryParams: queryParams, method: HttpMethods.GET); };
                return new PaginatedResponse<ISubtenantUserListOptions, SubtenantUser>(paginatedFunc, options);
            }
            catch (ApiException e)
            {
                throw new CloudApiException(e.ErrorCode, e.Message, e.ErrorContent);
            }
        }
    }
}