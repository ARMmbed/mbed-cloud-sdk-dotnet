/* 
 * <auto-generated>
 * Account Management API
 *
 * API for managing accounts, users, creating API keys, uploading trusted certificates
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * </auto-generated>
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = iam.Client.SwaggerDateConverter;

namespace iam.Model
{
    /// <summary>
    /// This object is used while creating new policies.
    /// </summary>
    [DataContract]
    public partial class PolicyUpdateReq :  IEquatable<PolicyUpdateReq>, IValidatableObject
    {
        /// <summary>
        /// The new status of this policy.
        /// </summary>
        /// <value>The new status of this policy.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for "ACTIVE"
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE,
            
            /// <summary>
            /// Enum INACTIVE for "INACTIVE"
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE
        }

        /// <summary>
        /// The new status of this policy.
        /// </summary>
        /// <value>The new status of this policy.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyUpdateReq" /> class.
        /// </summary>
        /// <param name="Status">The new status of this policy..</param>
        /// <param name="ValidUntil">Specifies the date and time until the policy is valid in UTC time RFC3339. E.g. &#39;2018-02-05T09:43:44Z&#39;.</param>
        /// <param name="GrantExpiresIn">Specifies the value in seconds for how long an authorization result is valid..</param>
        /// <param name="Name">The new name of this policy, must be unique and not longer than 100 character..</param>
        /// <param name="ErrorMessage">Custom error message returned when this policy matches with not allowed result..</param>
        /// <param name="NotResources">New list of not_resources in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten..</param>
        /// <param name="Actions">New list of actions as key-pairs of &#39;{action}&#39;: &#39;true&#39; or &#39;false&#39;, not more than 100. For enabling all actions use { &#39;*&#39;: true }. Previous list will be overwritten..</param>
        /// <param name="NotConditions">New list of not_conditions in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten..</param>
        /// <param name="ValidFrom">Specifies the date and time when the policy will become valid in UTC time RFC3339. E.g. &#39;2018-02-05T09:43:44Z&#39;.</param>
        /// <param name="Users">New list of user IDs this policy is attached to, not more than 100. Previous list will be overwritten..</param>
        /// <param name="Groups">New list of group IDs this policy is attached to, not more than 100. Previous list will be overwritten..</param>
        /// <param name="Tag">New policy tag that can be used for various purposes to be able to distinguish between policies. Not longer than 100 characters..</param>
        /// <param name="NotActions">New list of not_actions, not more than 100. Previous list will be overwritten..</param>
        /// <param name="Apikeys">New list of API key IDs this policy is attached to, not more than 100. Previous list will be overwritten..</param>
        /// <param name="Conditions">New list of conditions in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten..</param>
        /// <param name="Resources">New list of resources in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten..</param>
        /// <param name="Description">The new description of this policy, not longer than 500 character..</param>
        public PolicyUpdateReq(StatusEnum? Status = default(StatusEnum?), DateTime? ValidUntil = default(DateTime?), int? GrantExpiresIn = default(int?), string Name = default(string), string ErrorMessage = default(string), List<string> NotResources = default(List<string>), Dictionary<string, bool?> Actions = default(Dictionary<string, bool?>), List<string> NotConditions = default(List<string>), DateTime? ValidFrom = default(DateTime?), List<string> Users = default(List<string>), List<string> Groups = default(List<string>), string Tag = default(string), List<string> NotActions = default(List<string>), List<string> Apikeys = default(List<string>), List<string> Conditions = default(List<string>), List<string> Resources = default(List<string>), string Description = default(string))
        {
            this.Status = Status;
            this.ValidUntil = ValidUntil;
            this.GrantExpiresIn = GrantExpiresIn;
            this.Name = Name;
            this.ErrorMessage = ErrorMessage;
            this.NotResources = NotResources;
            this.Actions = Actions;
            this.NotConditions = NotConditions;
            this.ValidFrom = ValidFrom;
            this.Users = Users;
            this.Groups = Groups;
            this.Tag = Tag;
            this.NotActions = NotActions;
            this.Apikeys = Apikeys;
            this.Conditions = Conditions;
            this.Resources = Resources;
            this.Description = Description;
        }
        

        /// <summary>
        /// Specifies the date and time until the policy is valid in UTC time RFC3339. E.g. &#39;2018-02-05T09:43:44Z&#39;
        /// </summary>
        /// <value>Specifies the date and time until the policy is valid in UTC time RFC3339. E.g. &#39;2018-02-05T09:43:44Z&#39;</value>
        [DataMember(Name="valid_until", EmitDefaultValue=false)]
        public DateTime? ValidUntil { get; set; }

        /// <summary>
        /// Specifies the value in seconds for how long an authorization result is valid.
        /// </summary>
        /// <value>Specifies the value in seconds for how long an authorization result is valid.</value>
        [DataMember(Name="grant_expires_in", EmitDefaultValue=false)]
        public int? GrantExpiresIn { get; set; }

        /// <summary>
        /// The new name of this policy, must be unique and not longer than 100 character.
        /// </summary>
        /// <value>The new name of this policy, must be unique and not longer than 100 character.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Custom error message returned when this policy matches with not allowed result.
        /// </summary>
        /// <value>Custom error message returned when this policy matches with not allowed result.</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// New list of not_resources in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten.
        /// </summary>
        /// <value>New list of not_resources in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten.</value>
        [DataMember(Name="not_resources", EmitDefaultValue=false)]
        public List<string> NotResources { get; set; }

        /// <summary>
        /// New list of actions as key-pairs of &#39;{action}&#39;: &#39;true&#39; or &#39;false&#39;, not more than 100. For enabling all actions use { &#39;*&#39;: true }. Previous list will be overwritten.
        /// </summary>
        /// <value>New list of actions as key-pairs of &#39;{action}&#39;: &#39;true&#39; or &#39;false&#39;, not more than 100. For enabling all actions use { &#39;*&#39;: true }. Previous list will be overwritten.</value>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public Dictionary<string, bool?> Actions { get; set; }

        /// <summary>
        /// New list of not_conditions in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten.
        /// </summary>
        /// <value>New list of not_conditions in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten.</value>
        [DataMember(Name="not_conditions", EmitDefaultValue=false)]
        public List<string> NotConditions { get; set; }

        /// <summary>
        /// Specifies the date and time when the policy will become valid in UTC time RFC3339. E.g. &#39;2018-02-05T09:43:44Z&#39;
        /// </summary>
        /// <value>Specifies the date and time when the policy will become valid in UTC time RFC3339. E.g. &#39;2018-02-05T09:43:44Z&#39;</value>
        [DataMember(Name="valid_from", EmitDefaultValue=false)]
        public DateTime? ValidFrom { get; set; }

        /// <summary>
        /// New list of user IDs this policy is attached to, not more than 100. Previous list will be overwritten.
        /// </summary>
        /// <value>New list of user IDs this policy is attached to, not more than 100. Previous list will be overwritten.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<string> Users { get; set; }

        /// <summary>
        /// New list of group IDs this policy is attached to, not more than 100. Previous list will be overwritten.
        /// </summary>
        /// <value>New list of group IDs this policy is attached to, not more than 100. Previous list will be overwritten.</value>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// New policy tag that can be used for various purposes to be able to distinguish between policies. Not longer than 100 characters.
        /// </summary>
        /// <value>New policy tag that can be used for various purposes to be able to distinguish between policies. Not longer than 100 characters.</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// New list of not_actions, not more than 100. Previous list will be overwritten.
        /// </summary>
        /// <value>New list of not_actions, not more than 100. Previous list will be overwritten.</value>
        [DataMember(Name="notActions", EmitDefaultValue=false)]
        public List<string> NotActions { get; set; }

        /// <summary>
        /// New list of API key IDs this policy is attached to, not more than 100. Previous list will be overwritten.
        /// </summary>
        /// <value>New list of API key IDs this policy is attached to, not more than 100. Previous list will be overwritten.</value>
        [DataMember(Name="apikeys", EmitDefaultValue=false)]
        public List<string> Apikeys { get; set; }

        /// <summary>
        /// New list of conditions in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten.
        /// </summary>
        /// <value>New list of conditions in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten.</value>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public List<string> Conditions { get; set; }

        /// <summary>
        /// New list of resources in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten.
        /// </summary>
        /// <value>New list of resources in urn:mbed-cloud:{resource-type}:{resource-name} format, not more than 100. Previous list will be overwritten.</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<string> Resources { get; set; }

        /// <summary>
        /// The new description of this policy, not longer than 500 character.
        /// </summary>
        /// <value>The new description of this policy, not longer than 500 character.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyUpdateReq {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  GrantExpiresIn: ").Append(GrantExpiresIn).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  NotResources: ").Append(NotResources).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  NotConditions: ").Append(NotConditions).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  NotActions: ").Append(NotActions).Append("\n");
            sb.Append("  Apikeys: ").Append(Apikeys).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyUpdateReq);
        }

        /// <summary>
        /// Returns true if PolicyUpdateReq instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyUpdateReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyUpdateReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ValidUntil == input.ValidUntil ||
                    (this.ValidUntil != null &&
                    this.ValidUntil.Equals(input.ValidUntil))
                ) && 
                (
                    this.GrantExpiresIn == input.GrantExpiresIn ||
                    (this.GrantExpiresIn != null &&
                    this.GrantExpiresIn.Equals(input.GrantExpiresIn))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.NotResources == input.NotResources ||
                    this.NotResources != null &&
                    this.NotResources.SequenceEqual(input.NotResources)
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.NotConditions == input.NotConditions ||
                    this.NotConditions != null &&
                    this.NotConditions.SequenceEqual(input.NotConditions)
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.NotActions == input.NotActions ||
                    this.NotActions != null &&
                    this.NotActions.SequenceEqual(input.NotActions)
                ) && 
                (
                    this.Apikeys == input.Apikeys ||
                    this.Apikeys != null &&
                    this.Apikeys.SequenceEqual(input.Apikeys)
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    this.Conditions != null &&
                    this.Conditions.SequenceEqual(input.Conditions)
                ) && 
                (
                    this.Resources == input.Resources ||
                    this.Resources != null &&
                    this.Resources.SequenceEqual(input.Resources)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ValidUntil != null)
                    hashCode = hashCode * 59 + this.ValidUntil.GetHashCode();
                if (this.GrantExpiresIn != null)
                    hashCode = hashCode * 59 + this.GrantExpiresIn.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.NotResources != null)
                    hashCode = hashCode * 59 + this.NotResources.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                if (this.NotConditions != null)
                    hashCode = hashCode * 59 + this.NotConditions.GetHashCode();
                if (this.ValidFrom != null)
                    hashCode = hashCode * 59 + this.ValidFrom.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.NotActions != null)
                    hashCode = hashCode * 59 + this.NotActions.GetHashCode();
                if (this.Apikeys != null)
                    hashCode = hashCode * 59 + this.Apikeys.GetHashCode();
                if (this.Conditions != null)
                    hashCode = hashCode * 59 + this.Conditions.GetHashCode();
                if (this.Resources != null)
                    hashCode = hashCode * 59 + this.Resources.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
